<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>设计模式</title>
    <link href="/2024/03/20/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <url>/2024/03/20/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1>设计模式</h1><p>一份好的代码，离不开好的设计模式。设计模式总共有七大准则，二十多种设计模式都是根据七大准则来编写的。</p><ul><li><p><strong>单一职责</strong></p><p>我们尽可能的让一个模块(类)只实现一个功能，在一些复杂的项目中如果一个类实现多个功能的话，那么整体逻辑会狼狈不堪，如果是小demo的话，那么就无所谓了。</p></li><li><p><strong>开闭原则</strong></p><p>软件实体（类、模块或方法）应该对扩展开放，对修改封闭。这意味着在添加新功能时，应该尽量通过扩展现有代码来实现，而不是修改现有代码。</p></li><li><p><strong>里氏替换原则</strong></p><p>基类使用的地方子类一定可以使用，反之不行。</p></li><li><p><strong>接口隔离原则</strong></p><p>接口的粒度应该细化，使得客户端只用到它自己需要的接口</p></li><li><p><strong>依赖倒置原则</strong></p><p>高层模块不应该依赖于低层模块，它们都应该依赖于抽象。抽象不应该依赖于细节，细节应该依赖于抽象。</p></li><li><p><strong>合成复用原则</strong></p><p>尽量使用组合和聚合，而不是继承，来实现代码复用。</p></li><li><p><strong>迪米特原则</strong></p><p>一个对象应该对另一个对象有最少的了解。换句话说，一个对象应该只与直接相关的其他对象进行通信，而避免与无关的对象进行交互。</p></li></ul><p>设计模式总体分为三类：创建型模式，结构型模式，行为模式。</p><p>创建型模式：这类模式提供创建对象的机制， 能够提升已有代码的灵活性和可复⽤性。主要有：工厂、抽象、建造、原型、单例。</p><p>结构型模式：这类模式介绍如何将对象和类组装成较⼤的结构， 并同时保持结构的灵活和⾼效。主要有：适配器、桥接、组合、装饰、外观、亨元、代理。</p><p>行为型模式：这类模式负责对象间的⾼效沟通和职责委派。主要有：责任链、命令、迭代器、中介者、备忘录、观察者、状态、策略、模板、访问者。</p><blockquote><p>所有案例代码: <a href="https://github.com/ykexc/Design">https://github.com/ykexc/Design</a></p></blockquote><h3 id="工厂-方法-模式">工厂(方法)模式</h3><blockquote><p>场景:在发放奖品的场景下，有着不同类别的奖品(实物，优惠券，其他…),入参和出参均不同，通过工厂方法模式统一入参，提高代码扩展性，减少if else</p></blockquote><p>文件目录</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java">├─awards<br>│      Coupon.java<br>│      Goods.java<br>│      IQIYICard.java<br>│      <br>├─req<br>│      GoodsReq.java<br>│<br>├─resp<br>│      GoodsResp.java<br>│<br>├─service<br>│      CouponService.java<br>│      GoodsService.java<br>│      IQIYICardService.java<br>│<br>└─store<br>    │  ICommodity.java<br>    │  StoreFactory.java<br>    │<br>    └─impl<br>            CouponCommodityImpl.java<br>            GoodsCommodityImpl.java<br>            OtherCommodityImpl.java<br></code></pre></td></tr></table></figure><p><code>coupon</code>,<code>goods</code>,<code>iqiyi</code>分别代表着三种不同类别的奖品，service中是三种不同奖品发放的逻辑，入参出参不同，通过定义<code>ICommodity</code>接口统一入参，并实现三种不同方式的发放逻辑，通过<code>StoreFactory</code>进行最路由处理，使代码变得比较整洁干净，易于扩展。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CouponService</span> &#123;<br><br>    <span class="hljs-keyword">public</span> Coupon <span class="hljs-title function_">sendCoupon</span><span class="hljs-params">(String uid, String couponId, String uuid)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;发送优惠券成功: uid: &quot;</span> + uid + <span class="hljs-string">&quot; couponId: &quot;</span> + couponId + <span class="hljs-string">&quot; uid: &quot;</span> + uid);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Coupon</span>(<span class="hljs-string">&quot;0x3f3f3f3f&quot;</span>, <span class="hljs-string">&quot;普通优惠券&quot;</span>);<br>    &#125;<br><br>&#125;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GoodsService</span> &#123;<br><br><br>    <span class="hljs-keyword">public</span> GoodsResp <span class="hljs-title function_">sendGoods</span><span class="hljs-params">(</span><br><span class="hljs-params">            GoodsReq req</span><br><span class="hljs-params">    )</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;实物奖品发放成功: &quot;</span> + <span class="hljs-string">&quot;uid: &quot;</span> + req.uid() + <span class="hljs-string">&quot; address: &quot;</span> + req.address());<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">GoodsResp</span>(req.uid(), req.address(), req.phone(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">Goods</span>(<span class="hljs-string">&quot;abc&quot;</span>, <span class="hljs-string">&quot;一本书&quot;</span>));<br>    &#125;<br><br>&#125;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IQIYICardService</span> &#123;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">grantToken</span><span class="hljs-params">(String uid, String bindMobileNumber)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;模拟发放爱奇艺会员卡一张：&quot;</span> + bindMobileNumber + <span class="hljs-string">&quot;，&quot;</span> + <span class="hljs-keyword">new</span> <span class="hljs-title class_">IQIYICard</span>(<span class="hljs-string">&quot;0x3f3f3f3f&quot;</span>));<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ICommodity</span> &#123;<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendCommodity</span><span class="hljs-params">(Map&lt;String, String&gt; param)</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CouponCommodityImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ICommodity</span> &#123;<br><br>    <span class="hljs-type">CouponService</span> <span class="hljs-variable">couponService</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CouponService</span>();<br><br>    <span class="hljs-type">Logger</span> <span class="hljs-variable">logger</span> <span class="hljs-operator">=</span> LoggerFactory.getLogger(CouponCommodityImpl.class);<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendCommodity</span><span class="hljs-params">(Map&lt;String, String&gt; param)</span> &#123;<br>        <span class="hljs-type">Coupon</span> <span class="hljs-variable">coupon</span> <span class="hljs-operator">=</span> couponService.sendCoupon(param.get(<span class="hljs-string">&quot;uid&quot;</span>), param.get(<span class="hljs-string">&quot;couponId&quot;</span>), param.get(<span class="hljs-string">&quot;uuid&quot;</span>));<br>        logger.info(<span class="hljs-string">&quot;优惠券发放成功: &#123;&#125;: &#123;&#125;&quot;</span>, coupon.cardId(), coupon.info());<br>    &#125;<br>&#125;<br><br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GoodsCommodityImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ICommodity</span> &#123;<br><br>    <span class="hljs-type">Logger</span> <span class="hljs-variable">logger</span> <span class="hljs-operator">=</span> LoggerFactory.getLogger(GoodsCommodityImpl.class);<br><br>    <span class="hljs-type">GoodsService</span> <span class="hljs-variable">goodsService</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">GoodsService</span>();<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendCommodity</span><span class="hljs-params">(Map&lt;String, String&gt; param)</span> &#123;<br>        <span class="hljs-type">GoodsResp</span> <span class="hljs-variable">goodsResp</span> <span class="hljs-operator">=</span> goodsService.sendGoods(JSON.parseObject(param.get(<span class="hljs-string">&quot;goodsReq&quot;</span>), GoodsReq.class));<br>        logger.info(<span class="hljs-string">&quot;实物发放成功, &#123;&#125;: &#123;&#125; :&#123;&#125;&quot;</span>, goodsResp.uid(), goodsResp.goods(), goodsResp.address());<br>    &#125;<br>&#125;<br><br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OtherCommodityImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ICommodity</span> &#123;<br><br><br>    <span class="hljs-type">IQIYICardService</span> <span class="hljs-variable">iqiyiCardService</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IQIYICardService</span>();<br><br>    <span class="hljs-type">Logger</span> <span class="hljs-variable">logger</span> <span class="hljs-operator">=</span> LoggerFactory.getLogger(OtherCommodityImpl.class);<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendCommodity</span><span class="hljs-params">(Map&lt;String, String&gt; param)</span> &#123;<br>        iqiyiCardService.grantToken(param.get(<span class="hljs-string">&quot;uid&quot;</span>), param.get(<span class="hljs-string">&quot;bindMobileNumber&quot;</span>));<br>        logger.info(<span class="hljs-string">&quot;发送爱奇艺月卡成功&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StoreFactory</span> &#123;<br><br>    GoodsCommodityImpl goodsCommodity;<br>    CouponCommodityImpl couponCommodity;<br><br>    OtherCommodityImpl otherCommodity;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">StoreFactory</span><span class="hljs-params">()</span> &#123;<br>        goodsCommodity = <span class="hljs-keyword">new</span> <span class="hljs-title class_">GoodsCommodityImpl</span>();<br>        couponCommodity = <span class="hljs-keyword">new</span> <span class="hljs-title class_">CouponCommodityImpl</span>();<br>        otherCommodity = <span class="hljs-keyword">new</span> <span class="hljs-title class_">OtherCommodityImpl</span>();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> ICommodity <span class="hljs-title function_">getCommodity</span><span class="hljs-params">(Integer commodityType)</span> <span class="hljs-keyword">throws</span> IllegalAccessException &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> == commodityType) <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">if</span> (commodityType.equals(<span class="hljs-number">1</span>)) <span class="hljs-keyword">return</span> goodsCommodity;<br>        <span class="hljs-keyword">if</span> (commodityType.equals(<span class="hljs-number">2</span>)) <span class="hljs-keyword">return</span> couponCommodity;<br>        <span class="hljs-keyword">if</span> (commodityType.equals(<span class="hljs-number">3</span>)) <span class="hljs-keyword">return</span> otherCommodity;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalAccessException</span>(<span class="hljs-string">&quot;错误的类型&quot;</span>);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FactoryTest</span> &#123;<br><br><br>    <span class="hljs-type">StoreFactory</span> <span class="hljs-variable">storeFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StoreFactory</span>();<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IllegalAccessException &#123;<br>        <span class="hljs-type">ICommodity</span> <span class="hljs-variable">commodity1</span> <span class="hljs-operator">=</span> storeFactory.getCommodity(<span class="hljs-number">1</span>);<br><br>        commodity1.sendCommodity(Map.of(<span class="hljs-string">&quot;goodsReq&quot;</span>, JSON.toJSONString(<span class="hljs-keyword">new</span> <span class="hljs-title class_">GoodsReq</span>(<span class="hljs-string">&quot;012&quot;</span>, <span class="hljs-string">&quot;陕西省咸阳市&quot;</span>, <span class="hljs-string">&quot;15229602304&quot;</span>))));<br><br>        <span class="hljs-type">ICommodity</span> <span class="hljs-variable">commodity2</span> <span class="hljs-operator">=</span> storeFactory.getCommodity(<span class="hljs-number">2</span>);<br><br>        commodity2.sendCommodity(Map.of(<span class="hljs-string">&quot;uid&quot;</span>, <span class="hljs-string">&quot;124&quot;</span>, <span class="hljs-string">&quot;couponId&quot;</span>, <span class="hljs-string">&quot;2344&quot;</span>, <span class="hljs-string">&quot;uuid&quot;</span>, <span class="hljs-string">&quot;sdfd23453&quot;</span>));<br><br>        <span class="hljs-type">ICommodity</span> <span class="hljs-variable">commodity3</span> <span class="hljs-operator">=</span> storeFactory.getCommodity(<span class="hljs-number">3</span>);<br><br>        commodity3.sendCommodity(Map.of(<span class="hljs-string">&quot;bindMobileNumber&quot;</span>, <span class="hljs-string">&quot;sdssfdff233&quot;</span>, <span class="hljs-string">&quot;uid&quot;</span>, <span class="hljs-string">&quot;4554&quot;</span>));<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>总结: 在工厂(方法)模式中，避免了创建者和产品逻辑的相互耦合，使用指定的工厂进行分配指定的实现，统一的入参，满足了单一职责，开闭原则。但也存在缺点，如果种类特别多的话就得需要很多类 。</p><h3 id="抽象工厂模式">抽象工厂模式</h3><blockquote><p>场景: 对于系统的主题有多种，但都遵循统一的实现，基于抽象工厂模式，动态的采用不同的工厂生产出不同的对象</p></blockquote><p>文件目录</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java">├─Theme<br>│  │  I.java<br>│  │  IAdapter.java<br>│  │  <span class="hljs-keyword">package</span>-info.java<br>│  │  T1.java<br>│  │  T2.java<br>│  │<br>│  ├─impl<br>│  │      Impl.java<br>│  │      T1Impl.java<br>│  │      T2Impl.java<br>│  │<br>│  └─proxy<br>│      ├─cglib<br>│      │      CGLIBMethodIntercept.java<br>│      │      CGLIBProxy.java<br>│      │<br>│      └─jdk<br>│              JDKInvocationHandler.java<br>│              JDKProxy.java<br>│<br>└─util<br>        ClassLoaderUtils.java<br></code></pre></td></tr></table></figure><p><code>I</code>、<code>Impl</code>作为系统的默认主题，<code>T1</code>、<code>T2</code>分别为两个自定义主题，其中的核心方法都是一样的，方法签名都是一样的，共有两个抽象工厂<code>jdk_proxy</code>和<code>cglib_proxy</code>都可以实现对象的创建，通过动态指定不同工厂生产同种类型的对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//默认主题实现</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">I</span> &#123;<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">f1</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">f2</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">f3</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">f4</span><span class="hljs-params">()</span>;<br><br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Impl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">I</span> &#123;<br><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">f1</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;ST f1&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">f2</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;ST f2&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">f3</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;ST f3&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">f4</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;ST f4&quot;</span>);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//两中的自定义主题</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">T1</span> &#123;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">f1T1</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;这是T1调色功能&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">f2T1</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;这是T1组件功能&quot;</span>);<br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">f3T1</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;这是T1放大功能&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">f4T1</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;这是T1缩小功能&quot;</span>);<br>    &#125;<br><br><br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">T2</span> &#123;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">f1T2</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;这是T2调色功能&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">f2T2</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;这是T2组件功能&quot;</span>);<br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">f3T2</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;这是T2放大功能&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">f4T2</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;这是T2缩小功能&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//通过适配器来适配默认的方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">IAdapter</span> &#123;<br><br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">f1</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">f2</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">f3</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">f4</span><span class="hljs-params">()</span>;<br><br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">T1Impl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IAdapter</span> &#123;<br><br>    <span class="hljs-type">T1</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">T1</span>();<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">f1</span><span class="hljs-params">()</span> &#123;<br>        t1.f1T1();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">f2</span><span class="hljs-params">()</span> &#123;<br>        t1.f2T1();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">f3</span><span class="hljs-params">()</span> &#123;<br>        t1.f3T1();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">f4</span><span class="hljs-params">()</span> &#123;<br>        t1.f4T1();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">T2Impl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IAdapter</span> &#123;<br><br><br>    <span class="hljs-type">T2</span> <span class="hljs-variable">t2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">T2</span>();<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">f1</span><span class="hljs-params">()</span> &#123;<br>        t2.f1T2();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">f2</span><span class="hljs-params">()</span> &#123;<br>        t2.f2T2();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">f3</span><span class="hljs-params">()</span> &#123;<br>        t2.f3T2();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">f4</span><span class="hljs-params">()</span> &#123;<br>        t2.f4T2();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//JDK_Proxy实现</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JDKInvocationHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">InvocationHandler</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> IAdapter iAdapter;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">JDKInvocationHandler</span><span class="hljs-params">(IAdapter iAdapter)</span> &#123;<br>        <span class="hljs-built_in">this</span>.iAdapter = iAdapter;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>        <span class="hljs-keyword">return</span> IAdapter.class.getMethod(method.getName(), ClassLoaderUtils.getClazzByArgs(args)).invoke(iAdapter, args);<br>    &#125;<br>&#125;<br><br><span class="hljs-meta">@SuppressWarnings(&quot;unchecked&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JDKProxy</span> &#123;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span>&lt;T&gt; T <span class="hljs-title function_">getProxy</span><span class="hljs-params">(Class&lt;T&gt; clazz, IAdapter adapter)</span> &#123;<br>        <span class="hljs-type">JDKInvocationHandler</span> <span class="hljs-variable">jdkInvocationHandler</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JDKInvocationHandler</span>(adapter);<br>        <span class="hljs-type">ClassLoader</span> <span class="hljs-variable">classLoader</span> <span class="hljs-operator">=</span> clazz.getClassLoader();<br>        <span class="hljs-keyword">return</span> (T) Proxy.newProxyInstance(classLoader, clazz.getInterfaces(), jdkInvocationHandler);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//cglib_proxy实现</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CGLIBMethodIntercept</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">MethodInterceptor</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> IAdapter adapter;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">CGLIBMethodIntercept</span><span class="hljs-params">(IAdapter adapter)</span> &#123;<br>        <span class="hljs-built_in">this</span>.adapter = adapter;<br>    &#125;<br><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">intercept</span><span class="hljs-params">(Object o, Method method, Object[] objects, MethodProxy methodProxy)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>        <span class="hljs-keyword">return</span> IAdapter.class.getMethod(method.getName(), ClassLoaderUtils.getClazzByArgs(objects)).invoke(adapter, objects);<br>    &#125;<br>&#125;<br><br><span class="hljs-meta">@SuppressWarnings(&quot;unchecked&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CGLIBProxy</span> &#123;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; T <span class="hljs-title function_">getProxy</span><span class="hljs-params">(Class&lt;T&gt; clazz, IAdapter adapter)</span> &#123;<br>        <span class="hljs-keyword">return</span> (T) Enhancer.create(clazz, <span class="hljs-keyword">new</span> <span class="hljs-title class_">CGLIBMethodIntercept</span>(adapter));<br>    &#125;<br><br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ClassLoaderUtils</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Set&lt;Class&gt; primitiveSet = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;Class&gt;();<br><br>    <span class="hljs-keyword">static</span> &#123;<br>        primitiveSet.add(Integer.class);<br>        primitiveSet.add(Long.class);<br>        primitiveSet.add(Float.class);<br>        primitiveSet.add(Byte.class);<br>        primitiveSet.add(Short.class);<br>        primitiveSet.add(Double.class);<br>        primitiveSet.add(Character.class);<br>        primitiveSet.add(Boolean.class);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 得到当前ClassLoader</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> ClassLoader</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ClassLoader <span class="hljs-title function_">getCurrentClassLoader</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">ClassLoader</span> <span class="hljs-variable">cl</span> <span class="hljs-operator">=</span> Thread.currentThread().getContextClassLoader();<br>        <span class="hljs-keyword">if</span> (cl == <span class="hljs-literal">null</span>) &#123;<br>            cl = ClassLoaderUtils.class.getClassLoader();<br>        &#125;<br>        <span class="hljs-keyword">return</span> cl == <span class="hljs-literal">null</span> ? ClassLoader.getSystemClassLoader() : cl;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 得到当前ClassLoader</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> clazz 某个类</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> ClassLoader</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ClassLoader <span class="hljs-title function_">getClassLoader</span><span class="hljs-params">(Class&lt;?&gt; clazz)</span> &#123;<br>        <span class="hljs-type">ClassLoader</span> <span class="hljs-variable">loader</span> <span class="hljs-operator">=</span> Thread.currentThread().getContextClassLoader();<br>        <span class="hljs-keyword">if</span> (loader != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> loader;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (clazz != <span class="hljs-literal">null</span>) &#123;<br>            loader = clazz.getClassLoader();<br>            <span class="hljs-keyword">if</span> (loader != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">return</span> loader;<br>            &#125;<br>            <span class="hljs-keyword">return</span> clazz.getClassLoader();<br>        &#125;<br>        <span class="hljs-keyword">return</span> ClassLoader.getSystemClassLoader();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据类名加载Class</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> className 类名</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> Class</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> ClassNotFoundException 找不到类</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Class <span class="hljs-title function_">forName</span><span class="hljs-params">(String className)</span><br>            <span class="hljs-keyword">throws</span> ClassNotFoundException &#123;<br>        <span class="hljs-keyword">return</span> forName(className, <span class="hljs-literal">true</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据类名加载Class</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> className  类名</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> initialize 是否初始化</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> Class</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> ClassNotFoundException 找不到类</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Class <span class="hljs-title function_">forName</span><span class="hljs-params">(String className, <span class="hljs-type">boolean</span> initialize)</span><br>            <span class="hljs-keyword">throws</span> ClassNotFoundException &#123;<br>        <span class="hljs-keyword">return</span> Class.forName(className, initialize, getCurrentClassLoader());<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据类名加载Class</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> className 类名</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> cl        Classloader</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> Class</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> ClassNotFoundException 找不到类</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Class <span class="hljs-title function_">forName</span><span class="hljs-params">(String className, ClassLoader cl)</span><br>            <span class="hljs-keyword">throws</span> ClassNotFoundException &#123;<br>        <span class="hljs-keyword">return</span> Class.forName(className, <span class="hljs-literal">true</span>, cl);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 实例化一个对象(只检测默认构造函数，其它不管）</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> clazz 对象类</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> &lt;T&gt;   对象具体类</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 对象实例</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Exception 没有找到方法，或者无法处理，或者初始化方法异常等</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; T <span class="hljs-title function_">newInstance</span><span class="hljs-params">(Class&lt;T&gt; clazz)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">if</span> (primitiveSet.contains(clazz)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (clazz.isMemberClass() &amp;&amp; !Modifier.isStatic(clazz.getModifiers())) &#123;<br>            Constructor constructorList[] = clazz.getDeclaredConstructors();<br>            <span class="hljs-type">Constructor</span> <span class="hljs-variable">defaultConstructor</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>            <span class="hljs-keyword">for</span> (Constructor con : constructorList) &#123;<br>                <span class="hljs-keyword">if</span> (con.getParameterTypes().length == <span class="hljs-number">1</span>) &#123;<br>                    defaultConstructor = con;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (defaultConstructor != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">if</span> (defaultConstructor.isAccessible()) &#123;<br>                    <span class="hljs-keyword">return</span> (T) defaultConstructor.newInstance(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-literal">null</span>&#125;);<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-keyword">try</span> &#123;<br>                        defaultConstructor.setAccessible(<span class="hljs-literal">true</span>);<br>                        <span class="hljs-keyword">return</span> (T) defaultConstructor.newInstance(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-literal">null</span>&#125;);<br>                    &#125; <span class="hljs-keyword">finally</span> &#123;<br>                        defaultConstructor.setAccessible(<span class="hljs-literal">false</span>);<br>                    &#125;<br>                &#125;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Exception</span>(<span class="hljs-string">&quot;The &quot;</span> + clazz.getCanonicalName() + <span class="hljs-string">&quot; has no default constructor!&quot;</span>);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">return</span> clazz.newInstance();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            Constructor&lt;T&gt; constructor = clazz.getDeclaredConstructor();<br>            <span class="hljs-keyword">if</span> (constructor.isAccessible()) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Exception</span>(<span class="hljs-string">&quot;The &quot;</span> + clazz.getCanonicalName() + <span class="hljs-string">&quot; has no default constructor!&quot;</span>, e);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    constructor.setAccessible(<span class="hljs-literal">true</span>);<br>                    <span class="hljs-keyword">return</span> constructor.newInstance();<br>                &#125; <span class="hljs-keyword">finally</span> &#123;<br>                    constructor.setAccessible(<span class="hljs-literal">false</span>);<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Class&lt;?&gt;[] getClazzByArgs(Object[] args) &#123;<br>        <span class="hljs-keyword">if</span> (args == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[<span class="hljs-number">0</span>];<br>        Class&lt;?&gt;[] parameterTypes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[args.length];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; args.length; i++) &#123;<br>            <span class="hljs-keyword">if</span> (args[i] <span class="hljs-keyword">instanceof</span> ArrayList) &#123;<br>                parameterTypes[i] = List.class;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (args[i] <span class="hljs-keyword">instanceof</span> LinkedList) &#123;<br>                parameterTypes[i] = List.class;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (args[i] <span class="hljs-keyword">instanceof</span> HashMap) &#123;<br>                parameterTypes[i] = Map.class;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (args[i] <span class="hljs-keyword">instanceof</span> Long) &#123;<br>                parameterTypes[i] = <span class="hljs-type">long</span>.class;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (args[i] <span class="hljs-keyword">instanceof</span> Double) &#123;<br>                parameterTypes[i] = <span class="hljs-type">double</span>.class;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (args[i] <span class="hljs-keyword">instanceof</span> TimeUnit) &#123;<br>                parameterTypes[i] = TimeUnit.class;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            parameterTypes[i] = args[i].getClass();<br>        &#125;<br>        <span class="hljs-keyword">return</span> parameterTypes;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Method <span class="hljs-title function_">getMethod</span><span class="hljs-params">(Class&lt;?&gt; classType, String methodName, Class&lt;?&gt;... parameterTypes)</span> <span class="hljs-keyword">throws</span> NoSuchMethodException &#123;<br>        <span class="hljs-keyword">return</span> classType.getMethod(methodName, parameterTypes);<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>总结: 抽象工厂和工厂方法的本质都是为了创建对象，两者本质上的区别在于一个是直接创建对象，一个是先创建工厂再创建对象，抽象工厂的更灵活一点，科以动态指定不同的工厂，两者还有一点不同的就是工厂方法可以创建类型完全不一样的对象，而抽象工厂更适合创建同类型的对象。</p><h3 id="建造者模式">建造者模式</h3><blockquote><p>场景: 在点餐时通过不同的菜品组成不同的套餐，可以使用建造者模式使得代码更加整洁，对于新增套餐省去if else</p></blockquote><p>文件目录</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java">food<br>    │  Builder.java<br>    │  IMenu.java<br>    │  Matter.java<br>    │  Pack.java<br>    │  <br>    ├─beverage<br>    │      Noodles.java<br>    │      Rice.java<br>    │      <br>    ├─dishes<br>    │      ColdDish.java<br>    │      HotDish.java<br>    │      <br>    └─staplefood<br>            CocaCola.java<br>            PepsiCola.java<br></code></pre></td></tr></table></figure><p>食品总共有<code>beverage</code>、<code>dishes</code>、<code>staplefood</code>三种类型，都是基于食品的规范<code>Matter</code>来实现的，基于不同的组合可以实现不同级别的套餐，定义<code>IMenu</code>接口采取返回原类这种格式，通过<code>Pack</code>来实现，在<code>Builder</code>里面定义不同的级别的组合方式，最后只需要在<code>Builder</code>里面选取所需要的级别即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Matter</span> &#123;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 类型</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> String</span><br><span class="hljs-comment">     */</span><br>    String <span class="hljs-title function_">scene</span><span class="hljs-params">()</span>;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 品牌</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> String</span><br><span class="hljs-comment">     */</span><br>    String <span class="hljs-title function_">brand</span><span class="hljs-params">()</span>;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 价格</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> BigDecimal</span><br><span class="hljs-comment">     */</span><br>    BigDecimal <span class="hljs-title function_">price</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 描述</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> String</span><br><span class="hljs-comment">     */</span><br>    String <span class="hljs-title function_">desc</span><span class="hljs-params">()</span>;<br><br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Noodles</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Matter</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">scene</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;主食&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">brand</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;香雪&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> BigDecimal <span class="hljs-title function_">price</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> BigDecimal.valueOf(<span class="hljs-number">54.9</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">desc</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;普通面条&quot;</span>;<br>    &#125;<br>&#125;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Rice</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Matter</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">scene</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;主食&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">brand</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;金龙鱼&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> BigDecimal <span class="hljs-title function_">price</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> BigDecimal.valueOf(<span class="hljs-number">55.3</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">desc</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;普通的金龙鱼大米&quot;</span>;<br>    &#125;<br>&#125;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ColdDish</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Matter</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">scene</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;菜品&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">brand</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;一级&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> BigDecimal <span class="hljs-title function_">price</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> BigDecimal.valueOf(<span class="hljs-number">15.8</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">desc</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;一级凉菜，挺好吃&quot;</span>;<br>    &#125;<br>&#125;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HotDish</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Matter</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">scene</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;菜品&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">brand</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;一级&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> BigDecimal <span class="hljs-title function_">price</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> BigDecimal.valueOf(<span class="hljs-number">9.6</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">desc</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;普通热菜&quot;</span>;<br>    &#125;<br>&#125;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CocaCola</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Matter</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">scene</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;饮料&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">brand</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;可口可乐&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> BigDecimal <span class="hljs-title function_">price</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> BigDecimal.valueOf(<span class="hljs-number">3</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">desc</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;可口可乐中瓶&quot;</span>;<br>    &#125;<br>&#125;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PepsiCola</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Matter</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">scene</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;饮料&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">brand</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;百事可乐&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> BigDecimal <span class="hljs-title function_">price</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> BigDecimal.valueOf(<span class="hljs-number">3</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">desc</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;百事可乐中瓶&quot;</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">IMenu</span> &#123;<br><br>    IMenu <span class="hljs-title function_">appendBeverage</span><span class="hljs-params">(Matter beverage)</span>;<br><br><br><br>    IMenu <span class="hljs-title function_">appendDishes</span><span class="hljs-params">(Matter dishes)</span>;<br><br><br>    IMenu <span class="hljs-title function_">appendStapleFood</span><span class="hljs-params">(Matter stapleFood)</span>;<br><br><br>    String <span class="hljs-title function_">ofDetail</span><span class="hljs-params">()</span>;<br><br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Pack</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IMenu</span> &#123;<br><br><br>    <span class="hljs-keyword">private</span> List&lt;Matter&gt; lists = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">BigDecimal</span> <span class="hljs-variable">price</span> <span class="hljs-operator">=</span> BigDecimal.ZERO;<br><br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">copies</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Pack</span><span class="hljs-params">(<span class="hljs-type">int</span> copies)</span> &#123;<br>        <span class="hljs-built_in">this</span>.copies = copies;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Pack</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> IMenu <span class="hljs-title function_">appendBeverage</span><span class="hljs-params">(Matter beverage)</span> &#123;<br>        lists.add(beverage);<br>        price = price.add(beverage.price());<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> IMenu <span class="hljs-title function_">appendDishes</span><span class="hljs-params">(Matter dishes)</span> &#123;<br>        lists.add(dishes);<br>        price = price.add(dishes.price());<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> IMenu <span class="hljs-title function_">appendStapleFood</span><span class="hljs-params">(Matter stapleFood)</span> &#123;<br>        lists.add(stapleFood);<br>        price = price.add(stapleFood.price());<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">ofDetail</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">StringJoiner</span> <span class="hljs-variable">sj</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringJoiner</span>(<span class="hljs-string">&quot;[&quot;</span>, <span class="hljs-string">&quot; &quot;</span>, <span class="hljs-string">&quot;]&quot;</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> e : lists) sj.add(e.desc());<br>        sj.add(<span class="hljs-string">&quot;price&quot;</span>).add(String.valueOf(price.doubleValue() * copies));<br>        <span class="hljs-keyword">return</span> sj.toString();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Builder</span> &#123;<br><br><br><br><br><br><br>    <span class="hljs-keyword">public</span> IMenu <span class="hljs-title function_">levelOne</span><span class="hljs-params">(<span class="hljs-type">int</span> copies)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Pack</span>(copies)<br>                .appendBeverage(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Rice</span>())<br>                .appendDishes(<span class="hljs-keyword">new</span> <span class="hljs-title class_">HotDish</span>())<br>                .appendStapleFood(<span class="hljs-keyword">new</span> <span class="hljs-title class_">CocaCola</span>());<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> IMenu <span class="hljs-title function_">levelOne</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Pack</span>()<br>                .appendBeverage(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Rice</span>())<br>                .appendDishes(<span class="hljs-keyword">new</span> <span class="hljs-title class_">HotDish</span>())<br>                .appendStapleFood(<span class="hljs-keyword">new</span> <span class="hljs-title class_">CocaCola</span>());<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> IMenu <span class="hljs-title function_">levelTwo</span><span class="hljs-params">(<span class="hljs-type">int</span> copies)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Pack</span>(copies)<br>                .appendBeverage(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Noodles</span>())<br>                .appendDishes(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ColdDish</span>())<br>                .appendStapleFood(<span class="hljs-keyword">new</span> <span class="hljs-title class_">PepsiCola</span>());<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> IMenu <span class="hljs-title function_">levelTwo</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Pack</span>()<br>                .appendBeverage(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Noodles</span>())<br>                .appendDishes(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ColdDish</span>())<br>                .appendStapleFood(<span class="hljs-keyword">new</span> <span class="hljs-title class_">PepsiCola</span>());<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>总结: 建造者模式适合于通过一些<code>不变</code>的小对象<code>组合</code>成不同种类的大对象的需求，建造者模式的最大优点就是易于扩展，在需要扩展时只需要添加少量代码，而不需要修改原先的代码。</p><h3 id="原型模式">原型模式</h3><blockquote><p>原型模式用于(重复)对象的创建，往往基于Java的clone实现，在此谈谈Java的克隆</p></blockquote><p>目录</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">─normal<br>        E1.java<br>        E2.java<br>        E3.java<br>        Immutable.java<br>        R.java<br></code></pre></td></tr></table></figure><p>原型模式主要是用于解决对象的克隆，通常不常用，在此介绍Java如何克隆一个对象。</p><p>浅拷贝：对于基本类型而言，复制了一个新的值，对于引用类型而言，复制了地址。</p><p>深拷贝：对于任意类型而言都实现了完全复制。</p><p>Java实现深拷贝的方式有两种，一种是利用JDK自带的Clone实现，另一种是让对象经过两次IO。</p><p>基于Clone实现，首先确保要实现<code>Cloneable</code>接口，重写clone方法，值得注意的是<code>clone</code>方法是<code>Object</code>类中的本地方法，对于包含引用类型的对象而言需要层层克隆，并且这些引用类都需要实现<code>Cloneable</code>接口显然对于一个对象内层层包含多个引用对象时这种方式是不可取的，但是它的效率并不低。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//  引用类型R类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">R</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Cloneable</span>, Serializable &#123;<br><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> R <span class="hljs-title function_">clone</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> CloneNotSupportedException &#123;<br>        <span class="hljs-keyword">return</span> (R) <span class="hljs-built_in">super</span>.clone();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//  基于JDK的clone实现深拷贝</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">E1</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Cloneable</span>&#123;<br><br>    <span class="hljs-keyword">public</span> String name;<br>    R obj;<br><br>    <span class="hljs-type">int</span> v;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">E1</span><span class="hljs-params">(R _obj, String _name, <span class="hljs-type">int</span> _v)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = _name;<br>        <span class="hljs-built_in">this</span>.v = _v;<br>        <span class="hljs-built_in">this</span>.obj = _obj;<br>    &#125;<br><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> E1 <span class="hljs-title function_">clone</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> CloneNotSupportedException &#123;<br>        <span class="hljs-type">E1</span> <span class="hljs-variable">ret</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        ret = (E1) <span class="hljs-built_in">super</span>.clone();<br>        ret.obj = ret.obj.clone();<br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;E&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, obj=&quot;</span> + obj +<br>                <span class="hljs-string">&quot;, v=&quot;</span> + v +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>另一种方式就是基于先读后写的方式，这种只需要保证所有的实现<code>Serializable</code>接口即可，然后将对象进行两次序列化即可。这样复制出来的对象比上面复制出的更’干净’。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">E2</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> R obj;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> String name;<br><br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> k;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">E2</span><span class="hljs-params">(R _obj, String _name, <span class="hljs-type">int</span> _k)</span> &#123;<br>        <span class="hljs-built_in">this</span>.obj = _obj;<br>        <span class="hljs-built_in">this</span>.name = _name;<br>        <span class="hljs-built_in">this</span>.k = _k;<br>    &#125;<br><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;E2&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;obj=&quot;</span> + obj +<br>                <span class="hljs-string">&quot;, name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, k=&quot;</span> + k +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> E2 <span class="hljs-title function_">cloneBySerializable</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>        <span class="hljs-keyword">try</span> (<br>                <span class="hljs-type">var</span> <span class="hljs-variable">buf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>                <span class="hljs-type">var</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(buf)<br>        ) &#123;<br>            oos.writeObject(<span class="hljs-built_in">this</span>);<br>            <span class="hljs-keyword">try</span> (<br>                    <span class="hljs-type">var</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(buf.toByteArray()))<br>                    ) &#123;<br>                <span class="hljs-keyword">return</span> (E2) in.readObject();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>至于我为什么说更’干净’呢?这就得提起<code>E1</code>和<code>E2</code>中都有的<code>String</code>了，<code>String</code>作为JDK自带的类，并没有实现<code>Cloneable</code>接口，那么它在深拷贝的时候，原对象和复制后的对象的<code>String</code>对象应该是同一个，事实证明确实如此，但这不就违背了深拷贝的定义了吗?但是<code>String</code>它是一个特殊的类，被成为<code>不可变类</code>，不可变类就是一个类创建对象后这个对象中的属性值不在发生改变，当需要改变时都需要返回新的对象，这样想的话，不可变类的特性似乎刚好满足我们对对象复制的要求。而且还省事，所以有必要时可以考虑将类设为不可变类，但是不可变类会反复创建对象，也是有偿有失。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br><br><br>    <span class="hljs-meta">@org</span>.junit.Test<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test0</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> CloneNotSupportedException &#123;<br>        <span class="hljs-type">E1</span> <span class="hljs-variable">e</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">E1</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">R</span>(), <span class="hljs-string">&quot;huya&quot;</span>, <span class="hljs-number">123</span>);<br>        <span class="hljs-type">long</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>        <span class="hljs-type">E1</span> <span class="hljs-variable">clone</span> <span class="hljs-operator">=</span> e.clone();<br>        <span class="hljs-type">long</span> <span class="hljs-variable">t2</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>        System.out.println(t2 - t1);  <span class="hljs-comment">//时间性能优越</span><br>        System.out.println(e);<br>        System.out.println(clone);<br>        System.out.println(e.name == clone.name); <span class="hljs-comment">//输出true</span><br><br>    &#125;<br><br>    <span class="hljs-meta">@org</span>.junit.Test<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test1</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>        <span class="hljs-type">E2</span> <span class="hljs-variable">e</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">E2</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">R</span>(), <span class="hljs-string">&quot;huya&quot;</span>, <span class="hljs-number">123</span>);<br>        <span class="hljs-type">long</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>        <span class="hljs-type">E2</span> <span class="hljs-variable">clone</span> <span class="hljs-operator">=</span> e.cloneBySerializable();<br>        <span class="hljs-type">long</span> <span class="hljs-variable">t2</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>        System.out.println(t2 - t1);<br>        System.out.println(e);<br>        System.out.println(clone);<br>        System.out.println(e.name == clone.name); <span class="hljs-comment">//输出false</span><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="单例模式">单例模式</h3><p>单例模式主要是用于解决对象的复用性，有饿汉和懒汉模式，主要就是一下7种</p><p>目录</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java">type<br>    ├─hungry<br>    │      <span class="hljs-keyword">package</span>-info.java<br>    │      S1.java<br>    │      <br>    └─lazy<br>            <span class="hljs-keyword">package</span>-info.java<br>            S2.java<br>            S3.java<br>            S4.java<br>            S5.java<br>            S6.java<br>            S7.java<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 饿汉,线程安全, 此种类型也可以不要获取实例方法</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">S1</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">S1</span> <span class="hljs-variable">INSTANCE</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">S1</span>();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> S1 <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> INSTANCE;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 懒汉式线程不安全</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">S2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">volatile</span> S2 s2;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> S2 <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (s2 == <span class="hljs-literal">null</span>) s2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">S2</span>();<br>        <span class="hljs-keyword">return</span> s2;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 线程安全，但效率太低</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">S3</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> S3 s3;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">static</span> S3 <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (s3 == <span class="hljs-literal">null</span>) s3 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">S3</span>();<br>        <span class="hljs-keyword">return</span> s3;<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 效率较高且安全的懒汉式</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">S4</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">volatile</span> S4 s4;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> S4 <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (s4 != <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> s4;<br>        <span class="hljs-keyword">synchronized</span> (S4.class) &#123;<br>            <span class="hljs-keyword">if</span> (s4 != <span class="hljs-literal">null</span>) &#123;<br>                s4 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">S4</span>();<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> s4;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 线程安全，无锁，懒汉,比较推荐</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">S5</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">S5Holder</span> &#123;<br>        <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">S5</span> <span class="hljs-variable">s5</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">S5</span>();<br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> S5 <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> S5Holder.s5;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 懒汉，使用Atomic,乐观锁</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">S6</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> AtomicReference&lt;S6&gt; INSTANCE = <span class="hljs-keyword">new</span> <span class="hljs-title class_">AtomicReference</span>&lt;&gt;();<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> S6 <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">S6</span> <span class="hljs-variable">s6</span> <span class="hljs-operator">=</span> INSTANCE.get();<br>        <span class="hljs-keyword">if</span> (s6 != <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> s6;<br>        INSTANCE.compareAndSet(<span class="hljs-literal">null</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">S6</span>());<br>        <span class="hljs-keyword">return</span> INSTANCE.get();<br>    &#125;<br><br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 简洁高效,但用处不多，无法实现继承</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">S7</span> &#123;<br><br><br>    S_7;<br><br>    <span class="hljs-keyword">public</span> S7 <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> S_7;<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>单例模式根据情况选取合适的即可，这几种单例，在功能上的实现都是一致的。</p><h3 id="适配器模式">适配器模式</h3><p>适配器模式，显然易见就是为了适配某种东西的，例如电源适配器，将220V的电压适配到电子设备适合的电压，适配器模式的使用范围还是非常广的，在很多地方都能看见，在之前的设计模式中也有体现。通常都是将方法签名或方法参数进行适配。</p><p>目录</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java">├─action<br>│  │  Ac1.java<br>│  │  Ac2.java<br>│  │  IAdapter.java<br>│  │  <span class="hljs-keyword">package</span>-info.java<br>│  │<br>│  └─impl<br>│          Ac1Impl.java<br>│          Ac2Impl.java<br>│<br>└─parameter<br>    │  <span class="hljs-keyword">package</span>-info.java<br>    │  ParameterAdapter.java<br>    │<br>    └─e<br>            M.java<br>            M1.java<br>            M2.java<br></code></pre></td></tr></table></figure><p>在进行方法签名的适配时，采用将字段进行一一对应，并将初始对象进行序列化，最后在进行反序列化的到参数即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">M</span> &#123;<br><br><br>    String userId;<br><br>    String orderId;<br><br><br>    Date date;<br><br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getUserId</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> userId;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setUserId</span><span class="hljs-params">(String userId)</span> &#123;<br>        <span class="hljs-built_in">this</span>.userId = userId;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getOrderId</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> orderId;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setOrderId</span><span class="hljs-params">(String orderId)</span> &#123;<br>        <span class="hljs-built_in">this</span>.orderId = orderId;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Date <span class="hljs-title function_">getDate</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> date;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setDate</span><span class="hljs-params">(String dateStr)</span> <span class="hljs-keyword">throws</span> ParseException &#123;<br>        <span class="hljs-type">SimpleDateFormat</span> <span class="hljs-variable">dateFormat</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss.SSS&quot;</span>, Locale.ENGLISH);<br>        <span class="hljs-built_in">this</span>.date = dateFormat.parse(dateStr);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;M&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;userId=&#x27;&quot;</span> + userId + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, orderId=&#x27;&quot;</span> + orderId + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, date=&quot;</span> + date +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">record</span> <span class="hljs-title class_">M1</span><span class="hljs-params">(</span><br><span class="hljs-params"></span><br><span class="hljs-params">        String orderId,</span><br><span class="hljs-params"></span><br><span class="hljs-params"></span><br><span class="hljs-params">        String uid,</span><br><span class="hljs-params"></span><br><span class="hljs-params"></span><br><span class="hljs-params">        LocalDateTime date</span><br><span class="hljs-params"></span><br><span class="hljs-params">)</span> &#123;<br><br>&#125;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">record</span> <span class="hljs-title class_">M2</span><span class="hljs-params">(</span><br><span class="hljs-params">        String skuId,</span><br><span class="hljs-params"></span><br><span class="hljs-params"></span><br><span class="hljs-params">        String userId,</span><br><span class="hljs-params"></span><br><span class="hljs-params"></span><br><span class="hljs-params">        Date date</span><br><span class="hljs-params">)</span> &#123;<br><br><br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ParameterAdapter</span> &#123;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> M <span class="hljs-title function_">adapter</span><span class="hljs-params">(String jsonStr, Map&lt;String, String&gt; keyValue)</span> <span class="hljs-keyword">throws</span> InvocationTargetException, NoSuchMethodException, IllegalAccessException &#123;<br>        Map&lt;?, ?&gt; map = JSON.parseObject(jsonStr, Map.class);<br>        <span class="hljs-keyword">return</span> adapter(map, keyValue);<br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> M <span class="hljs-title function_">adapter</span><span class="hljs-params">(Map&lt;?, ?&gt; obj, Map&lt;String, String&gt; keyValue)</span> <span class="hljs-keyword">throws</span> NoSuchMethodException, InvocationTargetException, IllegalAccessException &#123;<br>        <span class="hljs-type">M</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">M</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> e : keyValue.entrySet()) &#123;<br>            <span class="hljs-type">var</span> <span class="hljs-variable">val</span> <span class="hljs-operator">=</span> obj.get(e.getKey());<br>            <span class="hljs-type">String</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> e.getValue();<br>            <span class="hljs-type">String</span> <span class="hljs-variable">methodName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;set&quot;</span> + value.substring(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>).toUpperCase() + value.substring(<span class="hljs-number">1</span>);<br>            M.class.getMethod(methodName, String.class).invoke(m, val.toString());<br>        &#125;<br>        <span class="hljs-keyword">return</span> m;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>在进行行为适配时，采用中间加一个接口的方式，使得不同的实现有同一个接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Ac1</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">helloMethod</span><span class="hljs-params">(String hello, String world)</span> &#123;<br>        System.out.println(hello + <span class="hljs-string">&quot; &quot;</span> + world);<br>    &#125;<br><br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Ac2</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">methodHello</span><span class="hljs-params">(String hello, String world)</span> &#123;<br>        System.out.println(world + <span class="hljs-string">&quot; &quot;</span> + hello);<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">IAdapter</span> &#123;<br><br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">hello</span><span class="hljs-params">(String hello, String world)</span>;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Ac1Impl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IAdapter</span> &#123;<br><br>    <span class="hljs-type">Ac1</span> <span class="hljs-variable">ac1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Ac1</span>();<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">hello</span><span class="hljs-params">(String hello, String world)</span> &#123;<br>        ac1.helloMethod(hello, world);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Ac2Impl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IAdapter</span> &#123;<br><br>    <span class="hljs-type">Ac2</span> <span class="hljs-variable">ac2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Ac2</span>();<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">hello</span><span class="hljs-params">(String hello, String world)</span> &#123;<br>        ac2.methodHello(hello, world);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="桥接模式">桥接模式</h3><p>当我们需要将多种功能进行组合或者笛卡尔积时，使用桥接模式是一种不错的选择，例如将微信支付和支付宝支付，加上指纹、面容支付时，此处使用桥接模式实现。</p><p>目录</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java">F:.<br>└─pay<br>    │  IPayMode.java<br>    │  Pay.java<br>    │  WxPay.java<br>    │  ZfbPay.java<br>    │  <br>    └─impl<br>            CyPayMode.java<br>            FacePayMode.java<br>            FingerPayMode.java<br><br></code></pre></td></tr></table></figure><p>使用<code>PayMode</code>接口来定义多种校验方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">IPayMode</span> &#123;<br><br><br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">checkSecurity</span><span class="hljs-params">(String uid)</span>;<br><br>&#125;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CyPayMode</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IPayMode</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">checkSecurity</span><span class="hljs-params">(String uid)</span> &#123;<br>        <span class="hljs-comment">//  业务逻辑</span><br>        System.out.println(<span class="hljs-string">&quot;密码校验&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br><br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FacePayMode</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IPayMode</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">checkSecurity</span><span class="hljs-params">(String uid)</span> &#123;<br>        <span class="hljs-comment">//业务逻辑</span><br>        System.out.println(<span class="hljs-string">&quot;面容校验&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FingerPayMode</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IPayMode</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">checkSecurity</span><span class="hljs-params">(String uid)</span> &#123;<br>        <span class="hljs-comment">//业务逻辑</span><br>        System.out.println(<span class="hljs-string">&quot;指纹校验&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>定义<code>Pay</code>抽象类，并定义<code>PayMode</code>成员变量，在其基类进行创建时就指定好<code>PayMode</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Pay</span> &#123;<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">logger</span> <span class="hljs-operator">=</span> LoggerFactory.getLogger(Pay.class);<br>    <span class="hljs-keyword">protected</span> IPayMode payMode;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Pay</span><span class="hljs-params">(IPayMode payMode)</span> &#123;<br>        <span class="hljs-built_in">this</span>.payMode = payMode;<br>    &#125;<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">abstract</span> String <span class="hljs-title function_">trade</span><span class="hljs-params">(String uid, String tradeId, BigDecimal amount)</span>;<br><br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WxPay</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Pay</span>&#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">WxPay</span><span class="hljs-params">(IPayMode payMode)</span> &#123;<br>        <span class="hljs-built_in">super</span>(payMode);<br>    &#125;<br><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">trade</span><span class="hljs-params">(String uid, String tradeId, BigDecimal amount)</span> &#123;<br><br>        logger.info(<span class="hljs-string">&quot;模拟微信渠道支付划账开始。uId：&#123;&#125; tradeId：&#123;&#125; amount：&#123;&#125;&quot;</span>, uid, tradeId, amount);<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">isSecurity</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.payMode.checkSecurity(uid);<br>        logger.info(<span class="hljs-string">&quot;校验成功， 成功支付&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;0x00000000000&quot;</span>;<br>    &#125;<br>&#125;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ZfbPay</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Pay</span>&#123;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ZfbPay</span><span class="hljs-params">(IPayMode payMode)</span> &#123;<br>        <span class="hljs-built_in">super</span>(payMode);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">trade</span><span class="hljs-params">(String uid, String tradeId, BigDecimal amount)</span> &#123;<br>        logger.info(<span class="hljs-string">&quot;模拟支付宝渠道支付划账开始。uId：&#123;&#125; tradeId：&#123;&#125; amount：&#123;&#125;&quot;</span>, uid, tradeId, amount);<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">isSecurity</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.payMode.checkSecurity(uid);<br>        logger.info(<span class="hljs-string">&quot;校验成功， 成功支付&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;0x00000000000&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>桥接模式可以很方便的实现多种模式之间的组合，使用桥接模式满足开闭原则和单一职责原则。</p><h3 id="组合模式">组合模式</h3><p>实现决策树来体现组合模式，在对特定人群进行量化时，可以采取决策树来进行筛选、决策。</p><p>实现树的创建，分别是<code>TreeRoot</code>、<code>TreeNode</code>、<code>TreeLink</code>，分别代表树根、节点、树链，树根本身就是一个树节点，树节点又分为普通节点和叶子节点，普通节点上没有值，只有叶子节点上有，节点之间通过树链进行连接，节点上存有限制类型，链上存有比较类型，和比较值，通过这样构成一颗决策树，来将不同用户筛选进不同值。</p><p>目录</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java">│  Strategy.java<br>│<br>├─aggregation<br>│      TreeRich.java<br>│<br>├─engine<br>│  │  BaseEngine.java<br>│  │  Engine.java<br>│  │  EngineConfig.java<br>│  │<br>│  └─impl<br>│          TreeEngine.java<br>│<br>├─logic<br>│  │  BaseFilter.java<br>│  │  Filter.java<br>│  │<br>│  └─impl<br>│          UserAgeFilter.java<br>│          UserGenderFilter.java<br>│<br>├─res<br>│      R.java<br>│<br>└─tree<br>        TreeLink.java<br>        TreeNode.java<br>        TreeRoot.java<br>        TreeType.java<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//tree的构建</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TreeRoot</span> &#123;<br><br>    String treeId;<br><br><br>    String desc;<br><br><br>    String treeName;<br><br>    String treeRootId;<br><br>&#125;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TreeNode</span> &#123;<br><br><br>    String rootId;<br><br>    String treeId;<br><br><br>    TreeType treeType;<br><br><br>    String val;<br><br>    List&lt;TreeLink&gt; links;<br><br>    Strategy strategy;<br><br>&#125;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TreeLink</span> &#123;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">StrategyType</span> &#123;<br>        EQ,<br><br>        GT,<br><br>        LT<br>    &#125;<br><br>    String treeRootId;<br><br><br>    String fromTreeId;<br><br><br>    String toTreeId;<br><br>    String limitVal;<br><br>    StrategyType strategyType;<br><br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">TreeType</span> &#123;<br><br>    NORMAL,<br><br>    LEAF<br><br>&#125;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">Strategy</span> &#123;<br><br><br>    AGE,<br><br>    GENDER<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//入参组合</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TreeRich</span> &#123;<br><br><br>    <span class="hljs-meta">@Data</span><br>    <span class="hljs-meta">@NoArgsConstructor</span><br>    <span class="hljs-meta">@AllArgsConstructor</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>        String userId;<br><br>        String userName;<br><br>        String age;<br><br>        String gender;<br>    &#125;<br><br>    TreeRoot root;<br><br><br>    Map&lt;String, TreeNode&gt; map;<br><br>    User user;<br><br>&#125;<br><br><span class="hljs-comment">//出参</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">record</span> <span class="hljs-title class_">R</span><span class="hljs-params">(</span><br><span class="hljs-params">        String userId,</span><br><span class="hljs-params">        String val</span><br><span class="hljs-params">)</span> &#123;<br><br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//Filter实现</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Filter</span> &#123;<br><br><br>    String <span class="hljs-title function_">filter</span><span class="hljs-params">(String realVal, List&lt;TreeLink&gt; links)</span>;<br><br><br><br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">judge</span><span class="hljs-params">(String realVal, TreeLink.StrategyType strategyType, String limitVal)</span>;<br><br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BaseFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Filter</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">filter</span><span class="hljs-params">(String realVal, List&lt;TreeLink&gt; links)</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> link : links) &#123;<br>            <span class="hljs-keyword">if</span> (judge(realVal, link.getStrategyType(), link.getLimitVal())) <span class="hljs-keyword">return</span> link.getToTreeId();<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;-1&quot;</span>;<br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> String <span class="hljs-title function_">getRealVal</span><span class="hljs-params">(TreeRich.User user)</span>;<br><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">judge</span><span class="hljs-params">(String realVal, TreeLink.StrategyType strategyType, String limitVal)</span> &#123;<br>        <span class="hljs-keyword">switch</span> (strategyType) &#123;<br>            <span class="hljs-keyword">case</span> EQ -&gt; &#123;<br>                <span class="hljs-keyword">return</span> realVal.equals(limitVal);<br>            &#125;<br>            <span class="hljs-keyword">case</span> GT -&gt; &#123;<br>                <span class="hljs-keyword">return</span> Double.parseDouble(realVal) &gt;= Double.parseDouble(limitVal);<br>            &#125;<br>            <span class="hljs-keyword">case</span> LT -&gt; &#123;<br>                <span class="hljs-keyword">return</span> Double.parseDouble(realVal) &lt;= Double.parseDouble(limitVal);<br>            &#125;<br>            <span class="hljs-keyword">default</span> -&gt; &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserAgeFilter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseFilter</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getRealVal</span><span class="hljs-params">(TreeRich.User user)</span> &#123;<br>        <span class="hljs-keyword">return</span> user.getAge();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserGenderFilter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseFilter</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getRealVal</span><span class="hljs-params">(TreeRich.User user)</span> &#123;<br>        <span class="hljs-keyword">return</span> user.getGender();<br>    &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//engine实现</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Engine</span> &#123;<br><br><br>    R <span class="hljs-title function_">process</span><span class="hljs-params">(TreeRich treeRich)</span>;<br><br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EngineConfig</span> &#123;<br><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> ConcurrentHashMap&lt;Strategy, BaseFilter&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcurrentHashMap</span>&lt;&gt;();<br><br><br><br>    <span class="hljs-keyword">static</span> &#123;<br>        map.put(Strategy.AGE, <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserAgeFilter</span>());<br>        map.put(Strategy.GENDER, <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserGenderFilter</span>());<br>    &#125;<br><br><br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BaseEngine</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">EngineConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Engine</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">logger</span> <span class="hljs-operator">=</span> LoggerFactory.getLogger(BaseEngine.class);<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> R <span class="hljs-title function_">process</span><span class="hljs-params">(TreeRich treeRich)</span>;<br><br><br>    <span class="hljs-keyword">public</span> TreeNode <span class="hljs-title function_">doProcess</span><span class="hljs-params">(TreeRich treeRich)</span> &#123;<br>        <span class="hljs-type">TreeRoot</span> <span class="hljs-variable">root</span> <span class="hljs-operator">=</span> treeRich.getRoot();<br>        TreeRich.<span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> treeRich.getUser();<br>        Map&lt;String, TreeNode&gt; treeNodeMap = treeRich.getMap();<br>        <span class="hljs-type">TreeNode</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> treeNodeMap.get(root.getTreeId());<br>        <span class="hljs-keyword">while</span> (node.getTreeType().equals(TreeType.NORMAL)) &#123;<br>            logger.info(<span class="hljs-string">&quot;决策到节点&#123;&#125;&quot;</span>, node);<br>            <span class="hljs-type">BaseFilter</span> <span class="hljs-variable">filter</span> <span class="hljs-operator">=</span> map.get(node.getStrategy());<br>            <span class="hljs-type">String</span> <span class="hljs-variable">realVal</span> <span class="hljs-operator">=</span> filter.getRealVal(user);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">nextTreeId</span> <span class="hljs-operator">=</span> filter.filter(realVal, node.getLinks());<br>            <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;-1&quot;</span>.equals(nextTreeId)) <span class="hljs-keyword">break</span>;<br>            node = treeNodeMap.get(nextTreeId);<br>        &#125;<br>        <span class="hljs-keyword">return</span> node;<br>    &#125;<br><br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TreeEngine</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseEngine</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> R <span class="hljs-title function_">process</span><span class="hljs-params">(TreeRich treeRich)</span> &#123;<br>        <span class="hljs-type">TreeNode</span> <span class="hljs-variable">treeNode</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.doProcess(treeRich);<br>        <span class="hljs-keyword">if</span> (treeNode.getTreeType() != TreeType.LEAF) <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">R</span>(treeRich.getUser().getUserId(), <span class="hljs-string">&quot;未能匹配结果&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">R</span>(treeRich.getUser().getUserId(), treeNode.getVal());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>决策树的实现可以将复杂的判断交给内部进行实现，外部调用时依然是比较方便，体现了开闭原则，当有新的决策时只需要更换一颗新的决策树即可，此决策树的实现数据库存储也可以这样实现。</p><h3 id="装饰器模式">装饰器模式</h3><p>装饰器模式主要是用于解决对某一个类进行补充或者增强，而非通过直接继承实现，通过创建一个抽象的装饰器类，即可非常简单的实现对类的扩充及其增强。这里以<code>SpringMVC</code>中的拦截器为例，对拦截器实现增强。</p><p>目录</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java">│  Main.java<br>│<br>└─controller<br>    │  MainConfig.java<br>    │  MainController.java<br>    │<br>    ├─decorator<br>    │      InterceptorDecorator.java<br>    │<br>    └─interceptor<br>            MainEnhanceInterceptor.java<br>            MainInterceptor.java<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//基类的拦截器</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MainInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HandlerInterceptor</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">preHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">return</span> request.getHeader(<span class="hljs-string">&quot;A&quot;</span>).equals(<span class="hljs-string">&quot;a&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//装饰器</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InterceptorDecorator</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HandlerInterceptor</span> &#123;<br><br>    <span class="hljs-keyword">protected</span> HandlerInterceptor handlerInterceptor; <span class="hljs-comment">//将其给构建进来</span><br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-title function_">InterceptorDecorator</span><span class="hljs-params">(HandlerInterceptor handlerInterceptor)</span> &#123;<br>        <span class="hljs-built_in">this</span>.handlerInterceptor = handlerInterceptor;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">preHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.handlerInterceptor.preHandle(request, response, handler);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//增强实现</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MainEnhanceInterceptor</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">InterceptorDecorator</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MainEnhanceInterceptor</span><span class="hljs-params">(HandlerInterceptor handlerInterceptor)</span> &#123;<br>        <span class="hljs-built_in">super</span>(handlerInterceptor);<br>    &#125;<br><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">preHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">handle</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">super</span>.preHandle(request, response, handler);<br>        <span class="hljs-keyword">if</span> (!handle) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">return</span> request.getHeader(<span class="hljs-string">&quot;B&quot;</span>).equals(<span class="hljs-string">&quot;b&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="门面模式">门面模式</h3><p>门面模式通常用于处理对外部提供统一的<code>api</code>之类，像<code>springboot</code>自定义<code>starter</code>就是一种门面模式的体现。</p><p>目录</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><code class="hljs java">│  pom.xml<br>│  <br>├─app<br>│  │  pom.xml<br>│  │  <br>│  ├─src<br>│  │  ├─main<br>│  │  │  ├─java<br>│  │  │  │  └─app<br>│  │  │  │      │  Main.java<br>│  │  │  │      │  <br>│  │  │  │      ├─controller<br>│  │  │  │      │      MainController.java<br>│  │  │  │      │      <br>│  │  │  │      └─entity<br>│  │  │  │              Res.java<br>│  │  │  │              <br>│  │  │  └─resources<br>│  │  │          application.properties<br>│  │  │          <br>│  │  └─test<br>│  │      └─java<br>│  └─target<br>│      ├─classes<br>│      │  │  application.properties<br>│      │  │  <br>│      │  └─app<br>│      │      │  Main.class<br>│      │      │<br>│      │      ├─controller<br>│      │      │      MainController.class<br>│      │      │<br>│      │      └─entity<br>│      │              Res.class<br>│      │<br>│      └─generated-sources<br>│          └─annotations<br>└─share<br>    │  pom.xml<br>    │<br>    ├─src<br>    │  ├─main<br>    │  │  ├─java<br>    │  │  │  ├─annotation<br>    │  │  │  │      AInterceptor.java<br>    │  │  │  │<br>    │  │  │  ├─aop<br>    │  │  │  │      Asp.java<br>    │  │  │  │<br>    │  │  │  └─config<br>    │  │  │          Config.java<br>    │  │  │          ConfigProperties.java<br>    │  │  │          ConfigService.java<br>    │  │  │<br>    │  │  └─resources<br>    │  │      └─META-INF<br>    │  │          └─spring<br>    │  │                  org.springframework.boot.autoconfigure.AutoConfiguration.imports<br>    │  │<br>    │  └─test<br>    │      └─java<br>    └─target<br>        │  share-<span class="hljs-number">2.7</span><span class="hljs-number">.5</span>.jar<br>        │<br>        ├─classes<br>        │  ├─annotation<br>        │  │      AInterceptor.class<br>        │  │<br>        │  ├─aop<br>        │  │      Asp.class<br>        │  │<br>        │  ├─config<br>        │  │      Config.class<br>        │  │      ConfigProperties.class<br>        │  │      ConfigService.class<br>        │  │<br>        │  └─META-INF<br>        │      │  spring-configuration-metadata.json<br>        │      │<br>        │      └─spring<br>        │              org.springframework.boot.autoconfigure.AutoConfiguration.imports<br>        │<br>        ├─generated-sources<br>        │  └─annotations<br>        ├─generated-test-sources<br>        │  └─test-annotations<br>        ├─maven-archiver<br>        │      pom.properties<br>        │<br>        ├─maven-status<br>        │  └─maven-compiler-plugin<br>        │      ├─compile<br>        │      │  └─<span class="hljs-keyword">default</span>-compile<br>        │      │          createdFiles.lst<br>        │      │          inputFiles.lst<br>        │      │<br>        │      └─testCompile<br>        │          └─<span class="hljs-keyword">default</span>-testCompile<br>        │                  createdFiles.lst<br>        │                  inputFiles.lst<br>        │<br>        └─test-classes<br></code></pre></td></tr></table></figure><p>通过<code>springboot</code>自定义<code>share</code>starter(命名不规范)，内部通过<code>aop</code>实现参数验证,将包装好的工程交给<code>app</code>来测试。在自定义starter时需要注意将这个跳过。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;plugins&gt;<br>            &lt;plugin&gt;<br>                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;<br>                &lt;configuration&gt;<br>                    &lt;skip&gt;<span class="hljs-literal">true</span>&lt;/skip&gt;<br>                &lt;/configuration&gt;<br>            &lt;/plugin&gt;<br>    &lt;/plugins&gt;<br></code></pre></td></tr></table></figure><p>代码细节就是<code>aop</code>的使用，均在项目中详细写出。</p><h3 id="享元模式">享元模式</h3><p>享元模式在平常的开发中还是很常遇见的，通常为了节约对象资源，将对象中不变的属性保存起来，每次只对对象变得部分进行更改，<code>redis</code>的使用就是享元模式的体现。</p><p>目录</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">├─dy<br>│      RedisUtil.java<br>│<br>├─im<br>│      QueryFactory.java<br>│<br>└─re<br>        Shop.java<br></code></pre></td></tr></table></figure><p><code>QueryFactory</code>是来缓存对象中不变的属性，<code>RedisUtil</code>用于保存对象动态变化的部分，在查询时两者结合就可以查询出完整的对象，大大节约了内存消耗，以及时间消耗。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RedisUtil</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">ScheduledExecutorService</span> <span class="hljs-variable">executorService</span> <span class="hljs-operator">=</span> Executors.newScheduledThreadPool(<span class="hljs-number">1</span>);<br><br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">AtomicInteger</span> <span class="hljs-variable">stock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AtomicInteger</span>();<br><br>    <span class="hljs-keyword">static</span> &#123;<br>        executorService.scheduleAtFixedRate(() -&gt; &#123;<br>            stock.addAndGet(<span class="hljs-number">1</span>);<br>        &#125;, <span class="hljs-number">0</span>, <span class="hljs-number">100000</span>, TimeUnit.MICROSECONDS);<br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Integer <span class="hljs-title function_">getStock</span><span class="hljs-params">(Integer id)</span> &#123;<br>        <span class="hljs-keyword">return</span> stock.get();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">QueryFactory</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> ConcurrentHashMap&lt;Integer, Shop&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcurrentHashMap</span>&lt;&gt;();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Shop <span class="hljs-title function_">get</span><span class="hljs-params">(Integer id)</span> &#123;<br>        <span class="hljs-keyword">if</span> (map.containsKey(id)) <span class="hljs-keyword">return</span> map.get(id);<br>        <span class="hljs-type">Shop</span> <span class="hljs-variable">shop</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Shop</span>(id, <span class="hljs-string">&quot;xx&quot;</span>, <span class="hljs-literal">null</span>);<br>        map.put(id, shop);<br>        <span class="hljs-keyword">return</span> shop;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Shop</span> &#123;<br><br>    Integer id;<br><br><br>    String name;<br><br><br>    Integer stock;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>在有大量重复对象时，使用享元模式可以节约不少的空间，但是当动态变得多的时候，享元工厂就得好好设计下了，避免对象的构建变得太复杂。</p><h3 id="代理模式">代理模式</h3><p>代理模式主要是用于一个程序(框架)对于使用者的易用性而服务的，在很多框架，组件中都有使用，Java中最常见的代理就是JDK代理和CGLIB代理，JDK代理只能代理接口，CGLIB代理可以代理接口和类。本次模拟MyBatis中使用接口就可以实现SQL语句的操作。</p><p>创建注解<code>Select</code>和接口<code>UserMapper</code>,并通过Spring配置文件的方式将<code>MyBeanDefinitionRegistryPostProcessor</code>注入为Bean,再通过实现<code>BeanDefinitionRegistryPostProcessor</code>接口的<code>postProcessBeanDefinitionRegistry</code>重新配置创建的Bean,将其配置为<code>UserMapper</code>代理，并在代理类中实现对于<code>Select</code>注解的匹配。代理的实现可以使用JDK或CGLIB。</p><p>目录</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java">├─java<br>│  ├─annotation<br>│  │      Select.java<br>│  │      <br>│  ├─factory<br>│  │      MapperFactoryBean.java<br>│  │      <br>│  ├─handler<br>│  │  │  MyBeanDefinitionRegistryPostProcessor.java<br>│  │  │  <br>│  │  ├─cglib<br>│  │  │      CGLIBInvocationHandler.java<br>│  │  │      <br>│  │  └─jdk<br>│  │          JDKInvocationHandler.java<br>│  │          <br>│  └─mapper<br>│          UserMapper.java<br>│          <br>└─resources<br>        spring-config.xml<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">default-autowire</span>=<span class="hljs-string">&quot;byName&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userMapper&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;handler.MyBeanDefinitionRegistryPostProcessor&quot;</span>/&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserMapper</span> &#123;<br><br><br>    <span class="hljs-meta">@Select(&quot;&quot;&quot;</span><br><span class="hljs-meta">            select ...</span><br><span class="hljs-meta">            &quot;&quot;&quot;)</span><br>    String <span class="hljs-title function_">selectUserInfo</span><span class="hljs-params">(String userId)</span>;<br><br>&#125;<br>            <span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@Target(ElementType.METHOD)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> Select &#123;<br><br>    String <span class="hljs-title function_">value</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyBeanDefinitionRegistryPostProcessor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BeanDefinitionRegistryPostProcessor</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">postProcessBeanDefinitionRegistry</span><span class="hljs-params">(BeanDefinitionRegistry beanDefinitionRegistry)</span> <span class="hljs-keyword">throws</span> BeansException &#123;<br>        <span class="hljs-comment">//在bean创建前可以对其操作(增删改查)</span><br>        <span class="hljs-type">var</span> <span class="hljs-variable">beanDefinition</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RootBeanDefinition</span>();<br>        beanDefinition.setBeanClass(MapperFactoryBean.class);<br>        beanDefinition.setScope(<span class="hljs-string">&quot;singleton&quot;</span>);<br>        <span class="hljs-type">var</span> <span class="hljs-variable">values</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MutablePropertyValues</span>();<br>        values.add(<span class="hljs-string">&quot;interfaceClass&quot;</span>, UserMapper.class);<br>        beanDefinition.setPropertyValues(values);<br>        beanDefinitionRegistry.registerBeanDefinition(<span class="hljs-string">&quot;userMapper&quot;</span>, beanDefinition);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">postProcessBeanFactory</span><span class="hljs-params">(ConfigurableListableBeanFactory configurableListableBeanFactory)</span> <span class="hljs-keyword">throws</span> BeansException &#123;<br>        <span class="hljs-comment">// do not anything</span><br>    &#125;<br>&#125;<br><span class="hljs-meta">@SuppressWarnings(&quot;unchecked&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MapperFactoryBean</span>&lt;T&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">FactoryBean</span>&lt;T&gt; &#123;<br><br>    Class&lt;T&gt; interfaceClass;<br><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> T <span class="hljs-title function_">getObject</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><span class="hljs-comment">//         return (T) Proxy.newProxyInstance(Thread.currentThread().getContextClassLoader(), new Class[] &#123;interfaceClass&#125;, new JDKInvocationHandler());</span><br>        <span class="hljs-keyword">return</span> (T) Proxy.newProxyInstance(Thread.currentThread().getContextClassLoader(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[] &#123;interfaceClass&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">CGLIBInvocationHandler</span>());<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Class&lt;?&gt; getObjectType() &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isSingleton</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setInterfaceClass</span><span class="hljs-params">(Class&lt;T&gt; interfaceClass)</span> &#123;<br>        <span class="hljs-built_in">this</span>.interfaceClass = interfaceClass;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//代理实现</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CGLIBInvocationHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">InvocationHandler</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(Object o, Method method, Object[] objects)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>        <span class="hljs-type">Select</span> <span class="hljs-variable">annotation</span> <span class="hljs-operator">=</span> method.getAnnotation(Select.class);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> annotation.value();<br>        <span class="hljs-keyword">return</span> value + objects[<span class="hljs-number">0</span>];<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JDKInvocationHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">InvocationHandler</span> &#123;<br><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>        <span class="hljs-type">Select</span> <span class="hljs-variable">annotation</span> <span class="hljs-operator">=</span> method.getAnnotation(Select.class);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> annotation.value();<br>        <span class="hljs-keyword">return</span> value + args[<span class="hljs-number">0</span>];<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>代理模式可以使得代码变得简洁，使用代理模式可以很轻松的扩展我们的业务逻辑，代理模式+门面模式经常在中间件开发中使用。</p><h3 id="责任链模式">责任链模式</h3><p>当某一个程序需要经历很多层计算或者是某个业务需要很多层审批的时候，使用责任链模式可以使代码变得简洁，易懂，这里模拟一道题目需要层层计算得到最终答案的流程。</p><p>目录</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">├─algorithm<br>│      Algorithm.java<br>│<br>├─impl<br>│      Alogrithm1.java<br>│      Alogrithm2.java<br>│      Alogrithm3.java<br>│<br>└─res<br>        R.java<br></code></pre></td></tr></table></figure><p>定义核心算法抽象类<code>Algorithm</code>,并在其中创建算法链，当每创建一个算法的时候就将该算法放置在链中，定义抽象方法<code>calculate</code>,基于实现类实现具体的算法细节，每次计算后都返回答案和是否需要进行下一轮计算。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Algorithm</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> List&lt;Algorithm&gt; chain = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">static</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">logger</span> <span class="hljs-operator">=</span> LoggerFactory.getLogger(Algorithm.class);<br><br>    String name;<br><br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Algorithm</span><span class="hljs-params">(String _name)</span> &#123;<br>        name = _name;<br>        chain.add(<span class="hljs-built_in">this</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.name;&#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> R <span class="hljs-title function_">calculate</span><span class="hljs-params">(String question)</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> R <span class="hljs-title function_">doCalculate</span><span class="hljs-params">(String question)</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> e : chain) &#123;<br>            <span class="hljs-type">R</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> e.calculate(question);<br>            <span class="hljs-keyword">if</span> (res.haveNext()) question = res.answer();<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> res;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">R</span>(<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">buildAlgorithmChain</span><span class="hljs-params">(Algorithm ... algorithms)</span> &#123;<br>        chain.addAll(Arrays.asList(algorithms));<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Alogrithm1</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Algorithm</span> &#123;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Alogrithm1</span><span class="hljs-params">(String _name)</span> &#123;<br>        <span class="hljs-built_in">super</span>(_name);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> R <span class="hljs-title function_">calculate</span><span class="hljs-params">(String question)</span> &#123;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">condition</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>        logger.info(<span class="hljs-string">&quot;执行&quot;</span> + getName() + <span class="hljs-string">&quot;算法成功&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">R</span>(<span class="hljs-string">&quot;执行&quot;</span> + getName() + <span class="hljs-string">&quot;算法成功&quot;</span>, question + <span class="hljs-string">&quot;*&quot;</span>, condition);<br>    &#125;<br>&#125;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Alogrithm2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Algorithm</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Alogrithm2</span><span class="hljs-params">(String _name)</span> &#123;<br>        <span class="hljs-built_in">super</span>(_name);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> R <span class="hljs-title function_">calculate</span><span class="hljs-params">(String question)</span> &#123;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">condition</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br>        logger.info(<span class="hljs-string">&quot;执行&quot;</span> + getName() + <span class="hljs-string">&quot;算法成功&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">R</span>(<span class="hljs-string">&quot;执行&quot;</span> + getName() + <span class="hljs-string">&quot;算法成功&quot;</span>, question + <span class="hljs-string">&quot;*&quot;</span>, condition);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Alogrithm3</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Algorithm</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Alogrithm3</span><span class="hljs-params">(String _name)</span> &#123;<br>        <span class="hljs-built_in">super</span>(_name);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> R <span class="hljs-title function_">calculate</span><span class="hljs-params">(String question)</span> &#123;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">condition</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br>        logger.info(<span class="hljs-string">&quot;执行&quot;</span> + getName() + <span class="hljs-string">&quot;算法成功&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">R</span>(<span class="hljs-string">&quot;执行&quot;</span> + getName() + <span class="hljs-string">&quot;算法成功&quot;</span>, question + <span class="hljs-string">&quot;*&quot;</span>, condition);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>责任链模式体现了单一职责和开闭原则，我们只需要定义出需要哪些层，而不需要懂得这些层具体细节，在外部调用的时候极大缩减了上手难度。</p><h3 id="命令模式">命令模式</h3><p>命令模式的核心大致有两点，一个就是将参数以对象的形式进行传递，另一个就是将命令，执行者，调用者分开，调用者只需创建对象，统一化下达命令，其余有执行者进行实现。本次模拟开灯和关灯的操作使用命令模式实现。</p><p>目录</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">com<br>    └─cm<br>        │  ICommand.java<br>        │  Invoker.java<br>        │  Light.java<br>        │<br>        └─impl<br>                TurnOffCommand.java<br>                TurnOnCommand.java<br><br></code></pre></td></tr></table></figure><p>定义<code>Light</code>类，里面实现开灯和关灯的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Light</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">turnOn</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;开灯&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">turnOff</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;关灯&quot;</span>);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>定义统一命令接口，并实现开灯和关灯的操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ICommand</span> &#123;<br><br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">execute</span><span class="hljs-params">()</span>;<br><br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TurnOffCommand</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ICommand</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Light light;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">TurnOffCommand</span><span class="hljs-params">(Light light)</span> &#123;<br>        <span class="hljs-built_in">this</span>.light = light;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">execute</span><span class="hljs-params">()</span> &#123;<br>        light.turnOff();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TurnOnCommand</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ICommand</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Light light;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">TurnOnCommand</span><span class="hljs-params">(Light light)</span> &#123;<br>        <span class="hljs-built_in">this</span>.light = light;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">execute</span><span class="hljs-params">()</span> &#123;<br>        light.turnOn();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>实现<code>Invoker</code>类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Invoker</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Runnable action;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Invoker</span><span class="hljs-params">(Runnable action)</span> &#123;<br>        <span class="hljs-built_in">this</span>.action = action;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">invoke</span><span class="hljs-params">()</span> &#123;<br>        action.run();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>通过命令模式可以很好的将各层进行分开，互不干涉，需要其他的命令只需添加即可，无需改动当前的代码，体现了开闭原则和单一职责。</p><h3 id="迭代器模式">迭代器模式</h3><p>迭代器模式在Java的集合体系中使用的相当广泛，每一个数据结构都实现了迭代功能，迭代器模式可以自定义遍历的方式，外部只需要要遍历无需关心遍历的细节。这里手撕一个堆来举例。</p><p>目录</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">MyHeap.java<br></code></pre></td></tr></table></figure><p>Java本身就提供了迭代的接口<code>Iterable</code>,只需实现这个并重写里面的<code>iterator</code>方法即可，<code>iterator</code>方法返回的是一个<code>Iterator</code>对象，进而创建<code>Iterator</code>，实现里面的<code>hasNext</code>和<code>next</code>即可。关于堆的实现不做阐述，属于算法内容。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Comparator;<br><span class="hljs-keyword">import</span> java.util.Iterator;<br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 堆是一个完全二叉树</span><br><span class="hljs-comment"> * 小根堆的最小为根</span><br><span class="hljs-comment"> * 大根堆的最大为根</span><br><span class="hljs-comment"> * 存储: 使用一个数组来存, 1号点为根, 左儿子为2x,右儿子为2x+1</span><br><span class="hljs-comment"> * 两个基本操作: down(x), up(x)</span><br><span class="hljs-comment"> * 删除的时候有技巧: 用最后一个元素覆盖第一个元素, 然后删除最后一个元素</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyHeap</span>&lt;T&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Iterable</span>&lt;T&gt;&#123;<br><br><br>    <span class="hljs-keyword">private</span> Comparator&lt;? <span class="hljs-built_in">super</span> T&gt; comparator;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> T[] array;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> size;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> sum;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyHeap</span><span class="hljs-params">(<span class="hljs-type">int</span> initSize, Comparator&lt;T&gt; comparator)</span> &#123;<br>        <span class="hljs-built_in">this</span>.comparator = comparator;<br>        array = (T[]) <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[initSize + <span class="hljs-number">1</span>];<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyHeap</span><span class="hljs-params">(<span class="hljs-type">int</span> maxSize)</span> &#123;<br>        array = (T[]) <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[maxSize + <span class="hljs-number">1</span>];<br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> maxSize 最大容量</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> heapifyArray 需要被heapify的数组</span><br><span class="hljs-comment">     * 时间复杂度O(n)</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyHeap</span><span class="hljs-params">(<span class="hljs-type">int</span> maxSize, T[] heapifyArray)</span> &#123;<br>        array = (T[]) <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[maxSize + <span class="hljs-number">1</span>];<br>        System.arraycopy(heapifyArray, <span class="hljs-number">1</span>, array, <span class="hljs-number">1</span>, heapifyArray.length - <span class="hljs-number">1</span>);<br>        size = heapifyArray.length;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> heapifyArray.length / <span class="hljs-number">2</span>; i &gt;= <span class="hljs-number">1</span>; i--) down(i);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(T a, T b)</span> &#123;<br>        <span class="hljs-keyword">if</span> (comparator != <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> comparator.compare(a, b);<br>        <span class="hljs-keyword">if</span> (a <span class="hljs-keyword">instanceof</span> Comparable&lt;?&gt;) <span class="hljs-keyword">return</span> ((Comparable&lt;? <span class="hljs-built_in">super</span> T&gt;) a).compareTo(b);<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnsupportedOperationException</span>(<span class="hljs-string">&quot;必须有一个比较规则&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 核心算法: 向下调整</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> u 从此节点开始down</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">down</span><span class="hljs-params">(<span class="hljs-type">int</span> u)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> u;<br>        <span class="hljs-keyword">if</span> (u * <span class="hljs-number">2</span> &lt;= size &amp;&amp; compare(array[u * <span class="hljs-number">2</span>], array[u]) &lt; <span class="hljs-number">0</span>) t = u * <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">if</span> (u * <span class="hljs-number">2</span> + <span class="hljs-number">1</span> &lt;= size &amp;&amp; compare(array[u * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>], array[t]) &lt; <span class="hljs-number">0</span>) t = u * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (u != t) &#123;<br>            swap(u, t);<br>            down(t);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 核心算法: 向上调整</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> u 从此节点开始up</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">up</span><span class="hljs-params">(<span class="hljs-type">int</span> u)</span> &#123;<br>        <span class="hljs-keyword">while</span> (u / <span class="hljs-number">2</span> &gt; <span class="hljs-number">0</span> &amp;&amp; compare(array[u / <span class="hljs-number">2</span>], array[u]) &gt; <span class="hljs-number">0</span>) &#123;<br>            swap(u, u / <span class="hljs-number">2</span>);<br>            u /= <span class="hljs-number">2</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">swap</span><span class="hljs-params">(<span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j)</span> &#123;<br>        <span class="hljs-type">T</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> array[i];<br>        array[i] = array[j];<br>        array[j] = temp;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> T <span class="hljs-title function_">poll</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (size == <span class="hljs-number">0</span>) <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalStateException</span>(<span class="hljs-string">&quot;堆是空的!&quot;</span>);<br>        <span class="hljs-type">T</span> <span class="hljs-variable">ret</span> <span class="hljs-operator">=</span> array[<span class="hljs-number">1</span>];<br>        array[<span class="hljs-number">1</span>] = array[size];<br>        size--;<br>        down(<span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">if</span> (ret <span class="hljs-keyword">instanceof</span> Integer av) &#123;<br>            sum -= av;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(T v)</span> &#123;<br>        <span class="hljs-keyword">if</span> (size == array.length -<span class="hljs-number">1</span>) <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalStateException</span>(<span class="hljs-string">&quot;堆满了!&quot;</span>);<br>        size++;<br>        array[size] = v;<br>        up(size);<br>        <span class="hljs-keyword">if</span> (v <span class="hljs-keyword">instanceof</span> Integer av) &#123;<br>            sum += av;<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isEmpty</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> size == <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> T <span class="hljs-title function_">peek</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> array[<span class="hljs-number">1</span>];<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">size</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> size;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getSum</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> sum;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Iterator&lt;T&gt; <span class="hljs-title function_">iterator</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Iterator</span>&lt;T&gt;() &#123;<br><br>            <span class="hljs-type">int</span> <span class="hljs-variable">it</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">hasNext</span><span class="hljs-params">()</span> &#123;<br>                <span class="hljs-keyword">return</span> it &lt;= size();<br>            &#125;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> T <span class="hljs-title function_">next</span><span class="hljs-params">()</span> &#123;<br>                <span class="hljs-keyword">if</span> (!hasNext()) <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalStateException</span>(<span class="hljs-string">&quot;已经到尾了&quot;</span>);<br>                <span class="hljs-keyword">return</span> array[it++];<br>            &#125;<br>        &#125;;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>通常情况下无需我们实现迭代器，但是在特殊情况下，根据业务需求还是可能用得到的。</p><h3 id="中介者模式">中介者模式</h3><p>中介者模式主要用于各个对象之间的解耦，当有多种多类的对象需要相互作用的时候，行为的关系将变得非常复杂，整个关系图会变得非常复杂，但是如果采用中介者模式进行优化的话，那么这个图将会变成一个星行图。</p><p>目录</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">├─lease<br>│      HouseLease.java<br>│      Lease.java<br>│      <br>├─mediator<br>│      HouseMediator.java<br>│      Mediator.java<br>│      <br>└─rent<br>        HouseRent.java<br>        Rent.java<br></code></pre></td></tr></table></figure><p>抽象出租者、卖家、买家三个角色，通过中介者来凑合它们。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Mediator</span> &#123;<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">static</span> Deque&lt;Rent&gt; rentQueue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayDeque</span>&lt;&gt;();<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">static</span> Deque&lt;Lease&gt; leaseQueue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayDeque</span>&lt;&gt;();<br><br><br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">trade</span><span class="hljs-params">(Lease lease)</span>;<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">trade</span><span class="hljs-params">(Rent rent)</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">buy</span><span class="hljs-params">(Rent rent)</span> &#123;<br>        rentQueue.add(rent);<br>        trade(rent);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sell</span><span class="hljs-params">(Lease lease)</span> &#123;<br>        leaseQueue.add(lease);<br>        trade(lease);<br>    &#125;<br>&#125;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Rent</span> &#123;<br><br><br>    <span class="hljs-keyword">protected</span> String name;<br><br>    <span class="hljs-keyword">protected</span> Long money;<br><br>    <span class="hljs-keyword">protected</span> Mediator mediator; <span class="hljs-comment">//miːdieɪtər/</span><br><br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-title function_">Rent</span><span class="hljs-params">(String name, Long money, Mediator mediator)</span> &#123;<br>        <span class="hljs-built_in">this</span>.money = money;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.mediator = mediator;<br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">rent</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Long <span class="hljs-title function_">getMoney</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> money;<br>    &#125;<br><br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Lease</span> &#123;<br><br>    <span class="hljs-keyword">protected</span> String name;<br><br>    <span class="hljs-keyword">protected</span> Long money;<br><br>    <span class="hljs-keyword">protected</span> Mediator mediator; <span class="hljs-comment">//miːdieɪtər/</span><br><br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-title function_">Lease</span><span class="hljs-params">(String name, Long money, Mediator mediator)</span> &#123;<br>        <span class="hljs-built_in">this</span>.money = money;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.mediator = mediator;<br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">lease</span><span class="hljs-params">()</span>;<br><br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Long <span class="hljs-title function_">getMoney</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> money;<br>    &#125;<br><br>&#125;<br><span class="hljs-comment">//这里后来想了想，感觉把角色抽象成一个抽象类，行为定义成接口似乎更好一点。</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HouseMediator</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Mediator</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">trade</span><span class="hljs-params">(Lease lease)</span> &#123;<br><br>        Iterator&lt;Rent&gt; iterator = Mediator.rentQueue.iterator();<br>        <span class="hljs-keyword">while</span> (iterator.hasNext()) &#123;<br>            <span class="hljs-type">var</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> iterator.next();<br>            <span class="hljs-keyword">if</span> (r.getName().equals(lease.getName()) &amp;&amp; r.getMoney() &gt;= lease.getMoney()) &#123;<br>                System.out.println(<span class="hljs-string">&quot;双方交易成功&quot;</span>);<br>                iterator.remove();<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;暂无买家&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">trade</span><span class="hljs-params">(Rent rent)</span> &#123;<br>        Iterator&lt;Lease&gt; iterator = Mediator.leaseQueue.iterator();<br>        <span class="hljs-keyword">while</span> (iterator.hasNext()) &#123;<br>            <span class="hljs-type">var</span> <span class="hljs-variable">l</span> <span class="hljs-operator">=</span> iterator.next();<br>            <span class="hljs-keyword">if</span> (l.getName().equals(rent.getName()) &amp;&amp; rent.getMoney() &gt;= l.getMoney()) &#123;<br>                System.out.println(<span class="hljs-string">&quot;双方交易成功&quot;</span>);<br>                iterator.remove();<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;暂无卖家&quot;</span>);<br>    &#125;<br>&#125;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HouseLease</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Lease</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">HouseLease</span><span class="hljs-params">(String name, Long money, Mediator mediator)</span> &#123;<br>        <span class="hljs-built_in">super</span>(name, money, mediator);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">lease</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">super</span>.mediator.sell(<span class="hljs-built_in">this</span>);<br>    &#125;<br><br><br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HouseRent</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Rent</span>&#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">HouseRent</span><span class="hljs-params">(String name, Long money, Mediator mediator)</span> &#123;<br>        <span class="hljs-built_in">super</span>(name, money, mediator);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">rent</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">super</span>.mediator.buy(<span class="hljs-built_in">this</span>);<br>    &#125;<br><br><br>&#125;<br></code></pre></td></tr></table></figure><p>在此案例中，出租房的中介者的行为就很明确，就是进行交易，无论是买家还是买家，它们只需要和中介者进行交流即可，无需构建复杂的关系图。</p><h3 id="观察者模式">观察者模式</h3><p>观察者模式又被称作发布订阅模式，当被观察者做出某种行为时，观察者也会做出一些行为，通知其他有关的对象。本案例模仿买票的时候，买完票一般都会有个短信通知。</p><p>目录</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">├─listener<br>│      Listener.java<br>│      ListenerManager.java<br>│      MessageListener.java<br>│<br>└─sell<br>        Sell.java<br>        SellImpl.java<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//定义监听事件具体内容</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Listener</span> &#123;<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">doEvent</span><span class="hljs-params">(Long userId)</span>;<br><br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MessageListener</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Listener</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doEvent</span><span class="hljs-params">(Long userId)</span> &#123;<br>        System.out.println(userId + <span class="hljs-string">&quot;成功购买了一张票， 发个短信通知下他&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//监听器的管理者，可以支持订阅，取消订阅，推送</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ListenerManager</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">EventType</span> &#123;<br><br>        MESSAGE<br><br>    &#125;<br><br>    Map&lt;Enum&lt;EventType&gt;, Listener&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">subscribe</span><span class="hljs-params">(Enum&lt;EventType&gt; eventTypeEnum, Listener listener)</span> &#123;<br>        map.put(eventTypeEnum, listener);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">unsubscribe</span><span class="hljs-params">(Enum&lt;EventType&gt; eventTypeEnum)</span> &#123;<br>        map.remove(eventTypeEnum);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">notify</span><span class="hljs-params">(Enum&lt;EventType&gt; eventTypeEnum, Long userId)</span> &#123;<br>        map.get(eventTypeEnum).doEvent(userId);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Sell</span> &#123;<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">sell</span><span class="hljs-params">(Long userId)</span>;<br><br>&#125;<br><span class="hljs-comment">//在卖票成功的时候发布通知</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SellImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Sell</span>&#123;<br><br>    ListenerManager manager;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">SellImpl</span><span class="hljs-params">()</span> &#123;<br>        manager = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListenerManager</span>();<br>        manager.subscribe(ListenerManager.EventType.MESSAGE, <span class="hljs-keyword">new</span> <span class="hljs-title class_">MessageListener</span>());<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sell</span><span class="hljs-params">(Long userId)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;成功卖票&quot;</span>);<br>        manager.notify(ListenerManager.EventType.MESSAGE, userId);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>通过观察者模式可以看出，当进行某一操作时，如果有需要和其关联的事件发生时，就能够通过简单的配置得以通知，并不需要写死代码。观察者模式在我们使用MQ时能够体现出。</p><h3 id="状态机模式">状态机模式</h3><p>状态机模式（State Pattern）是一种行为型设计模式，它允许一个对象在其内部状态改变时改变其行为。这种类型的设计模式属于状态模式的一种，它提供了一种方法来封装对象的状态变化以及转换的逻辑。状态机模式的核心思想是将一个复杂的问题分解为若干个状态，并将每个状态相关的行为封装在一个类的各个状态中。通过将行为与状态进行关联，状态机可以根据当前状态在运行时灵活地切换行为。本案例以一个活动的执行来举例。</p><p><img src="https://image.itbaima.cn/images/76/image-20240318154358890.png"></img></p><p>目录</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java">├─r<br>│      ActivityInfo.java<br>│      DefaultRefuseResult.java<br>│      Result.java<br>│      Status.java<br>│<br>├─service<br>│      ActivityService.java<br>│<br>└─state<br>    │  State.java<br>    │  StateMachine.java<br>    │<br>    └─impl<br>            CheckState.java<br>            CloseState.java<br>            DoingState.java<br>            EditingState.java<br>            OpenState.java<br>            PassState.java<br>            RefuseState.java<br></code></pre></td></tr></table></figure><p>定义基本信息，活动详情，返回对象，状态枚举。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ActivityInfo</span> &#123;<br><br>    <span class="hljs-keyword">private</span> String activityId;    <span class="hljs-comment">// 活动ID</span><br>    <span class="hljs-keyword">private</span> String activityName;  <span class="hljs-comment">// 活动名称</span><br>    <span class="hljs-keyword">private</span> Enum&lt;Status&gt; status;  <span class="hljs-comment">// 活动状态</span><br>    <span class="hljs-keyword">private</span> Date beginTime;       <span class="hljs-comment">// 开始时间</span><br>    <span class="hljs-keyword">private</span> Date endTime;         <span class="hljs-comment">// 结束时间</span><br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getActivityId</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> activityId;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setActivityId</span><span class="hljs-params">(String activityId)</span> &#123;<br>        <span class="hljs-built_in">this</span>.activityId = activityId;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getActivityName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> activityName;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setActivityName</span><span class="hljs-params">(String activityName)</span> &#123;<br>        <span class="hljs-built_in">this</span>.activityName = activityName;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Enum&lt;Status&gt; <span class="hljs-title function_">getStatus</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> status;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setStatus</span><span class="hljs-params">(Enum&lt;Status&gt; status)</span> &#123;<br>        <span class="hljs-built_in">this</span>.status = status;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Date <span class="hljs-title function_">getBeginTime</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> beginTime;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setBeginTime</span><span class="hljs-params">(Date beginTime)</span> &#123;<br>        <span class="hljs-built_in">this</span>.beginTime = beginTime;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Date <span class="hljs-title function_">getEndTime</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> endTime;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setEndTime</span><span class="hljs-params">(Date endTime)</span> &#123;<br>        <span class="hljs-built_in">this</span>.endTime = endTime;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Result</span> &#123;<br><br>    <span class="hljs-keyword">private</span> String code; <span class="hljs-comment">// 编码</span><br>    <span class="hljs-keyword">private</span> String info; <span class="hljs-comment">// 描述</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Result</span><span class="hljs-params">(String code, String info)</span> &#123;<br>        <span class="hljs-built_in">this</span>.code = code;<br>        <span class="hljs-built_in">this</span>.info = info;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getCode</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> code;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setCode</span><span class="hljs-params">(String code)</span> &#123;<br>        <span class="hljs-built_in">this</span>.code = code;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getInfo</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> info;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setInfo</span><span class="hljs-params">(String info)</span> &#123;<br>        <span class="hljs-built_in">this</span>.info = info;<br>    &#125;<br><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">equals</span><span class="hljs-params">(Object obj)</span> &#123;<br>        <span class="hljs-keyword">if</span> (obj <span class="hljs-keyword">instanceof</span> Result result) &#123;<br>            <span class="hljs-keyword">return</span> Objects.equals(<span class="hljs-built_in">this</span>.code, result.code) &amp;&amp; <span class="hljs-built_in">this</span>.info.equals(result.info);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DefaultRefuseResult</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Result</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">DefaultRefuseResult</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">super</span>(<span class="hljs-string">&quot;0000&quot;</span>, <span class="hljs-string">&quot;当前状态不可达此状态&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">Status</span> &#123;<br><br>    <span class="hljs-comment">// 1创建编辑、2待审核、3审核通过(任务扫描成活动中)、4审核拒绝(可以撤审到编辑状态)、5活动中、6活动关闭、7活动开启(任务扫描成活动中)</span><br>    Editing &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> Status <span class="hljs-title function_">defaultNextStatus</span><span class="hljs-params">(Status status)</span> &#123;<br>            <span class="hljs-keyword">return</span> Check;<br>        &#125;<br>    &#125;,<br>    Check &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> Status <span class="hljs-title function_">defaultNextStatus</span><span class="hljs-params">(Status status)</span> &#123;<br>            <span class="hljs-keyword">return</span> Pass;<br>        &#125;<br>    &#125;,<br>    Pass &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> Status <span class="hljs-title function_">defaultNextStatus</span><span class="hljs-params">(Status status)</span> &#123;<br>            <span class="hljs-keyword">return</span> Doing;<br>        &#125;<br>    &#125;,<br>    Refuse,<br>    Doing &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> Status <span class="hljs-title function_">defaultNextStatus</span><span class="hljs-params">(Status status)</span> &#123;<br>            <span class="hljs-keyword">return</span> Close;<br>        &#125;<br>    &#125;,<br>    Close,<br>    Open;<br><br>    <span class="hljs-keyword">public</span> Status <span class="hljs-title function_">defaultNextStatus</span><span class="hljs-params">(Status status)</span> &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalStateException</span>(<span class="hljs-string">&quot;未定义默认下一个状态&quot;</span>);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//定义状态接口</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">State</span> &#123;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 活动提审</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> activityId    活动ID</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> currentStatus 当前状态</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 执行结果</span><br><span class="hljs-comment">     */</span><br>    Result <span class="hljs-title function_">arraignment</span><span class="hljs-params">(String activityId, Enum&lt;Status&gt; currentStatus)</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 审核通过</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> activityId    活动ID</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> currentStatus 当前状态</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 执行结果</span><br><span class="hljs-comment">     */</span><br>    Result <span class="hljs-title function_">checkPass</span><span class="hljs-params">(String activityId, Enum&lt;Status&gt; currentStatus)</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 审核拒绝</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> activityId    活动ID</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> currentStatus 当前状态</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 执行结果</span><br><span class="hljs-comment">     */</span><br>    Result <span class="hljs-title function_">checkRefuse</span><span class="hljs-params">(String activityId, Enum&lt;Status&gt; currentStatus)</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 撤审撤销</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> activityId    活动ID</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> currentStatus 当前状态</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 执行结果</span><br><span class="hljs-comment">     */</span><br>    Result <span class="hljs-title function_">checkRevoke</span><span class="hljs-params">(String activityId, Enum&lt;Status&gt; currentStatus)</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 活动关闭</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> activityId    活动ID</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> currentStatus 当前状态</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 执行结果</span><br><span class="hljs-comment">     */</span><br>    Result <span class="hljs-title function_">close</span><span class="hljs-params">(String activityId, Enum&lt;Status&gt; currentStatus)</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 活动开启</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> activityId    活动ID</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> currentStatus 当前状态</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 执行结果</span><br><span class="hljs-comment">     */</span><br>    Result <span class="hljs-title function_">open</span><span class="hljs-params">(String activityId, Enum&lt;Status&gt; currentStatus)</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 活动执行</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> activityId    活动ID</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> currentStatus 当前状态</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 执行结果</span><br><span class="hljs-comment">     */</span><br>    Result <span class="hljs-title function_">doing</span><span class="hljs-params">(String activityId, Enum&lt;Status&gt; currentStatus)</span>;<br><br><br>    <span class="hljs-keyword">default</span> Result <span class="hljs-title function_">doDefaultNextAction</span><span class="hljs-params">(String activityId, Enum&lt;Status&gt; currentStatus)</span> &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalStateException</span>(<span class="hljs-string">&quot;没有下一个默认的操作&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//每种状态均实现，在其内部定义状态转变</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CheckState</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">State</span> &#123;<br><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">arraignment</span><span class="hljs-params">(String activityId, Enum&lt;Status&gt; currentStatus)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultRefuseResult</span>();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">checkPass</span><span class="hljs-params">(String activityId, Enum&lt;Status&gt; currentStatus)</span> &#123;<br>        ActivityService.execStatus(activityId, currentStatus, Status.Pass);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Result</span>(<span class="hljs-string">&quot;0000&quot;</span>, <span class="hljs-string">&quot;活动审核通过完成&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">checkRefuse</span><span class="hljs-params">(String activityId, Enum&lt;Status&gt; currentStatus)</span> &#123;<br>        ActivityService.execStatus(activityId, currentStatus, Status.Refuse);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Result</span>(<span class="hljs-string">&quot;0000&quot;</span>, <span class="hljs-string">&quot;活动审核拒绝完成&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">checkRevoke</span><span class="hljs-params">(String activityId, Enum&lt;Status&gt; currentStatus)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultRefuseResult</span>();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">close</span><span class="hljs-params">(String activityId, Enum&lt;Status&gt; currentStatus)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultRefuseResult</span>();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">open</span><span class="hljs-params">(String activityId, Enum&lt;Status&gt; currentStatus)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultRefuseResult</span>();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">doing</span><span class="hljs-params">(String activityId, Enum&lt;Status&gt; currentStatus)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultRefuseResult</span>();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">doDefaultNextAction</span><span class="hljs-params">(String activityId, Enum&lt;Status&gt; currentStatus)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.checkPass(activityId, currentStatus);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CloseState</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">State</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">arraignment</span><span class="hljs-params">(String activityId, Enum&lt;Status&gt; currentStatus)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultRefuseResult</span>();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">checkPass</span><span class="hljs-params">(String activityId, Enum&lt;Status&gt; currentStatus)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultRefuseResult</span>();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">checkRefuse</span><span class="hljs-params">(String activityId, Enum&lt;Status&gt; currentStatus)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultRefuseResult</span>();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">checkRevoke</span><span class="hljs-params">(String activityId, Enum&lt;Status&gt; currentStatus)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultRefuseResult</span>();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">close</span><span class="hljs-params">(String activityId, Enum&lt;Status&gt; currentStatus)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultRefuseResult</span>();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">open</span><span class="hljs-params">(String activityId, Enum&lt;Status&gt; currentStatus)</span> &#123;<br>        ActivityService.execStatus(activityId, currentStatus, Status.Open);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Result</span>(<span class="hljs-string">&quot;0000&quot;</span>, <span class="hljs-string">&quot;活动开启完成&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">doing</span><span class="hljs-params">(String activityId, Enum&lt;Status&gt; currentStatus)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultRefuseResult</span>();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DoingState</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">State</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">arraignment</span><span class="hljs-params">(String activityId, Enum&lt;Status&gt; currentStatus)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultRefuseResult</span>();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">checkPass</span><span class="hljs-params">(String activityId, Enum&lt;Status&gt; currentStatus)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultRefuseResult</span>();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">checkRefuse</span><span class="hljs-params">(String activityId, Enum&lt;Status&gt; currentStatus)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultRefuseResult</span>();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">checkRevoke</span><span class="hljs-params">(String activityId, Enum&lt;Status&gt; currentStatus)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultRefuseResult</span>();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">close</span><span class="hljs-params">(String activityId, Enum&lt;Status&gt; currentStatus)</span> &#123;<br>        ActivityService.execStatus(activityId, currentStatus, Status.Close);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Result</span>(<span class="hljs-string">&quot;0000&quot;</span>, <span class="hljs-string">&quot;活动关闭成功&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">open</span><span class="hljs-params">(String activityId, Enum&lt;Status&gt; currentStatus)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultRefuseResult</span>();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">doing</span><span class="hljs-params">(String activityId, Enum&lt;Status&gt; currentStatus)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultRefuseResult</span>();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">doDefaultNextAction</span><span class="hljs-params">(String activityId, Enum&lt;Status&gt; currentStatus)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.close(activityId, currentStatus);<br>    &#125;<br>&#125;<br><br>。。。<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//定义状态转换机</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StateMachine</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Map&lt;Enum&lt;Status&gt;, State&gt; stateMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br><br><br>    <span class="hljs-keyword">static</span> &#123;<br>        stateMap.put(Status.Check, <span class="hljs-keyword">new</span> <span class="hljs-title class_">CheckState</span>());     <span class="hljs-comment">// 待审核</span><br>        stateMap.put(Status.Close, <span class="hljs-keyword">new</span> <span class="hljs-title class_">CloseState</span>());     <span class="hljs-comment">// 已关闭</span><br>        stateMap.put(Status.Doing, <span class="hljs-keyword">new</span> <span class="hljs-title class_">DoingState</span>());     <span class="hljs-comment">// 活动中</span><br>        stateMap.put(Status.Editing, <span class="hljs-keyword">new</span> <span class="hljs-title class_">EditingState</span>()); <span class="hljs-comment">// 编辑中</span><br>        stateMap.put(Status.Open, <span class="hljs-keyword">new</span> <span class="hljs-title class_">OpenState</span>());       <span class="hljs-comment">// 已开启</span><br>        stateMap.put(Status.Pass, <span class="hljs-keyword">new</span> <span class="hljs-title class_">PassState</span>());       <span class="hljs-comment">// 审核通过</span><br>        stateMap.put(Status.Refuse, <span class="hljs-keyword">new</span> <span class="hljs-title class_">RefuseState</span>());   <span class="hljs-comment">// 审核拒绝</span><br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">arraignment</span><span class="hljs-params">(String activityId, Enum&lt;Status&gt; currentStatus)</span> &#123;<br>        <span class="hljs-keyword">return</span> stateMap.get(currentStatus).arraignment(activityId, currentStatus);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">checkPass</span><span class="hljs-params">(String activityId, Enum&lt;Status&gt; currentStatus)</span> &#123;<br>        <span class="hljs-keyword">return</span> stateMap.get(currentStatus).checkPass(activityId, currentStatus);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">checkRefuse</span><span class="hljs-params">(String activityId, Enum&lt;Status&gt; currentStatus)</span> &#123;<br>        <span class="hljs-keyword">return</span> stateMap.get(currentStatus).checkRefuse(activityId, currentStatus);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">checkRevoke</span><span class="hljs-params">(String activityId, Enum&lt;Status&gt; currentStatus)</span> &#123;<br>        <span class="hljs-keyword">return</span> stateMap.get(currentStatus).checkRevoke(activityId, currentStatus);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">close</span><span class="hljs-params">(String activityId, Enum&lt;Status&gt; currentStatus)</span> &#123;<br>        <span class="hljs-keyword">return</span> stateMap.get(currentStatus).close(activityId, currentStatus);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">open</span><span class="hljs-params">(String activityId, Enum&lt;Status&gt; currentStatus)</span> &#123;<br>        <span class="hljs-keyword">return</span> stateMap.get(currentStatus).open(activityId, currentStatus);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">doing</span><span class="hljs-params">(String activityId, Enum&lt;Status&gt; currentStatus)</span> &#123;<br>        <span class="hljs-keyword">return</span> stateMap.get(currentStatus).doing(activityId, currentStatus);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">doDefaultNextAction</span><span class="hljs-params">(String activityId, Enum&lt;Status&gt; currentStatus)</span> &#123;<br>        <span class="hljs-keyword">return</span> stateMap.get(currentStatus).doDefaultNextAction(activityId, currentStatus);<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//service类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ActivityService</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Map&lt;String, Enum&lt;Status&gt;&gt; currentStatus = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br><br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(String activityId, Enum&lt;Status&gt; initStatus)</span> &#123;<br>        currentStatus.put(activityId, initStatus);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">execStatus</span><span class="hljs-params">(String activityId, Enum&lt;Status&gt; beforeStatus, Enum&lt;Status&gt; nextStatus)</span> &#123;<br>        <span class="hljs-keyword">if</span> (!currentStatus.get(activityId).equals(beforeStatus)) <span class="hljs-keyword">return</span>;<br>        currentStatus.put(activityId, nextStatus);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Enum&lt;Status&gt; <span class="hljs-title function_">queryActivityStatus</span><span class="hljs-params">(String activityId)</span> &#123;<br>        <span class="hljs-keyword">return</span> currentStatus.get(activityId);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> ActivityInfo <span class="hljs-title function_">queryActivityInfo</span><span class="hljs-params">(String activityId)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ActivityInfo</span>() &#123;&#123;<br>            setActivityId(activityId);<br>            setActivityName(<span class="hljs-string">&quot;一个活动&quot;</span>);<br>            setBeginTime(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>            setEndTime(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>            setStatus(queryActivityStatus(activityId));<br>        &#125;&#125;;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>状态机模式将状态和行为封装在各个状态类中，使得代码更加清晰和易于理解，将状态转换和行为分离，使得代码更加模块化，易于维护和扩展，允许通过添加新的状态类来扩展状态机的功能，而无需修改现有的代码，体现开闭原则。</p><h3 id="策略模式">策略模式</h3><p>策略模式是一种行为型设计模式，主要用于解决在软件构建过程中，某些对象使用的算法可能多种多样，经常发生变化的问题。策略模式的核心思想是定义一系列算法，并将每个算法封装起来，使它们可以相互替换。这样，算法就可以独立于它们的客户变化，从而提高系统的灵活性和可维护性。本案例以营销时的折扣为场景。</p><p>目录</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">strategy<br>    │  IStrategy.java<br>    │<br>    ├─impl<br>    │      DiscountStrategy.java<br>    │      FullReductionStrategy.java<br>    │<br>    └─service<br>            ShopService.java<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//定义基本策略接口，并实现两种折扣策略</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">IStrategy</span> &#123;<br><br><br>    Double <span class="hljs-title function_">calculateDiscount</span><span class="hljs-params">(Double price)</span>;<br><br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DiscountStrategy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IStrategy</span> &#123;<br><br>    <span class="hljs-keyword">private</span> Double discount;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">DiscountStrategy</span><span class="hljs-params">(Double discount)</span> &#123;<br>        <span class="hljs-built_in">this</span>.discount = discount;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Double <span class="hljs-title function_">calculateDiscount</span><span class="hljs-params">(Double price)</span> &#123;<br>        <span class="hljs-keyword">return</span> discount * price;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FullReductionStrategy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IStrategy</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Double <span class="hljs-title function_">calculateDiscount</span><span class="hljs-params">(Double price)</span> &#123;<br>        <span class="hljs-keyword">if</span> (price &gt;= <span class="hljs-number">1000</span>) <span class="hljs-keyword">return</span> price - <span class="hljs-number">50</span>;<br>        <span class="hljs-keyword">if</span> (price &gt;= <span class="hljs-number">200</span>) <span class="hljs-keyword">return</span> price - <span class="hljs-number">200</span>;<br>        <span class="hljs-keyword">return</span> price;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//在service类中传入策略</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ShopService</span> &#123;<br><br>    <span class="hljs-keyword">private</span> IStrategy strategy;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ShopService</span><span class="hljs-params">(IStrategy strategy)</span> &#123;<br>        <span class="hljs-built_in">this</span>.strategy = strategy;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Double <span class="hljs-title function_">calculatePrice</span><span class="hljs-params">(Double money)</span> &#123;<br>        <span class="hljs-keyword">return</span> strategy.calculateDiscount(money);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>策略模式是一种很常见的设计模式，使用策略模式可以使代码的扩展性大大提高，使用策略的时候只需要简单配置就可以进行切换。</p><h3 id="模板模式">模板模式</h3><p>模板模式也是一种很常见的设计模式，模板模式是基于抽象类定义某一种方法或行为的基本准则，实现类只需实现其中的核心细节，而无需关心流程顺序及其他。这里以实现负载均衡常见的一致性hash算法为例。</p><p>目录</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">template<br>        ArrayListOfConsistentHash.java<br>        BaseConsistentHash.java<br>        TreeMapOfConsistentHash.java<br><br></code></pre></td></tr></table></figure><blockquote><p>一致性哈希（Consistent Hashing）是一种分布式哈希技术，它可以在节点数量发生变化时，最小化数据重新分布的次数。在一致性哈希中，哈希环是一个连续的哈希值空间，每个节点和数据都映射到这个空间中。当需要添加或删除节点时，只需要重新分配哈希环上相邻节点之间的数据，而不需要重新分配整个哈希环上的数据。</p><p>一致性哈希的优点是，当节点数量发生变化时，只需要重新分配哈希环上相邻节点之间的数据，而不需要重新分配整个哈希环上的数据。这样可以大大减少数据重新分布的次数，提高系统的性能和可扩展性。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//定义基本一致性hash类，把通用的方法和模板流程定义好，子类只需要实现核心的方法即可。</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BaseConsistentHash</span> &#123;<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-type">long</span> key, String value)</span>;<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">logger</span> <span class="hljs-operator">=</span> LoggerFactory.getLogger(BaseConsistentHash.class);<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sort</span><span class="hljs-params">()</span> &#123;&#125;<br><br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">abstract</span> String <span class="hljs-title function_">getFirstNodeValue</span><span class="hljs-params">(String key)</span>;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">synchronized</span> String <span class="hljs-title function_">process</span><span class="hljs-params">(List&lt;String&gt; values, String key)</span> &#123;<br>        processBefore();<br>        <span class="hljs-keyword">for</span> (String value : values) &#123;<br>            add(hash(value), value);<br>        &#125;<br>        sort();<br>        <span class="hljs-keyword">return</span> getFirstNodeValue(key);<br>    &#125;<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">processBefore</span><span class="hljs-params">()</span>;<br><br><br>    <span class="hljs-keyword">public</span> Long <span class="hljs-title function_">hash</span><span class="hljs-params">(String value)</span> &#123;<br>        MessageDigest md5;<br>        <span class="hljs-keyword">try</span> &#123;<br>            md5 = MessageDigest.getInstance(<span class="hljs-string">&quot;MD5&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (NoSuchAlgorithmException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;MD5 not supported&quot;</span>, e);<br>        &#125;<br>        md5.reset();<br>        <span class="hljs-type">byte</span>[] keyBytes;<br>        keyBytes = value.getBytes(StandardCharsets.UTF_8);<br><br>        md5.update(keyBytes);<br>        <span class="hljs-type">byte</span>[] digest = md5.digest();<br><br>        <span class="hljs-comment">// hash code, Truncate to 32-bits</span><br>        <span class="hljs-type">long</span> <span class="hljs-variable">hashCode</span> <span class="hljs-operator">=</span> ((<span class="hljs-type">long</span>) (digest[<span class="hljs-number">3</span>] &amp; <span class="hljs-number">0xFF</span>) &lt;&lt; <span class="hljs-number">24</span>)<br>                | ((<span class="hljs-type">long</span>) (digest[<span class="hljs-number">2</span>] &amp; <span class="hljs-number">0xFF</span>) &lt;&lt; <span class="hljs-number">16</span>)<br>                | ((<span class="hljs-type">long</span>) (digest[<span class="hljs-number">1</span>] &amp; <span class="hljs-number">0xFF</span>) &lt;&lt; <span class="hljs-number">8</span>)<br>                | (digest[<span class="hljs-number">0</span>] &amp; <span class="hljs-number">0xFF</span>);<br><br>        <span class="hljs-keyword">return</span> hashCode &amp; <span class="hljs-number">0xffffffffL</span>;<br>    &#125;<br><br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArrayListOfConsistentHash</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseConsistentHash</span> &#123;<br><br>    <span class="hljs-keyword">record</span> <span class="hljs-title class_">Pair</span><span class="hljs-params">(</span><br><span class="hljs-params">            Long key,</span><br><span class="hljs-params">            String value</span><br><span class="hljs-params">    )</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> ArrayList&lt;Pair&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sort</span><span class="hljs-params">()</span> &#123;<br>        list.sort(Comparator.comparing(Pair::key).thenComparing(Pair::value));<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-type">long</span> key, String value)</span> &#123;<br>        <span class="hljs-comment">//先搞几个虚拟节点</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">NODE_SIZE</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; NODE_SIZE; i++) &#123;<br>            list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Pair</span>(<span class="hljs-built_in">super</span>.hash(<span class="hljs-string">&quot;node&quot;</span> + i + key), value));<br>        &#125;<br>        list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Pair</span>(key, value));<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> String <span class="hljs-title function_">getFirstNodeValue</span><span class="hljs-params">(String key)</span> &#123;<br>        <span class="hljs-comment">//基于二分实现</span><br>        <span class="hljs-type">Long</span> <span class="hljs-variable">hash</span> <span class="hljs-operator">=</span> hash(key);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">l</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, r = list.size();<br>        <span class="hljs-keyword">while</span> (l &lt; r) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">mid</span> <span class="hljs-operator">=</span> l + r &gt;&gt; <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span> (list.get(mid).key &gt;= hash) r = mid;<br>            <span class="hljs-keyword">else</span> l = mid + <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> list.get(l).value;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">processBefore</span><span class="hljs-params">()</span> &#123;<br>        list.clear();<br>        logger.info(<span class="hljs-string">&quot;只需arraylist实现的一致性hash&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TreeMapOfConsistentHash</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseConsistentHash</span>&#123;<br><br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> TreeMap&lt;Long, String&gt; treeMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeMap</span>&lt;&gt;();<br><br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">NODE_SIZE</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 加入一些虚拟节点</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key key</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> value value</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-type">long</span> key, String value)</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; NODE_SIZE; i++) &#123;<br>            treeMap.put(<span class="hljs-built_in">super</span>.hash(<span class="hljs-string">&quot;node&quot;</span> + key + i), value);<br>        &#125;<br>        treeMap.put(<span class="hljs-built_in">super</span>.hash(String.valueOf(key)), value);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key key</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> value</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> String <span class="hljs-title function_">getFirstNodeValue</span><span class="hljs-params">(String key)</span> &#123;<br><br>        <span class="hljs-type">Long</span> <span class="hljs-variable">hash</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">super</span>.hash(key);<br>        SortedMap&lt;Long, String&gt; last = treeMap.tailMap(hash);  <span class="hljs-comment">//这个方法返回从这里开始向后的元素(包含这个)</span><br>        <span class="hljs-keyword">if</span> (!last.isEmpty()) &#123;<br>            <span class="hljs-keyword">return</span> last.get(last.firstKey());<br>        &#125;<br>        <span class="hljs-keyword">if</span> (treeMap.isEmpty()) <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalStateException</span>(<span class="hljs-string">&quot;not support&quot;</span>);<br>        <span class="hljs-keyword">return</span> treeMap.firstEntry().getValue();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">processBefore</span><span class="hljs-params">()</span> &#123;<br>        treeMap.clear();<br>        logger.info(<span class="hljs-string">&quot;只需arraylist实现的一致性hash&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>模板模式非常适用于一些同类化的实现，模板定义好，只需要实现类实现核心的东西就可以。基本每个框架中我们都可以看到模板模式的身影。</p><h3 id="访问者模式">访问者模式</h3><p>此设计模式非常高级，也是比较难理解的，它允许在不改变其类的情况下在一个类群上尽可能的添加新的操作。它用于封装一些应用于某种数据结构中的各元素的操作。这里以公司内对不同职位员工的工资发放为例。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">│  SalaryStructure.java<br>│<br>└─ele<br>        BonusVisitor.java<br>        Element.java<br>        Employee.java<br>        Leader.java<br>        OutsourcedEmployee.java<br>        SalaryVisitor.java<br>        Visitor.java<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//定义element基类，也可以是抽象类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Element</span> &#123;<br>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">accept</span><span class="hljs-params">(Visitor visitor)</span>; <span class="hljs-comment">//通常都为accept方法，不知道为什么</span><br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Employee</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Element</span> &#123;<br><br>  <span class="hljs-type">int</span> <span class="hljs-variable">monthlySalary</span> <span class="hljs-operator">=</span> <span class="hljs-number">3000</span>;<br><br>  <span class="hljs-type">int</span> <span class="hljs-variable">bonus</span> <span class="hljs-operator">=</span> <span class="hljs-number">500</span>;<br>  <br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">accept</span><span class="hljs-params">(Visitor visitor)</span> &#123;<br>      visitor.visit(<span class="hljs-built_in">this</span>);<br>  &#125;<br><br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Leader</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Element</span> &#123;<br><br>  <span class="hljs-type">int</span> <span class="hljs-variable">monthlySalary</span> <span class="hljs-operator">=</span> <span class="hljs-number">5000</span>;<br>  <span class="hljs-type">int</span> <span class="hljs-variable">bonus</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;<br>  <br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">accept</span><span class="hljs-params">(Visitor visitor)</span> &#123;<br>      visitor.visit(<span class="hljs-built_in">this</span>);<br>  &#125;<br><br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OutsourcedEmployee</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Element</span> &#123;<br><br>  <span class="hljs-type">int</span> <span class="hljs-variable">hourlyRate</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;<br><br>  <span class="hljs-type">int</span> <span class="hljs-variable">bonus</span> <span class="hljs-operator">=</span> <span class="hljs-number">30</span>;<br>  <br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">accept</span><span class="hljs-params">(Visitor visitor)</span> &#123;<br>    visitor.visit(<span class="hljs-built_in">this</span>);<br>  &#125;<br><br>&#125;<br><br><span class="hljs-comment">//定义visitor接口</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Visitor</span> &#123;<br>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">visit</span><span class="hljs-params">(Leader leader)</span>;<br>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">visit</span><span class="hljs-params">(Employee employee)</span>;<br>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">visit</span><span class="hljs-params">(OutsourcedEmployee outsourcedEmployee)</span>;<br>&#125;<br><br><span class="hljs-comment">//实现两种visitor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SalaryVisitor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Visitor</span> &#123;<br>  <br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">visit</span><span class="hljs-params">(Leader leader)</span> &#123;<br>    <span class="hljs-comment">// 假定领导有2倍的基础薪水和额外的奖金</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">salary</span> <span class="hljs-operator">=</span> leader.monthlySalary * <span class="hljs-number">2</span> + <span class="hljs-number">1000</span>;<br>    System.out.println(<span class="hljs-string">&quot;Pay &quot;</span> + salary + <span class="hljs-string">&quot; to leader&quot;</span>);<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">visit</span><span class="hljs-params">(Employee employee)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">salary</span> <span class="hljs-operator">=</span> employee.monthlySalary;<br>    System.out.println(<span class="hljs-string">&quot;Pay &quot;</span> + salary + <span class="hljs-string">&quot; to employee&quot;</span>);<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">visit</span><span class="hljs-params">(OutsourcedEmployee outsourcedEmployee)</span> &#123;<br>    <span class="hljs-comment">// 假定外包员工按小时支付，每月工作160小时</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">salary</span> <span class="hljs-operator">=</span> outsourcedEmployee.hourlyRate * <span class="hljs-number">160</span>;<br>    System.out.println(<span class="hljs-string">&quot;Pay &quot;</span> + salary + <span class="hljs-string">&quot; to outsourced employee&quot;</span>);<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BonusVisitor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Visitor</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">visit</span><span class="hljs-params">(Leader leader)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Pay &quot;</span> + leader.bonus + <span class="hljs-string">&quot; to leader&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">visit</span><span class="hljs-params">(Employee employee)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Pay &quot;</span> + employee.bonus + <span class="hljs-string">&quot; to employee&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">visit</span><span class="hljs-params">(OutsourcedEmployee outsourcedEmployee)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Pay &quot;</span> + outsourcedEmployee.bonus + <span class="hljs-string">&quot; to outsourcedEmployee&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//定义数据看板</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SalaryStructure</span> &#123;<br>  <span class="hljs-keyword">private</span> List&lt;Element&gt; elements;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">SalaryStructure</span><span class="hljs-params">()</span> &#123;<br>    elements = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    <span class="hljs-comment">// 这部分可以根据实际需求来生成对象</span><br>    elements.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Leader</span>());<br>    elements.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>());<br>    elements.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">OutsourcedEmployee</span>());<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">(Visitor visitor)</span> &#123;<br>    <span class="hljs-keyword">for</span> (Element element : elements) &#123;<br>      element.accept(visitor);<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>从此案例中可以看出，通过访问者模式拓展了计算工资和奖金的功能。但是访问者模式它的设计还是比较复杂难懂的。访问者模式通过将数据结构和操作分离，提供了一种灵活、可扩展、易于维护的解决方案，适用于需要对数据结构进行多种不同操作的场景。(不懂这句话)</p><h3 id="总结">总结</h3><p>设计模式就这样草草结束了…</p>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>换跟DP</title>
    <link href="/2024/03/17/%E6%8D%A2%E8%B7%9FDP/"/>
    <url>/2024/03/17/%E6%8D%A2%E8%B7%9FDP/</url>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.cn/problems/minimum-height-trees/">LC310. 最小高度树</a></p><p>树是一个无向图，其中任何两个顶点只通过一条路径连接。 换句话说，一个任何没有简单环路的连通图都是一棵树。</p><p>给你一棵包含 <code>n</code> 个节点的树，标记为 <code>0</code> 到 <code>n - 1</code> 。给定数字 <code>n</code> 和一个有 <code>n - 1</code> 条无向边的 <code>edges</code> 列表（每一个边都是一对标签），其中 <code>edges[i] = [ai, bi]</code> 表示树中节点 <code>ai</code> 和 <code>bi</code> 之间存在一条无向边。</p><p>可选择树中任何一个节点作为根。当选择节点 <code>x</code> 作为根节点时，设结果树的高度为 <code>h</code> 。在所有可能的树中，具有最小高度的树（即，<code>min(h)</code>）被称为 <strong>最小高度树</strong> 。</p><p>请你找到所有的 <strong>最小高度树</strong> 并按 <strong>任意顺序</strong> 返回它们的根节点标签列表。</p><p>树的 <strong>高度</strong> 是指根节点和叶子节点之间最长向下路径上边的数量。</p><p><strong>示例 1：</strong></p><p><img src="https://assets.leetcode.com/uploads/2020/09/01/e1.jpg" alt="img"></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs inform7">输入：n = 4, edges = <span class="hljs-comment">[<span class="hljs-comment">[1,0]</span>,<span class="hljs-comment">[1,2]</span>,<span class="hljs-comment">[1,3]</span>]</span><br>输出：<span class="hljs-comment">[1]</span><br>解释：如图所示，当根是标签为 1 的节点时，树的高度是 1 ，这是唯一的最小高度树。<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><p><img src="https://assets.leetcode.com/uploads/2020/09/01/e2.jpg" alt="img"></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs inform7">输入：n = 6, edges = <span class="hljs-comment">[<span class="hljs-comment">[3,0]</span>,<span class="hljs-comment">[3,1]</span>,<span class="hljs-comment">[3,2]</span>,<span class="hljs-comment">[3,4]</span>,<span class="hljs-comment">[5,4]</span>]</span><br>输出：<span class="hljs-comment">[3,4]</span><br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= n &lt;= 2 * 104</code></li><li><code>edges.length == n - 1</code></li><li><code>0 &lt;= ai, bi &lt; n</code></li><li><code>ai != bi</code></li><li>所有 <code>(ai, bi)</code> 互不相同</li><li>给定的输入 <strong>保证</strong> 是一棵树，并且 <strong>不会有重复的边</strong></li></ul><p>换跟DP解法，对于本题而言如果能够求出以0为根，每个节点向下的最大值<code>mx_down[i]</code>和向上的最大值<code>up[i]</code>,就能求出哪些点是最小高度的根，向下的最大值很好求，只需要dfs一遍即可，向上的最大值，需要根据情况来判断，设<code>p</code>为<code>u</code>的父节点，<code>up[u] = max(up[p] + 1, up[u])</code>,此外如果<code>u</code>是<code>p</code>向下最大的子节点的话，<code>up[u] = max(up[u], smx_down[p] + 1)</code>,<code>sxm_down</code>为向下的次大值，如果<code>u</code>不是<code>p</code>向下的最大子节点的话，那么<code>up[u] = max(up[u], mx_down[p] + 1)</code>,下面的图为三种情况。</p><p><img src="https://image.itbaima.cn/images/76/image-20240317124232447.png" style="zoom:80%;" ></img></p><p>此题的另种思路需要数学证明，不会证明。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">findMinHeightTrees</span>(<span class="hljs-params">self, n: <span class="hljs-built_in">int</span>, edges: <span class="hljs-type">List</span>[<span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]]</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]:<br>        mx_down, smx_down, up, p = [<span class="hljs-number">0</span>] * n, [<span class="hljs-number">0</span>] * n, [<span class="hljs-number">0</span>] * n, [-<span class="hljs-number">1</span>] * n<br><br>        g = [[] <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n)]<br>        <span class="hljs-keyword">for</span> a, b <span class="hljs-keyword">in</span> edges:<br>            g[a].append(b)<br>            g[b].append(a)<br><br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">dfs1</span>(<span class="hljs-params">u: <span class="hljs-built_in">int</span>, pa: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>            <span class="hljs-keyword">for</span> e <span class="hljs-keyword">in</span> g[u]:<br>                <span class="hljs-keyword">if</span> e != pa:<br>                    v = dfs1(e, u)<br>                    <span class="hljs-keyword">if</span> v + <span class="hljs-number">1</span> &gt;= mx_down[u]:<br>                        smx_down[u] = mx_down[u]<br>                        mx_down[u] = v + <span class="hljs-number">1</span><br>                        p[u] = e<br>                    <span class="hljs-keyword">if</span> v + <span class="hljs-number">1</span> &gt; smx_down[u]:<br>                        smx_down[u] = v + <span class="hljs-number">1</span><br>            <span class="hljs-keyword">return</span> mx_down[u]<br><br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">dfs2</span>(<span class="hljs-params">u: <span class="hljs-built_in">int</span>, pa: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">for</span> e <span class="hljs-keyword">in</span> g[u]:<br>                <span class="hljs-keyword">if</span> e != pa:<br>                    <span class="hljs-keyword">if</span> p[u] == e:<br>                        up[e] = <span class="hljs-built_in">max</span>(up[e], smx_down[u] + <span class="hljs-number">1</span>)<br>                    <span class="hljs-keyword">else</span>:<br>                        up[e] = <span class="hljs-built_in">max</span>(up[e], mx_down[u] + <span class="hljs-number">1</span>)<br>                    up[e] = <span class="hljs-built_in">max</span>(up[e], up[u] + <span class="hljs-number">1</span>)<br>                    dfs2(e, u)<br><br>        dfs1(<span class="hljs-number">0</span>, -<span class="hljs-number">1</span>)<br>        dfs2(<span class="hljs-number">0</span>, -<span class="hljs-number">1</span>)<br>        ret = []<br>        v = <span class="hljs-number">10</span> ** <span class="hljs-number">10</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>            m = <span class="hljs-built_in">max</span>(mx_down[i], up[i])<br>            <span class="hljs-keyword">if</span> m &lt; v:<br>                v = m<br>                ret.clear()<br>                ret.append(i)<br>            <span class="hljs-keyword">elif</span> m == v:<br>                ret.append(i)<br>        <span class="hljs-keyword">return</span> ret<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>杂项</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>连通图最小路径个数</title>
    <link href="/2024/03/05/%E8%BF%9E%E9%80%9A%E5%9B%BE%E6%9C%80%E5%B0%8F%E8%B7%AF%E5%BE%84%E4%B8%AA%E6%95%B0/"/>
    <url>/2024/03/05/%E8%BF%9E%E9%80%9A%E5%9B%BE%E6%9C%80%E5%B0%8F%E8%B7%AF%E5%BE%84%E4%B8%AA%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.cn/problems/number-of-ways-to-arrive-at-destination/">LC1976. 到达目的地的方案数</a></p><p>你在一个城市里，城市由 <code>n</code> 个路口组成，路口编号为 <code>0</code> 到 <code>n - 1</code> ，某些路口之间有 <strong>双向</strong> 道路。输入保证你可以从任意路口出发到达其他任意路口，且任意两个路口之间最多有一条路。</p><p>给你一个整数 <code>n</code> 和二维整数数组 <code>roads</code> ，其中 <code>roads[i] = [ui, vi, timei]</code> 表示在路口 <code>ui</code> 和 <code>vi</code> 之间有一条需要花费 <code>timei</code> 时间才能通过的道路。你想知道花费 <strong>最少时间</strong> 从路口 <code>0</code> 出发到达路口 <code>n - 1</code> 的方案数。</p><p>请返回花费 <strong>最少时间</strong> 到达目的地的 <strong>路径数目</strong> 。由于答案可能很大，将结果对 <code>109 + 7</code> <strong>取余</strong> 后返回。</p><p><strong>示例 1：</strong></p><p><img src="https://assets.leetcode.com/uploads/2021/07/17/graph2.png" alt="img"></p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs tap">输入：n = 7, roads = [[0,6,7],[0,1,2],[1,2,3],[1,3,3],[6,3,3],[3,5,1],[6,5,1],[2,5,1],[0,4,5],[4,6,2]]<br>输出：4<br>解释：从路口<span class="hljs-number"> 0 </span>出发到路口<span class="hljs-number"> 6 </span>花费的最少时间是<span class="hljs-number"> 7 </span>分钟。<br>四条花费<span class="hljs-number"> 7 </span>分钟的路径分别为：<br>-<span class="hljs-number"> 0 </span>➝ 6<br>-<span class="hljs-number"> 0 </span>➝<span class="hljs-number"> 4 </span>➝ 6<br>-<span class="hljs-number"> 0 </span>➝<span class="hljs-number"> 1 </span>➝<span class="hljs-number"> 2 </span>➝<span class="hljs-number"> 5 </span>➝ 6<br>-<span class="hljs-number"> 0 </span>➝<span class="hljs-number"> 1 </span>➝<span class="hljs-number"> 3 </span>➝<span class="hljs-number"> 5 </span>➝ 6<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs lua">输入：n = <span class="hljs-number">2</span>, roads = <span class="hljs-string">[[1,0,10]]</span><br>输出：<span class="hljs-number">1</span><br>解释：只有一条从路口 <span class="hljs-number">0</span> 到路口 <span class="hljs-number">1</span> 的路，花费 <span class="hljs-number">10</span> 分钟。<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= n &lt;= 200</code></li><li><code>n - 1 &lt;= roads.length &lt;= n * (n - 1) / 2</code></li><li><code>roads[i].length == 3</code></li><li><code>0 &lt;= ui, vi &lt;= n - 1</code></li><li><code>1 &lt;= timei &lt;= 109</code></li><li><code>ui != vi</code></li><li>任意两个路口之间至多有一条路。</li><li>从任意路口出发，你能够到达其他任意路口。</li></ul><h3 id="解法一">解法一</h3><p>Dijkstra算法，一遍求最短路径，一边计算路径的个数，令<code>f[e]</code>表示点<code>0</code>到<code>e</code>的最短路径个数，显然<code>f[0]</code>等于1，假设到点<code>e</code>最短路径的上一个点有两个分别是<code>u</code>和<code>v</code>，那么<code>f[e] = f[u] + f[v]</code>,若只有一个<code>u</code>的话,<code>f[e] = f[u]</code>,根据这点性质，加上Dijkstra遍历的特点，很容易就可以想到在Dijkstra在进行距离转移变化时，若相等就加，若小于就覆盖。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">countPaths</span><span class="hljs-params">(<span class="hljs-type">int</span> n, <span class="hljs-type">int</span>[][] roads)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">mod</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>) (<span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>);<br>        <span class="hljs-type">long</span>[] d = <span class="hljs-keyword">new</span> <span class="hljs-title class_">long</span>[n];<br>        Arrays.fill(d, Long.MAX_VALUE);<br>        d[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span>[] f = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n];<br>        f[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>        List&lt;<span class="hljs-type">int</span>[]&gt;[] g = <span class="hljs-keyword">new</span> <span class="hljs-title class_">List</span>[n];<br>        Arrays.setAll(g, e -&gt; <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;());<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> road : roads) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">u</span> <span class="hljs-operator">=</span> road[<span class="hljs-number">0</span>], v = road[<span class="hljs-number">1</span>], t = road[<span class="hljs-number">2</span>];<br>            g[u].add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[] &#123;v, t&#125;);<br>            g[v].add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[] &#123;u, t&#125;);<br>        &#125;<br>        PriorityQueue&lt;<span class="hljs-type">long</span>[]&gt; heap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PriorityQueue</span>&lt;&gt;(Comparator.comparingLong(a -&gt; a[<span class="hljs-number">1</span>]));<br>        <span class="hljs-type">boolean</span>[] vis = <span class="hljs-keyword">new</span> <span class="hljs-title class_">boolean</span>[n];<br>        heap.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">long</span>[] &#123;<span class="hljs-number">0</span>, <span class="hljs-number">0</span>&#125;);<br>        <span class="hljs-keyword">while</span> (!heap.isEmpty()) &#123;<br>            <span class="hljs-type">long</span>[] poll = heap.poll();<br>            <span class="hljs-type">int</span> <span class="hljs-variable">e</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>) poll[<span class="hljs-number">0</span>];<br>            <span class="hljs-type">long</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> poll[<span class="hljs-number">1</span>];<br>            <span class="hljs-keyword">if</span> (vis[e]) <span class="hljs-keyword">continue</span>;<br>            <span class="hljs-keyword">if</span> (e == n - <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> f[n - <span class="hljs-number">1</span>];  <span class="hljs-comment">//这里直接返回就行，绝对没有相等的距离在后面，因为heap会把距离更小的先遍历</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> it : g[e]) &#123;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">ee</span> <span class="hljs-operator">=</span> it[<span class="hljs-number">0</span>], va = it[<span class="hljs-number">1</span>];<br>                <span class="hljs-keyword">if</span> (va + t &lt; d[ee]) &#123;<br>                    f[ee] = f[e];<br>                    d[ee] = va + t;<br>                    heap.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">long</span>[] &#123;ee, d[ee]&#125;);<br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (va + t == d[ee]) &#123;<br>                    f[ee] = (f[ee] + f[e]) % mod;<br>                &#125;<br>            &#125;<br>            vis[e] = <span class="hljs-literal">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> f[n - <span class="hljs-number">1</span>];<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="解法二">解法二</h3><p>Dijkstra+TopSort。</p><p>经过Dijkstra一遍过后已经得知每个点距离0的距离，假设有点<code>u</code>、<code>v</code>,<code>d[u] = d[v] + g[v][u]</code>，那么对于求最短距离而言<code>u -&gt; v</code>这条边已经没有用了，同时其他的点到<code>v</code>的路径也没用了，因此可以删去一些无用边。</p><p>示例一去除无效边后的图</p><p><img src="https://image.itbaima.cn/images/76/image-20240305133291195.png" style="zoom:80%;" ></img></p><p>这样重新建图后就可以使用topsort遍历一遍即可求出<code>f[n - 1]</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">countPaths</span><span class="hljs-params">(<span class="hljs-type">int</span> n, <span class="hljs-type">int</span>[][] roads)</span> &#123;<br><br>        <span class="hljs-type">long</span>[][] g = <span class="hljs-keyword">new</span> <span class="hljs-title class_">long</span>[n][n];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> gg : g) Arrays.fill(gg, -<span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> road : roads) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">u</span> <span class="hljs-operator">=</span> road[<span class="hljs-number">0</span>], v = road[<span class="hljs-number">1</span>], t = road[<span class="hljs-number">2</span>];<br>            g[u][v] = g[v][u] = t;<br>        &#125;<br>        <span class="hljs-type">long</span>[] d = <span class="hljs-keyword">new</span> <span class="hljs-title class_">long</span>[n];<br>        Arrays.fill(d, Long.MAX_VALUE / <span class="hljs-number">2</span>);<br>        d[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br>        <span class="hljs-type">boolean</span>[] vis = <span class="hljs-keyword">new</span> <span class="hljs-title class_">boolean</span>[n];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; n; j++) &#123;<br>                <span class="hljs-keyword">if</span> (!vis[j] &amp;&amp; (t == -<span class="hljs-number">1</span> || d[t] &gt; d[j])) t = j;<br>            &#125;<br>            vis[t] = <span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; n; j++) &#123;<br>                <span class="hljs-keyword">if</span> (g[j][t] != -<span class="hljs-number">1</span>) &#123;<br>                    d[j] = Math.min(d[j], d[t] + g[j][t]);<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> gg : g) Arrays.fill(gg, -<span class="hljs-number">1</span>);<br>        <span class="hljs-type">int</span>[] deg = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n];<br>        <span class="hljs-type">long</span>[] f = <span class="hljs-keyword">new</span> <span class="hljs-title class_">long</span>[n];<br>        f[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> road : roads) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">u</span> <span class="hljs-operator">=</span> road[<span class="hljs-number">0</span>], v = road[<span class="hljs-number">1</span>], t = road[<span class="hljs-number">2</span>];<br>            <span class="hljs-keyword">if</span> (d[u] == d[v] + t) &#123;<br>                g[v][u] = t;<br>                deg[u]++;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (d[v] == d[u] + t) &#123;<br>                g[u][v] = t;<br>                deg[v]++;<br>            &#125;<br>        &#125;<br>        Deque&lt;Integer&gt; queue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayDeque</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>            <span class="hljs-keyword">if</span> (deg[i] == <span class="hljs-number">0</span>) queue.add(i);<br>        &#125;<br>        <span class="hljs-keyword">while</span> (!queue.isEmpty()) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">u</span> <span class="hljs-operator">=</span> queue.poll();<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">v</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; v &lt; n; v++) &#123;<br>                <span class="hljs-keyword">if</span> (g[u][v] != -<span class="hljs-number">1</span>) &#123;<br>                    f[v] = (f[v] + f[u]) % (<span class="hljs-type">long</span>) (<span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>);<br>                    <span class="hljs-keyword">if</span> (--deg[v] == <span class="hljs-number">0</span>) &#123;<br>                        queue.add(v);<br>                    &#125;<br>                &#125;<br>                <br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> (<span class="hljs-type">int</span>) f[n - <span class="hljs-number">1</span>];<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>杂项</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode-376</title>
    <link href="/2024/01/03/LeetCode-376/"/>
    <url>/2024/01/03/LeetCode-376/</url>
    
    <content type="html"><![CDATA[<p>本场两道题都与中位数有关，个人感觉第三题会比第四题难想一点，本场整体难度中等</p><p><strong>Q1</strong> <a href="https://leetcode.cn/problems/find-missing-and-repeated-values/">找出缺失和重复的数字</a></p><ul><li><p>给你一个下标从 <strong>0</strong> 开始的二维整数矩阵 <code>grid</code>，大小为 <code>n * n</code> ，其中的值在 <code>[1, n2]</code> 范围内。除了 <code>a</code> 出现 <strong>两次</strong>，<code>b</code> <strong>缺失</strong> 之外，每个整数都 <strong>恰好出现一次</strong> 。</p><p>任务是找出重复的数字<code>a</code> 和缺失的数字 <code>b</code> 。</p><p>返回一个下标从 0 开始、长度为 <code>2</code> 的整数数组 <code>ans</code> ，其中 <code>ans[0]</code> 等于 <code>a</code> ，<code>ans[1]</code> 等于 <code>b</code> 。</p><p><strong>示例 1：</strong></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs inform7">输入：grid = <span class="hljs-comment">[<span class="hljs-comment">[1,3]</span>,<span class="hljs-comment">[2,2]</span>]</span><br>输出：<span class="hljs-comment">[2,4]</span><br>解释：数字 2 重复，数字 4 缺失，所以答案是 <span class="hljs-comment">[2,4]</span> 。<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs inform7">输入：grid = <span class="hljs-comment">[<span class="hljs-comment">[9,1,7]</span>,<span class="hljs-comment">[8,9,2]</span>,<span class="hljs-comment">[3,4,6]</span>]</span><br>输出：<span class="hljs-comment">[9,5]</span><br>解释：数字 9 重复，数字 5 缺失，所以答案是 <span class="hljs-comment">[9,5]</span> 。<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>2 &lt;= n == grid.length == grid[i].length &lt;= 50</code></li><li><code>1 &lt;= grid[i][j] &lt;= n * n</code></li><li>对于所有满足<code>1 &lt;= x &lt;= n * n</code> 的 <code>x</code> ，恰好存在一个 <code>x</code> 与矩阵中的任何成员都不相等。</li><li>对于所有满足<code>1 &lt;= x &lt;= n * n</code> 的 <code>x</code> ，恰好存在一个 <code>x</code> 与矩阵中的两个成员相等。</li><li>除上述的两个之外，对于所有满足<code>1 &lt;= x &lt;= n * n</code> 的 <code>x</code> ，都恰好存在一对 <code>i, j</code> 满足 <code>0 &lt;= i, j &lt;= n - 1</code> 且 <code>grid[i][j] == x</code> 。</li></ul></li></ul><p>使用<code>Set</code>加枚举模拟本题即可解决。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">findMissingAndRepeatedValues</span><span class="hljs-params">(grid: <span class="hljs-type">Array</span>&lt;<span class="hljs-type">IntArray</span>&gt;)</span></span>: IntArray &#123;<br>        <span class="hljs-keyword">val</span> n = grid.size<br>        <span class="hljs-keyword">val</span> s2 = hashSetOf&lt;<span class="hljs-built_in">Int</span>&gt;()<br>        <span class="hljs-keyword">var</span> a = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">var</span> b = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> (g <span class="hljs-keyword">in</span> grid) &#123;<br>            <span class="hljs-keyword">for</span> (i <span class="hljs-keyword">in</span> <span class="hljs-number">0.</span>.&lt;n) &#123;<br>                <span class="hljs-keyword">if</span> (s2.contains(g[i]))<br>                    a = g[i]<br>                s2.add(g[i])<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (x <span class="hljs-keyword">in</span> <span class="hljs-number">1.</span>.n * n) &#123;<br>            <span class="hljs-keyword">if</span> (!s2.contains(x)) &#123;<br>                b = x<br>                <span class="hljs-keyword">break</span><br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> intArrayOf(a, b)<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>Q2</strong> <a href="https://leetcode.cn/problems/divide-array-into-arrays-with-max-difference/">划分数组并满足最大差限制</a></p><ul><li><p>给你一个长度为 <code>n</code> 的整数数组 <code>nums</code>，以及一个正整数 <code>k</code> 。</p><p>将这个数组划分为一个或多个长度为 <code>3</code> 的子数组，并满足以下条件：</p><ul><li><code>nums</code> 中的 <strong>每个</strong> 元素都必须 <strong>恰好</strong> 存在于某个子数组中。</li><li>子数组中 <strong>任意</strong> 两个元素的差必须小于或等于 <code>k</code> 。</li></ul><p>返回一个 <strong>二维数组</strong> ，包含所有的子数组。如果不可能满足条件，就返回一个空数组。如果有多个答案，返回 <strong>任意一个</strong> 即可。</p><p><strong>示例 1：</strong></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs inform7">输入：nums = <span class="hljs-comment">[1,3,4,8,7,9,3,5,1]</span>, k = 2<br>输出：<span class="hljs-comment">[<span class="hljs-comment">[1,1,3]</span>,<span class="hljs-comment">[3,4,5]</span>,<span class="hljs-comment">[7,8,9]</span>]</span><br>解释：可以将数组划分为以下子数组：<span class="hljs-comment">[1,1,3]</span>，<span class="hljs-comment">[3,4,5]</span> 和 <span class="hljs-comment">[7,8,9]</span> 。<br>每个子数组中任意两个元素的差都小于或等于 2 。<br>注意，元素的顺序并不重要。<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs inform7">输入：nums = <span class="hljs-comment">[1,3,3,2,7,3]</span>, k = 3<br>输出：<span class="hljs-comment">[]</span><br>解释：无法划分数组满足所有条件。<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>n == nums.length</code></li><li><code>1 &lt;= n &lt;= 105</code></li><li><code>n</code> 是 <code>3</code> 的倍数</li><li><code>1 &lt;= nums[i] &lt;= 105</code></li><li><code>1 &lt;= k &lt;= 105</code></li></ul></li></ul><p>很容易看出想让相邻的数的差值最小的办法就是排序，排序后模拟一遍过程，即可得到答案。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">divideArray</span><span class="hljs-params">(nums: <span class="hljs-type">IntArray</span>, k: <span class="hljs-type">Int</span>)</span></span>: Array&lt;IntArray&gt; &#123;<br>        nums.sort()<br>        <span class="hljs-keyword">val</span> n = nums.size<br>        <span class="hljs-keyword">val</span> ret = mutableListOf&lt;IntArray&gt;()<br>        <span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">while</span> (i &lt; n) &#123;<br>            <span class="hljs-keyword">if</span> (i + <span class="hljs-number">2</span> &lt; n &amp;&amp; nums[i + <span class="hljs-number">2</span>] - nums[i] &lt;= k) &#123;<br>                ret.add(intArrayOf(nums[i], nums[i + <span class="hljs-number">1</span>], nums[i + <span class="hljs-number">2</span>]))<br>                i += <span class="hljs-number">3</span><br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">return</span> emptyArray()<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ret.toTypedArray()<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>Q3</strong>  <a href="https://leetcode.cn/problems/minimum-cost-to-make-array-equalindromic/">使数组成为等数数组的最小代价</a></p><p>给你一个长度为 <code>n</code> 下标从 <strong>0</strong> 开始的整数数组 <code>nums</code> 。</p><p>你可以对 <code>nums</code> 执行特殊操作 <strong>任意次</strong> （也可以 <strong>0</strong> 次）。每一次特殊操作中，你需要 <strong>按顺序</strong> 执行以下步骤：</p><ul><li>从范围 <code>[0, n - 1]</code> 里选择一个下标 <code>i</code> 和一个 <strong>正</strong> 整数 <code>x</code> 。</li><li>将 <code>|nums[i] - x|</code> 添加到总代价里。</li><li>将 <code>nums[i]</code> 变为 <code>x</code> 。</li></ul><p>如果一个正整数正着读和反着读都相同，那么我们称这个数是 <strong>回文数</strong> 。比方说，<code>121</code> ，<code>2552</code> 和 <code>65756</code> 都是回文数，但是 <code>24</code> ，<code>46</code> ，<code>235</code> 都不是回文数。</p><p>如果一个数组中的所有元素都等于一个整数 <code>y</code> ，且 <code>y</code> 是一个小于 <code>109</code> 的 <strong>回文数</strong> ，那么我们称这个数组是一个 <strong>等数数组</strong> 。</p><p>请你返回一个整数，表示执行任意次特殊操作后使 <code>nums</code> 成为 <strong>等数数组</strong> 的 <strong>最小</strong> 总代价。</p><p><strong>示例 1：</strong></p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">输入：nums = [1,2,3,4,5]<br>输出：6<br>解释：我们可以将数组中所有元素变为回文数 3 得到等数数组，数组变成 [3,3,3,3,3] 需要执行 4 次特殊操作，代价为 |<span class="hljs-string">1 - 3</span>|<span class="hljs-string"> + </span>|<span class="hljs-string">2 - 3</span>|<span class="hljs-string"> + </span>|<span class="hljs-string">4 - 3</span>|<span class="hljs-string"> + </span>|<span class="hljs-string">5 - 3</span>|<span class="hljs-string"> = 6 。</span><br><span class="hljs-string">将所有元素变为其他回文数的总代价都大于 6 。</span><br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">输入：nums = [10,12,13,14,15]<br>输出：11<br>解释：我们可以将数组中所有元素变为回文数 11 得到等数数组，数组变成 [11,11,11,11,11] 需要执行 5 次特殊操作，代价为 |<span class="hljs-string">10 - 11</span>|<span class="hljs-string"> + </span>|<span class="hljs-string">12 - 11</span>|<span class="hljs-string"> + </span>|<span class="hljs-string">13 - 11</span>|<span class="hljs-string"> + </span>|<span class="hljs-string">14 - 11</span>|<span class="hljs-string"> + </span>|<span class="hljs-string">15 - 11</span>|<span class="hljs-string"> = 11 。</span><br><span class="hljs-string">将所有元素变为其他回文数的总代价都大于 11 。</span><br></code></pre></td></tr></table></figure><p><strong>示例 3 ：</strong></p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">输入：nums = [22,33,22,33,22]<br>输出：22<br>解释：我们可以将数组中所有元素变为回文数 22 得到等数数组，数组变为 [22,22,22,22,22] 需要执行 2 次特殊操作，代价为 |<span class="hljs-string">33 - 22</span>|<span class="hljs-string"> + </span>|<span class="hljs-string">33 - 22</span>|<span class="hljs-string"> = 22 。</span><br><span class="hljs-string">将所有元素变为其他回文数的总代价都大于 22 。</span><br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= n &lt;= 105</code></li><li><code>1 &lt;= nums[i] &lt;= 109</code></li></ul><p>本题很容易想到要最终变成的那个数，不能太大，也不能太小，那就先预处理数据范围内的中位数，(起初我并未想到中位数，先无脑写了个三分，然后就错了)，由于是绝对值的差，那么大概率就可以通过排序+前缀和+二分来解决，枚举要变成哪个数就行。如何处理<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mo>−</mo><mn>1</mn><msup><mn>0</mn><mn>9</mn></msup></mrow><annotation encoding="application/x-tex">1-10^9</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">9</span></span></span></span></span></span></span></span></span></span></span>内的回文数呢?由于太菜，只能想到字符串处理，枚举前半部分，拼接后半部分，由于可能是奇数长度或偶数长度，所以枚举的一个数都会变成两个数，这个数据范围试错了好多，后来学习到效率更高的处理方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 预处理</span><br>arr = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">60001</span>):<br>    s = <span class="hljs-built_in">str</span>(i)<br>    arr.append(<span class="hljs-built_in">int</span>(s + s[::-<span class="hljs-number">1</span>]))<br>    arr.append(<span class="hljs-built_in">int</span>(s + s[:<span class="hljs-built_in">len</span>(s) - <span class="hljs-number">1</span>][::-<span class="hljs-number">1</span>]))<br><br>arr.sort()<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">minimumCost</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-built_in">int</span>:<br>        n = <span class="hljs-built_in">len</span>(nums)<br>        l, r = <span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(arr) - <span class="hljs-number">1</span><br>        nums.sort()<br>        s = [<span class="hljs-number">0</span>] * (n + <span class="hljs-number">1</span>)<br>        ans = <span class="hljs-number">10</span> ** <span class="hljs-number">15</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>            s[i + <span class="hljs-number">1</span>] = s[i] + nums[i]<br><br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">get</span>(<span class="hljs-params">k: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>            l, r = <span class="hljs-number">0</span>, n - <span class="hljs-number">1</span><br>            <span class="hljs-keyword">while</span> l &lt; r:<br>                mid = (l + r + <span class="hljs-number">1</span>) // <span class="hljs-number">2</span><br>                <span class="hljs-keyword">if</span> nums[mid] &lt;= k:<br>                    l = mid<br>                <span class="hljs-keyword">else</span>:<br>                    r = mid - <span class="hljs-number">1</span><br>            <span class="hljs-keyword">if</span> nums[l] &gt; k:<br>                <span class="hljs-keyword">return</span> s[n] - k * n<br>            <span class="hljs-keyword">return</span> (l + <span class="hljs-number">1</span>) * k - s[l + <span class="hljs-number">1</span>] + s[n] - s[l + <span class="hljs-number">1</span>] - (n - l - <span class="hljs-number">1</span>) * k<br><br>        <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> arr:<br>            v = get(x)<br>            <span class="hljs-keyword">if</span> v &gt; ans:<br>                <span class="hljs-keyword">return</span> ans <span class="hljs-comment">#大于之后直接返回即可</span><br>            ans = v<br>        <span class="hljs-keyword">return</span> ans<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#更高效率的处理方法，而且不需要排序</span><br>arr = []<br>base = <span class="hljs-number">1</span><br><span class="hljs-keyword">while</span> base &lt;= <span class="hljs-number">10000</span>:<br>    <span class="hljs-comment"># 计算奇数长度</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(base, base * <span class="hljs-number">10</span>):<br>        x = i<br>        t = i // <span class="hljs-number">10</span><br>        <span class="hljs-keyword">while</span> t:<br>            x = x * <span class="hljs-number">10</span> + t % <span class="hljs-number">10</span><br>            t //= <span class="hljs-number">10</span><br>        arr.append(x)<br>    <span class="hljs-comment"># 计算偶数长度</span><br>    <span class="hljs-keyword">if</span> base &lt;= <span class="hljs-number">1000</span>:<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(base, base * <span class="hljs-number">10</span>):<br>            x = t = i<br>            <span class="hljs-keyword">while</span> t:<br>                x = x * <span class="hljs-number">10</span> + t % <span class="hljs-number">10</span><br>                t //= <span class="hljs-number">10</span><br>            arr.append(x)<br>    base *= <span class="hljs-number">10</span><br></code></pre></td></tr></table></figure><p><strong>Q4</strong> <a href="https://leetcode.cn/problems/apply-operations-to-maximize-frequency-score/">执行操作使频率分数最大</a></p><p>给你一个下标从 <strong>0</strong> 开始的整数数组 <code>nums</code> 和一个整数 <code>k</code> 。</p><p>你可以对数组执行 <strong>至多</strong> <code>k</code> 次操作：</p><ul><li>从数组中选择一个下标 <code>i</code> ，将 <code>nums[i]</code> <strong>增加</strong> 或者 <strong>减少</strong> <code>1</code> 。</li></ul><p>最终数组的频率分数定义为数组中众数的 <strong>频率</strong> 。</p><p>请你返回你可以得到的 <strong>最大</strong> 频率分数。</p><p>众数指的是数组中出现次数最多的数。一个元素的频率指的是数组中这个元素的出现次数。</p><p><strong>示例 1：</strong></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs stylus">输入：nums = <span class="hljs-selector-attr">[1,2,6,4]</span>, k = <span class="hljs-number">3</span><br>输出：<span class="hljs-number">3</span><br>解释：我们可以对数组执行以下操作：<br>- 选择 <span class="hljs-selector-tag">i</span> = <span class="hljs-number">0</span> ，将 nums<span class="hljs-selector-attr">[0]</span> 增加 <span class="hljs-number">1</span> 。得到数组 <span class="hljs-selector-attr">[2,2,6,4]</span> 。<br>- 选择 <span class="hljs-selector-tag">i</span> = <span class="hljs-number">3</span> ，将 nums<span class="hljs-selector-attr">[3]</span> 减少 <span class="hljs-number">1</span> ，得到数组 <span class="hljs-selector-attr">[2,2,6,3]</span> 。<br>- 选择 <span class="hljs-selector-tag">i</span> = <span class="hljs-number">3</span> ，将 nums<span class="hljs-selector-attr">[3]</span> 减少 <span class="hljs-number">1</span> ，得到数组 <span class="hljs-selector-attr">[2,2,6,2]</span> 。<br>元素 <span class="hljs-number">2</span> 是最终数组中的众数，出现了 <span class="hljs-number">3</span> 次，所以频率分数为 <span class="hljs-number">3</span> 。<br><span class="hljs-number">3</span> 是所有可行方案里的最大频率分数。<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs accesslog">输入：nums = <span class="hljs-string">[1,4,4,2,4]</span>, k = <span class="hljs-number">0</span><br>输出：<span class="hljs-number">3</span><br>解释：我们无法执行任何操作，所以得到的频率分数是原数组中众数的频率 <span class="hljs-number">3</span> 。<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 105</code></li><li><code>1 &lt;= nums[i] &lt;= 109</code></li><li><code>0 &lt;= k &lt;= 1014</code></li></ul><p>使用二分+滑窗+前缀和处理。本题不能向上个题一样枚举变成哪个数，而是要枚举答案，其他的就很好想了，一段已经排好序的数中变成中位数的绝对值差肯定最小，然后前缀和思想和之前的题是一样的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">maxFrequencyScore</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>], k: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>        nums.sort()<br>        n = <span class="hljs-built_in">len</span>(nums)<br>        s = [<span class="hljs-number">0</span>] * (n + <span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>            s[i + <span class="hljs-number">1</span>] = s[i] + nums[i]<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        贪心的将所有数变为中位数</span><br><span class="hljs-string">        固定窗口的滑窗</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br><br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">check</span>(<span class="hljs-params">v: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">bool</span>:<br>            le, ri = <span class="hljs-number">0</span>, v - <span class="hljs-number">1</span><br>            mid = (le + ri) // <span class="hljs-number">2</span><br>            <span class="hljs-keyword">if</span> nums[mid] * (mid - le + <span class="hljs-number">1</span>) - (s[mid + <span class="hljs-number">1</span>] - s[le]) + (<br>                    s[ri + <span class="hljs-number">1</span>] - s[mid + <span class="hljs-number">1</span>] - nums[mid] * (ri - mid)) &lt;= k:<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(ri + <span class="hljs-number">1</span>, n):<br>                ll, rr = i - v + <span class="hljs-number">1</span>, i<br>                mm = (ll + rr) // <span class="hljs-number">2</span><br>                <span class="hljs-keyword">if</span> nums[mm] * (mm - ll + <span class="hljs-number">1</span>) - (s[mm + <span class="hljs-number">1</span>] - s[ll]) + (s[rr + <span class="hljs-number">1</span>] - s[mm + <span class="hljs-number">1</span>] - nums[mm] * (rr - mm)) &lt;= k:<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br>        l, r = <span class="hljs-number">0</span>, n<br>        <span class="hljs-keyword">while</span> l &lt; r:<br>            mid = (l + r + <span class="hljs-number">1</span>) // <span class="hljs-number">2</span><br>            <span class="hljs-keyword">if</span> check(mid):<br>                l = mid<br>            <span class="hljs-keyword">else</span>:<br>                r = mid - <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> l<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>leetcode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode-375</title>
    <link href="/2023/12/31/LeetCode-375/"/>
    <url>/2023/12/31/LeetCode-375/</url>
    
    <content type="html"><![CDATA[<p>比较简单的一场，最高rating不到2000</p><p><strong>Q1</strong> <a href="https://leetcode.cn/problems/count-tested-devices-after-test-operations/">统计已测试设备</a></p><ul><li><p>给你一个长度为 <code>n</code> 、下标从 <strong>0</strong> 开始的整数数组 <code>batteryPercentages</code> ，表示 <code>n</code> 个设备的电池百分比。</p><p>你的任务是按照顺序测试每个设备 <code>i</code>，执行以下测试操作：</p><ul><li><p>如果</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">batteryPercentages<span class="hljs-selector-attr">[i]</span><br></code></pre></td></tr></table></figure><p>大于</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">0<br></code></pre></td></tr></table></figure><p>：</p><ul><li><strong>增加</strong> 已测试设备的计数。</li><li>将下标在 <code>[i + 1, n - 1]</code> 的所有设备的电池百分比减少 <code>1</code>，确保它们的电池百分比 <strong>不会低于</strong> <code>0</code> ，即 <code>batteryPercentages[j] = max(0, batteryPercentages[j] - 1)</code>。</li><li>移动到下一个设备。</li></ul></li><li><p>否则，移动到下一个设备而不执行任何测试。</p></li></ul><p>返回一个整数，表示按顺序执行测试操作后 <strong>已测试设备</strong> 的数量。</p><p><strong>示例 1：</strong></p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs tap">输入：batteryPercentages = [1,1,2,1,3]<br>输出：3<br>解释：按顺序从设备<span class="hljs-number"> 0 </span>开始执行测试操作：<br>在设备<span class="hljs-number"> 0 </span>上，batteryPercentages[0] &gt;<span class="hljs-number"> 0 </span>，现在有<span class="hljs-number"> 1 </span>个已测试设备，batteryPercentages 变为 [1,0,1,0,2] 。<br>在设备<span class="hljs-number"> 1 </span>上，batteryPercentages[1] ==<span class="hljs-number"> 0 </span>，移动到下一个设备而不进行测试。<br>在设备<span class="hljs-number"> 2 </span>上，batteryPercentages[2] &gt;<span class="hljs-number"> 0 </span>，现在有<span class="hljs-number"> 2 </span>个已测试设备，batteryPercentages 变为 [1,0,1,0,1] 。<br>在设备<span class="hljs-number"> 3 </span>上，batteryPercentages[3] ==<span class="hljs-number"> 0 </span>，移动到下一个设备而不进行测试。<br>在设备<span class="hljs-number"> 4 </span>上，batteryPercentages[4] &gt;<span class="hljs-number"> 0 </span>，现在有<span class="hljs-number"> 3 </span>个已测试设备，batteryPercentages 保持不变。<br>因此，答案是<span class="hljs-number"> 3 </span>。<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs tap">输入：batteryPercentages = [0,1,2]<br>输出：2<br>解释：按顺序从设备<span class="hljs-number"> 0 </span>开始执行测试操作：<br>在设备<span class="hljs-number"> 0 </span>上，batteryPercentages[0] ==<span class="hljs-number"> 0 </span>，移动到下一个设备而不进行测试。<br>在设备<span class="hljs-number"> 1 </span>上，batteryPercentages[1] &gt;<span class="hljs-number"> 0 </span>，现在有<span class="hljs-number"> 1 </span>个已测试设备，batteryPercentages 变为 [0,1,1] 。<br>在设备<span class="hljs-number"> 2 </span>上，batteryPercentages[2] &gt;<span class="hljs-number"> 0 </span>，现在有<span class="hljs-number"> 2 </span>个已测试设备，batteryPercentages 保持不变。<br>因此，答案是<span class="hljs-number"> 2 </span>。<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= n == batteryPercentages.length &lt;= 100 </code></li><li><code>0 &lt;= batteryPercentages[i] &lt;= 100</code></li></ul></li></ul><p>简单题，由于数据范围只有100，双重for循环即可，数据范围如果变大可以使用前缀和优化，假设<code>s[i]</code>表示小于<code>i</code>的下标的和(大于1都看做1)，若<code>nums[i] &gt; s[i]</code>则可以测试。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">countTestedDevices</span><span class="hljs-params">(batteryPercentages: <span class="hljs-type">IntArray</span>)</span></span>: <span class="hljs-built_in">Int</span> &#123;<br>        <span class="hljs-keyword">val</span> n = batteryPercentages.size<br>        <span class="hljs-keyword">var</span> ans = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> (i <span class="hljs-keyword">in</span> <span class="hljs-number">0.</span>.&lt;n) &#123;<br>            <span class="hljs-keyword">if</span> (batteryPercentages[i] &gt; <span class="hljs-number">0</span>) &#123;<br>                ans++<br>                <span class="hljs-keyword">for</span> (j <span class="hljs-keyword">in</span> i + <span class="hljs-number">1.</span>.&lt;n) &#123;<br>                    batteryPercentages[j] = max(<span class="hljs-number">0</span>, batteryPercentages[j] - <span class="hljs-number">1</span>)<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>Q2</strong> <a href="https://leetcode.cn/problems/double-modular-exponentiation/">双模幂运算</a></p><p>给你一个下标从 <strong>0</strong> 开始的二维数组 <code>variables</code> ，其中 <code>variables[i] = [ai, bi, ci, mi]</code>，以及一个整数 <code>target</code> 。</p><p>如果满足以下公式，则下标 <code>i</code> 是 <strong>好下标</strong>：</p><ul><li><code>0 &lt;= i &lt; variables.length</code></li><li><code>((aibi % 10)ci) % mi == target</code></li></ul><p>返回一个由 <strong>好下标</strong> 组成的数组，<strong>顺序不限</strong> 。</p><p><strong>示例 1：</strong></p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs prolog">输入：variables = [[<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">10</span>],[<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>],[<span class="hljs-number">6</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">4</span>]], target = <span class="hljs-number">2</span><br>输出：[<span class="hljs-number">0</span>,<span class="hljs-number">2</span>]<br>解释：对于 variables 数组中的每个下标 i ：<br><span class="hljs-number">1</span>) 对于下标 <span class="hljs-number">0</span> ，variables[<span class="hljs-number">0</span>] = [<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">10</span>] ，(<span class="hljs-number">23</span> <span class="hljs-comment">% 10)3 % 10 = 2 。</span><br><span class="hljs-number">2</span>) 对于下标 <span class="hljs-number">1</span> ，variables[<span class="hljs-number">1</span>] = [<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>] ，(<span class="hljs-number">33</span> <span class="hljs-comment">% 10)3 % 1 = 0 。</span><br><span class="hljs-number">3</span>) 对于下标 <span class="hljs-number">2</span> ，variables[<span class="hljs-number">2</span>] = [<span class="hljs-number">6</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">4</span>] ，(<span class="hljs-number">61</span> <span class="hljs-comment">% 10)1 % 4 = 2 。</span><br>因此，返回 [<span class="hljs-number">0</span>,<span class="hljs-number">2</span>] 作为答案。<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs prolog">输入：variables = [[<span class="hljs-number">39</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1000</span>,<span class="hljs-number">1000</span>]], target = <span class="hljs-number">17</span><br>输出：[]<br>解释：对于 variables 数组中的每个下标 i ：<br><span class="hljs-number">1</span>) 对于下标 <span class="hljs-number">0</span> ，variables[<span class="hljs-number">0</span>] = [<span class="hljs-number">39</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1000</span>,<span class="hljs-number">1000</span>] ，(<span class="hljs-number">393</span> <span class="hljs-comment">% 10)1000 % 1000 = 1 。</span><br>因此，返回 [] 作为答案。<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= variables.length &lt;= 100</code></li><li><code>variables[i] == [ai, bi, ci, mi]</code></li><li><code>1 &lt;= ai, bi, ci, mi &lt;= 103</code></li><li><code>0 &lt;= target &lt;= 103</code></li></ul><p>观察数据范围，不可以暴力，那就快速幂了，需要注意到括号内的都是同余的。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">getGoodIndices</span><span class="hljs-params">(variables: <span class="hljs-type">Array</span>&lt;<span class="hljs-type">IntArray</span>&gt;, target: <span class="hljs-type">Int</span>)</span></span>: List&lt;<span class="hljs-built_in">Int</span>&gt; &#123;<br>        <span class="hljs-keyword">val</span> filter = variables.indices.filter &#123; i -&gt;<br>            <span class="hljs-keyword">val</span> (a, b, c, m) = variables[i]<br>            qmi(qmi(a, b, <span class="hljs-number">10</span>), c, m) == target<br>        &#125;<br>        <span class="hljs-keyword">return</span> filter<br>    &#125;<br><br><br>    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">qmi</span><span class="hljs-params">(a: <span class="hljs-type">Int</span>, b: <span class="hljs-type">Int</span>, mod: <span class="hljs-type">Int</span>)</span></span>: <span class="hljs-built_in">Int</span> &#123;<br>        <span class="hljs-keyword">var</span> ans = <span class="hljs-number">1</span><br>        <span class="hljs-keyword">var</span> bb = b<br>        <span class="hljs-keyword">var</span> aa = a<br>        <span class="hljs-keyword">while</span> (bb != <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">if</span> ((bb and <span class="hljs-number">1</span>) == <span class="hljs-number">1</span>) &#123;<br>                ans = ans.times(aa).rem(mod)<br>            &#125;<br>            aa = aa.times(aa).rem(mod)<br>            bb = bb shr <span class="hljs-number">1</span><br>        &#125;<br>        <span class="hljs-keyword">return</span> ans.rem(mod)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>Q3</strong>  <a href="https://leetcode.cn/problems/count-subarrays-where-max-element-appears-at-least-k-times/">统计最大元素出现至少 K 次的子数组</a></p><ul><li><p>给你一个整数数组 <code>nums</code> 和一个 <strong>正整数</strong> <code>k</code> 。</p><p>请你统计有多少满足 「 <code>nums</code> 中的 <strong>最大</strong> 元素」至少出现 <code>k</code> 次的子数组，并返回满足这一条件的子数组的数目。</p><p>子数组是数组中的一个连续元素序列。</p><p><strong>示例 1：</strong></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs inform7">输入：nums = <span class="hljs-comment">[1,3,2,3,3]</span>, k = 2<br>输出：6<br>解释：包含元素 3 至少 2 次的子数组为：<span class="hljs-comment">[1,3,2,3]</span>、<span class="hljs-comment">[1,3,2,3,3]</span>、<span class="hljs-comment">[3,2,3]</span>、<span class="hljs-comment">[3,2,3,3]</span>、<span class="hljs-comment">[2,3,3]</span> 和 <span class="hljs-comment">[3,3]</span> 。<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs tap">输入：nums = [1,4,2,1], k = 3<br>输出：0<br>解释：没有子数组包含元素<span class="hljs-number"> 4 </span>至少<span class="hljs-number"> 3 </span>次。<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 105</code></li><li><code>1 &lt;= nums[i] &lt;= 106</code></li><li><code>1 &lt;= k &lt;= 105</code></li></ul></li></ul><p>滑窗(双指针)，二分都可以做，需要一点小小的灵性。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-comment">//滑窗</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">countSubarrays</span><span class="hljs-params">(nums: <span class="hljs-type">IntArray</span>, k: <span class="hljs-type">Int</span>)</span></span>: <span class="hljs-built_in">Long</span> &#123;<br>        <span class="hljs-keyword">val</span> max = nums.max()<br>        <span class="hljs-keyword">var</span> l = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">var</span> ans: <span class="hljs-built_in">Long</span> = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">var</span> cnt = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> (x <span class="hljs-keyword">in</span> nums) &#123;<br>            <span class="hljs-keyword">if</span> (x == max) cnt++<br>            <span class="hljs-keyword">while</span> (cnt == k) &#123;<br>                <span class="hljs-keyword">if</span> (nums[l++] == max) cnt--  <br>            &#125;<br>            ans += l  <span class="hljs-comment">//反过来想使用滑窗就很好写了</span><br>        &#125;<br>        <span class="hljs-keyword">return</span> ans<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//二分</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">long</span> <span class="hljs-title function_">countSubarrays</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> k)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">max</span> <span class="hljs-operator">=</span> Arrays.stream(nums).max().getAsInt();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> nums.length;<br>        <span class="hljs-type">int</span>[] f = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n];<br>        f[<span class="hljs-number">0</span>] = nums[<span class="hljs-number">0</span>] == max ? <span class="hljs-number">1</span> : <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; n; i++) &#123;<br>            f[i] = f[i - <span class="hljs-number">1</span>] + (nums[i] == max ? <span class="hljs-number">1</span> : <span class="hljs-number">0</span>);<br>        &#125;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">ans</span> <span class="hljs-operator">=</span> <span class="hljs-number">0L</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">l</span> <span class="hljs-operator">=</span> i, r = n - <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">while</span> (l &lt; r) &#123;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">mid</span> <span class="hljs-operator">=</span> l + r &gt;&gt; <span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">if</span> (check(i, mid, f, k)) r = mid;<br>                <span class="hljs-keyword">else</span> l = mid + <span class="hljs-number">1</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (check(i, l, f, k)) ans += n - l;  <span class="hljs-comment">//其实从二分的过程种很容易联想到双指针</span><br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br><br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">check</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span>[] f, <span class="hljs-type">int</span> k)</span> &#123;<br>        <span class="hljs-keyword">if</span> (l == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> f[r] &gt;= k;<br>        <span class="hljs-keyword">return</span> f[r] - f[l - <span class="hljs-number">1</span>] &gt;= k;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>Q4</strong>  <a href="https://leetcode.cn/problems/count-the-number-of-good-partitions/">统计好分割方案的数目</a></p><ul><li><p>给你一个下标从 <strong>0</strong> 开始、由 <strong>正整数</strong> 组成的数组 <code>nums</code>。</p><p>将数组分割成一个或多个 <strong>连续</strong> 子数组，如果不存在包含了相同数字的两个子数组，则认为是一种 <strong>好分割方案</strong> 。</p><p>返回 <code>nums</code> 的 <strong>好分割方案</strong> 的 <strong>数目</strong>。</p><p>由于答案可能很大，请返回答案对 <code>109 + 7</code> <strong>取余</strong> 的结果。</p><p><strong>示例 1：</strong></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs inform7">输入：nums = <span class="hljs-comment">[1,2,3,4]</span><br>输出：8<br>解释：有 8 种 好分割方案 ：(<span class="hljs-comment">[1]</span>, <span class="hljs-comment">[2]</span>, <span class="hljs-comment">[3]</span>, <span class="hljs-comment">[4]</span>), (<span class="hljs-comment">[1]</span>, <span class="hljs-comment">[2]</span>, <span class="hljs-comment">[3,4]</span>), (<span class="hljs-comment">[1]</span>, <span class="hljs-comment">[2,3]</span>, <span class="hljs-comment">[4]</span>), (<span class="hljs-comment">[1]</span>, <span class="hljs-comment">[2,3,4]</span>), (<span class="hljs-comment">[1,2]</span>, <span class="hljs-comment">[3]</span>, <span class="hljs-comment">[4]</span>), (<span class="hljs-comment">[1,2]</span>, <span class="hljs-comment">[3,4]</span>), (<span class="hljs-comment">[1,2,3]</span>, <span class="hljs-comment">[4]</span>) 和 (<span class="hljs-comment">[1,2,3,4]</span>) 。<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dns">输入：nums = [<span class="hljs-number">1,1,1,1</span>]<br>输出：<span class="hljs-number">1</span><br>解释：唯一的 好分割方案 是：([<span class="hljs-number">1,1,1,1</span>]) 。<br></code></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs inform7">输入：nums = <span class="hljs-comment">[1,2,1,3]</span><br>输出：2<br>解释：有 2 种 好分割方案 ：(<span class="hljs-comment">[1,2,1]</span>, <span class="hljs-comment">[3]</span>) 和 (<span class="hljs-comment">[1,2,1,3]</span>) 。<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 105</code></li><li><code>1 &lt;= nums[i] &lt;= 109</code></li></ul></li></ul><p>本题是一道不怎么难的困难题，对于这种题，首先想到区间DP，但看了看数据范围，就可以排除这个做法了。对于本题，我们可以将整个数组分成若干个子数组，<strong>子数组中的所有数当且仅当在该数组中出现</strong>，分割的方法就是使用一个map记录所有数最后出现的下标，然后遍历就可以分割了。假设分割成n块，那答案是多少呢?</p><p>假设数组 nums 包含 n 个元素，则我们可以通过以下步骤来证明好分割方案数量为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mi>n</mi></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">2^n-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7477em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span>：</p><ol><li><p>当 n=1 时，只有一个元素，只有一种好分割方案：([1])。这时 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mn>1</mn></msup><mo>−</mo><mn>1</mn><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">2^1-1=1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span>，符合结论。</p></li><li><p>假设当 n=k 时结论成立，即 nums 包含 k 个元素时好分割方案数量为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mi>k</mi></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">2^k-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9324em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span>。</p></li><li><p>考虑 n=k+1 的情况，我们可以将 nums 划分为两部分：左侧包含前 k 个元素，右侧包含最后一个元素。那么好分割方案要么只在左侧，要么包含右侧的最后一个元素。</p><ul><li>只在左侧的好分割方案数量为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mi>k</mi></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">2^k-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9324em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span>（根据假设）。</li><li>包含右侧的最后一个元素的好分割方案数量也为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mi>k</mi></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">2^k-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9324em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span>（因为对于左侧的每种好分割方案，都可以选择是否包含右侧的最后一个元素）。</li></ul><p>因此，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>=</mo><mi>k</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">n=k+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7778em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span> 时好分割方案的数量为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>2</mn><mo>∗</mo><mo stretchy="false">(</mo><msup><mn>2</mn><mi>k</mi></msup><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo>=</mo><msup><mn>2</mn><mo stretchy="false">(</mo></msup><mi>k</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">2*(2^k-1)=2^(k+1)-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.0991em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.9713em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.888em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mopen mtight">(</span></span></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span>，符合结论。</p></li></ol><p>根据上述归纳法证明，我们可以得出结论：对于包含 n 个元素的数组 nums，它的好分割方案数量为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mi>n</mi></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">2^n-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7477em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span>。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><br>    <span class="hljs-keyword">val</span> mod: <span class="hljs-built_in">Long</span> = (<span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>).toLong()<br><br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">numberOfGoodPartitions</span><span class="hljs-params">(nums: <span class="hljs-type">IntArray</span>)</span></span>: <span class="hljs-built_in">Int</span> &#123;<br>        <span class="hljs-keyword">val</span> map = hashMapOf&lt;<span class="hljs-built_in">Int</span>, <span class="hljs-built_in">Int</span>&gt;()<br>        <span class="hljs-keyword">val</span> n = nums.size<br>        <span class="hljs-keyword">for</span> (i <span class="hljs-keyword">in</span> <span class="hljs-number">0.</span>.&lt;n) map[nums[i]] = i<br>        <span class="hljs-keyword">var</span> ans = <span class="hljs-number">0L</span><br>        <span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">while</span> (i &lt; n) &#123;<br>            <span class="hljs-keyword">var</span> idx = map[nums[i]] ?: <span class="hljs-number">0</span><br>            <span class="hljs-keyword">while</span> (i &lt; idx) &#123;<br>                i++<br>                idx = maxOf(idx, map[nums[i]]!!)<br>            &#125;<br>            ans++<br>            i = idx + <span class="hljs-number">1</span><br>        &#125;<br>        <span class="hljs-keyword">return</span> qmi((ans - <span class="hljs-number">1</span>).toLong()).toInt()<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">qmi</span><span class="hljs-params">(b: <span class="hljs-type">Long</span>)</span></span>: <span class="hljs-built_in">Long</span> &#123;<br>        <span class="hljs-keyword">var</span> ans = <span class="hljs-number">1L</span><br>        <span class="hljs-keyword">var</span> a = <span class="hljs-number">2L</span><br>        <span class="hljs-keyword">var</span> bb = b<br>        <span class="hljs-keyword">while</span> (bb != <span class="hljs-number">0L</span>) &#123;<br>            <span class="hljs-keyword">if</span> (bb and <span class="hljs-number">1L</span> == <span class="hljs-number">1L</span>) &#123;<br>                ans = ans * a % mod<br>            &#125;<br>            a = a * a % mod<br>            bb = bb shr <span class="hljs-number">1</span><br>        &#125;<br>        <span class="hljs-keyword">return</span> ans % mod<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>leetcode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode-W119</title>
    <link href="/2023/12/31/LeetCode-W119/"/>
    <url>/2023/12/31/LeetCode-W119/</url>
    
    <content type="html"><![CDATA[<p>比较简单的一场，前3题rating竟然都没过1600</p><p><strong>Q1</strong> <a href="https://leetcode.cn/problems/find-common-elements-between-two-arrays/">找到两个数组中的公共元素</a></p><p>给你两个下标从 <strong>0</strong> 开始的整数数组 <code>nums1</code> 和 <code>nums2</code> ，它们分别含有 <code>n</code> 和 <code>m</code> 个元素。</p><p>请你计算以下两个数值：</p><ul><li>统计 <code>0 &lt;= i &lt; n</code> 中的下标 <code>i</code> ，满足 <code>nums1[i]</code> 在 <code>nums2</code> 中 <strong>至少</strong> 出现了一次。</li><li>统计 <code>0 &lt;= i &lt; m</code> 中的下标 <code>i</code> ，满足 <code>nums2[i]</code> 在 <code>nums1</code> 中 <strong>至少</strong> 出现了一次。</li></ul><p>请你返回一个长度为 <code>2</code> 的整数数组 <code>answer</code> ，<strong>按顺序</strong> 分别为以上两个数值。</p><p><strong>示例 1：</strong></p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs gcode">输入：<span class="hljs-symbol">nums1</span> = [<span class="hljs-number">4</span>,<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>], <span class="hljs-symbol">nums2</span> = [<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">5</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">6</span>]<br>输出：[<span class="hljs-number">3</span>,<span class="hljs-number">4</span>]<br>解释：分别计算两个数值：<br>- <span class="hljs-symbol">nums1</span> 中下标为 <span class="hljs-number">1</span> ，<span class="hljs-number">2</span> 和 <span class="hljs-number">3</span> 的元素在 <span class="hljs-symbol">nums2</span> 中至少出现了一次，所以第一个值为 <span class="hljs-number">3</span> 。<br>- <span class="hljs-symbol">nums2</span> 中下标为 <span class="hljs-number">0</span> ，<span class="hljs-number">1</span> ，<span class="hljs-number">3</span> 和 <span class="hljs-number">4</span> 的元素在 <span class="hljs-symbol">nums1</span> 中至少出现了一次，所以第二个值为 <span class="hljs-number">4</span> 。<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs inform7">输入：nums1 = <span class="hljs-comment">[3,4,2,3]</span>, nums2 = <span class="hljs-comment">[1,5]</span><br>输出：<span class="hljs-comment">[0,0]</span><br>解释：两个数组中没有公共元素，所以两个值都为 0 。<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>n == nums1.length</code></li><li><code>m == nums2.length</code></li><li><code>1 &lt;= n, m &lt;= 100</code></li><li><code>1 &lt;= nums1[i], nums2[i] &lt;= 100</code></li></ul><p>简单题，两个set互相遍历即可</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">findIntersectionValues</span><span class="hljs-params">(nums1: <span class="hljs-type">IntArray</span>, nums2: <span class="hljs-type">IntArray</span>)</span></span>: IntArray &#123;<br>        <span class="hljs-keyword">val</span> s1 = nums1.toSet()<br>        <span class="hljs-keyword">val</span> s2 = nums2.toSet()<br>        <span class="hljs-keyword">val</span> ret = IntArray(<span class="hljs-number">2</span>)<br>        <span class="hljs-keyword">for</span> (s <span class="hljs-keyword">in</span> nums1) <span class="hljs-keyword">if</span> (s <span class="hljs-keyword">in</span> s2) ret[<span class="hljs-number">0</span>]++<br>        <span class="hljs-keyword">for</span> (s <span class="hljs-keyword">in</span> nums2) <span class="hljs-keyword">if</span> (s <span class="hljs-keyword">in</span> s1) ret[<span class="hljs-number">1</span>]++<br>        <span class="hljs-keyword">return</span> ret<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>Q2</strong> <a href="https://leetcode.cn/problems/remove-adjacent-almost-equal-characters/">消除相邻近似相等字符</a></p><p>给你一个下标从 <strong>0</strong> 开始的字符串 <code>word</code> 。</p><p>一次操作中，你可以选择 <code>word</code> 中任意一个下标 <code>i</code> ，将 <code>word[i]</code> 修改成任意一个小写英文字母。</p><p>请你返回消除 <code>word</code> 中所有相邻 <strong>近似相等</strong> 字符的 <strong>最少</strong> 操作次数。</p><p>两个字符 <code>a</code> 和 <code>b</code> 如果满足 <code>a == b</code> 或者 <code>a</code> 和 <code>b</code> 在字母表中是相邻的，那么我们称它们是 <strong>近似相等</strong> 字符。</p><p><strong>示例 1：</strong></p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs applescript">输入：<span class="hljs-built_in">word</span> = <span class="hljs-string">&quot;aaaaa&quot;</span><br>输出：<span class="hljs-number">2</span><br>解释：我们将 <span class="hljs-built_in">word</span> 变为 <span class="hljs-string">&quot;acaca&quot;</span> ，该字符串没有相邻近似相等字符。<br>消除 <span class="hljs-built_in">word</span> 中所有相邻近似相等字符最少需要 <span class="hljs-number">2</span> 次操作。<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs applescript">输入：<span class="hljs-built_in">word</span> = <span class="hljs-string">&quot;abddez&quot;</span><br>输出：<span class="hljs-number">2</span><br>解释：我们将 <span class="hljs-built_in">word</span> 变为 <span class="hljs-string">&quot;ybdoez&quot;</span> ，该字符串没有相邻近似相等字符。<br>消除 <span class="hljs-built_in">word</span> 中所有相邻近似相等字符最少需要 <span class="hljs-number">2</span> 次操作。<br></code></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs applescript">输入：<span class="hljs-built_in">word</span> = <span class="hljs-string">&quot;zyxyxyz&quot;</span><br>输出：<span class="hljs-number">3</span><br>解释：我们将 <span class="hljs-built_in">word</span> 变为 <span class="hljs-string">&quot;zaxaxaz&quot;</span> ，该字符串没有相邻近似相等字符。<br>消除 <span class="hljs-built_in">word</span> 中所有相邻近似相等字符最少需要 <span class="hljs-number">3</span> 次操作<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= word.length &lt;= 100</code></li><li><code>word</code> 只包含小写英文字母。</li></ul><p>贪心，思维题。从左往右遍历，当遇到下标<code>i</code>和 <code>i + 1</code>的字母不符合条件时贪心的将<code>i + 1</code>的修改，因为<code>i + 1</code>和<code>i + 2</code>可能也不符合，我们无需考虑修改成什么字符，一定可以修改成既满足<code>i</code>和<code>i + 1</code>又满足<code>i + 1</code>和<code>i + 2</code>。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">import</span> kotlin.math.abs<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">removeAlmostEqualCharacters</span><span class="hljs-params">(word: <span class="hljs-type">String</span>)</span></span>: <span class="hljs-built_in">Int</span> &#123;<br>        <span class="hljs-keyword">val</span> chars = word.toCharArray()<br>        <span class="hljs-keyword">val</span> len = word.length<br>        <span class="hljs-keyword">var</span> ans = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">while</span> (i &lt; len - <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">if</span> (check(chars[i], chars[i + <span class="hljs-number">1</span>])) &#123;<br>                i += <span class="hljs-number">2</span><br>                ans++<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                i++<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">check</span><span class="hljs-params">(c1: <span class="hljs-type">Char</span>, c2: <span class="hljs-type">Char</span>)</span></span>: <span class="hljs-built_in">Boolean</span> &#123;<br>        <span class="hljs-keyword">val</span> i = c1 - c2<br>        <span class="hljs-keyword">return</span> abs(i) &lt;= <span class="hljs-number">1</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>Q3</strong>  <a href="https://leetcode.cn/problems/length-of-longest-subarray-with-at-most-k-frequency/">最多 K 个重复元素的最长子数组</a></p><p>给你一个整数数组 <code>nums</code> 和一个整数 <code>k</code> 。</p><p>一个元素 <code>x</code> 在数组中的 <strong>频率</strong> 指的是它在数组中的出现次数。</p><p>如果一个数组中所有元素的频率都 <strong>小于等于</strong> <code>k</code> ，那么我们称这个数组是 <strong>好</strong> 数组。</p><p>请你返回 <code>nums</code> 中 <strong>最长好</strong> 子数组的长度。</p><p><strong>子数组</strong> 指的是一个数组中一段连续非空的元素序列。</p><p><strong>示例 1：</strong></p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dns">输入：nums = [<span class="hljs-number">1,2,3,1</span>,<span class="hljs-number">2,3,1,2</span>], k = <span class="hljs-number">2</span><br>输出：<span class="hljs-number">6</span><br>解释：最长好子数组是 [<span class="hljs-number">1,2,3,1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>] ，值 <span class="hljs-number">1</span> ，<span class="hljs-number">2</span> 和 <span class="hljs-number">3</span> 在子数组中的频率都没有超过 k = <span class="hljs-number">2</span> 。[<span class="hljs-number">2,3,1,2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>] 和 [<span class="hljs-number">3,1,2,3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>] 也是好子数组。<br>最长好子数组的长度为 <span class="hljs-number">6</span> 。<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs tap">输入：nums = [1,2,1,2,1,2,1,2], k = 1<br>输出：2<br>解释：最长好子数组是 [1,2] ，值<span class="hljs-number"> 1 </span>和<span class="hljs-number"> 2 </span>在子数组中的频率都没有超过 k =<span class="hljs-number"> 1 </span>。[2,1] 也是好子数组。<br>最长好子数组的长度为<span class="hljs-number"> 2 </span>。<br></code></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs tap">输入：nums = [5,5,5,5,5,5,5], k = 4<br>输出：4<br>解释：最长好子数组是 [5,5,5,5] ，值<span class="hljs-number"> 5 </span>在子数组中的频率没有超过 k =<span class="hljs-number"> 4 </span>。<br>最长好子数组的长度为<span class="hljs-number"> 4 </span>。<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 105</code></li><li><code>1 &lt;= nums[i] &lt;= 109</code></li><li><code>1 &lt;= k &lt;= nums.length</code></li></ul><p>这种滑动窗口上LC上太多了，所以本题作为Q3连1600都不到的原因。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">maxSubarrayLength</span><span class="hljs-params">(nums: <span class="hljs-type">IntArray</span>, k: <span class="hljs-type">Int</span>)</span></span>: <span class="hljs-built_in">Int</span> &#123;<br>        <span class="hljs-keyword">var</span> ans = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">val</span> n = nums.size<br>        <span class="hljs-keyword">val</span> mp = hashMapOf&lt;<span class="hljs-built_in">Int</span>, <span class="hljs-built_in">Int</span>&gt;()<br>        <span class="hljs-keyword">var</span> l = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> (r <span class="hljs-keyword">in</span> <span class="hljs-number">0.</span>.&lt;n) &#123;<br>            mp[nums[r]] = mp.getOrDefault(nums[r], <span class="hljs-number">0</span>) + <span class="hljs-number">1</span><br>            <span class="hljs-keyword">while</span> (mp[nums[r]]!! &gt; k) &#123;<br>                mp[nums[l]] = mp[nums[l]]!! - <span class="hljs-number">1</span><br>                l++<br>            &#125;<br>            ans = maxOf(ans, r - l + <span class="hljs-number">1</span>)<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>Q4</strong>  <a href="https://leetcode.cn/problems/number-of-possible-sets-of-closing-branches/">关闭分部的可行集合数目</a></p><p>一个公司在全国有 <code>n</code> 个分部，它们之间有的有道路连接。一开始，所有分部通过这些道路两两之间互相可以到达。</p><p>公司意识到在分部之间旅行花费了太多时间，所以它们决定关闭一些分部（<strong>也可能不关闭任何分部</strong>），同时保证剩下的分部之间两两互相可以到达且最远距离不超过 <code>maxDistance</code> 。</p><p>两个分部之间的 <strong>距离</strong> 是通过道路长度之和的 <strong>最小值</strong> 。</p><p>给你整数 <code>n</code> ，<code>maxDistance</code> 和下标从 <strong>0</strong> 开始的二维整数数组 <code>roads</code> ，其中 <code>roads[i] = [ui, vi, wi]</code> 表示一条从 <code>ui</code> 到 <code>vi</code> 长度为 <code>wi</code>的 <strong>无向</strong> 道路。</p><p>请你返回关闭分部的可行方案数目，满足每个方案里剩余分部之间的最远距离不超过 <code>maxDistance</code>。</p><p><strong>注意</strong>，关闭一个分部后，与之相连的所有道路不可通行。</p><p><strong>注意</strong>，两个分部之间可能会有多条道路。</p><p><strong>示例 1：</strong></p><p><img src="https://assets.leetcode.com/uploads/2023/11/08/example11.png" alt="img"></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs inform7">输入：n = 3, maxDistance = 5, roads = <span class="hljs-comment">[<span class="hljs-comment">[0,1,2]</span>,<span class="hljs-comment">[1,2,10]</span>,<span class="hljs-comment">[0,2,10]</span>]</span><br>输出：5<br>解释：可行的关闭分部方案有：<br>- 关闭分部集合 <span class="hljs-comment">[2]</span> ，剩余分部为 <span class="hljs-comment">[0,1]</span> ，它们之间的距离为 2 。<br>- 关闭分部集合 <span class="hljs-comment">[0,1]</span> ，剩余分部为 <span class="hljs-comment">[2]</span> 。<br>- 关闭分部集合 <span class="hljs-comment">[1,2]</span> ，剩余分部为 <span class="hljs-comment">[0]</span> 。<br>- 关闭分部集合 <span class="hljs-comment">[0,2]</span> ，剩余分部为 <span class="hljs-comment">[1]</span> 。<br>- 关闭分部集合 <span class="hljs-comment">[0,1,2]</span> ，关闭后没有剩余分部。<br>总共有 5 种可行的关闭方案。<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><p><img src="https://assets.leetcode.com/uploads/2023/11/08/example22.png" alt="img"></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs inform7">输入：n = 3, maxDistance = 5, roads = <span class="hljs-comment">[<span class="hljs-comment">[0,1,20]</span>,<span class="hljs-comment">[0,1,10]</span>,<span class="hljs-comment">[1,2,2]</span>,<span class="hljs-comment">[0,2,2]</span>]</span><br>输出：7<br>解释：可行的关闭分部方案有：<br>- 关闭分部集合 <span class="hljs-comment">[]</span> ，剩余分部为 <span class="hljs-comment">[0,1,2]</span> ，它们之间的最远距离为 4 。<br>- 关闭分部集合 <span class="hljs-comment">[0]</span> ，剩余分部为 <span class="hljs-comment">[1,2]</span> ，它们之间的距离为 2 。<br>- 关闭分部集合 <span class="hljs-comment">[1]</span> ，剩余分部为 <span class="hljs-comment">[0,2]</span> ，它们之间的距离为 2 。<br>- 关闭分部集合 <span class="hljs-comment">[0,1]</span> ，剩余分部为 <span class="hljs-comment">[2]</span> 。<br>- 关闭分部集合 <span class="hljs-comment">[1,2]</span> ，剩余分部为 <span class="hljs-comment">[0]</span> 。<br>- 关闭分部集合 <span class="hljs-comment">[0,2]</span> ，剩余分部为 <span class="hljs-comment">[1]</span> 。<br>- 关闭分部集合 <span class="hljs-comment">[0,1,2]</span> ，关闭后没有剩余分部。<br>总共有 7 种可行的关闭方案。<br></code></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs inform7">输入：n = 1, maxDistance = 10, roads = <span class="hljs-comment">[]</span><br>输出：2<br>解释：可行的关闭分部方案有：<br>- 关闭分部集合 <span class="hljs-comment">[]</span> ，剩余分部为 <span class="hljs-comment">[0]</span> 。<br>- 关闭分部集合 <span class="hljs-comment">[0]</span> ，关闭后没有剩余分部。<br>总共有 2 种可行的关闭方案。<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= n &lt;= 10</code></li><li><code>1 &lt;= maxDistance &lt;= 105</code></li><li><code>0 &lt;= roads.length &lt;= 1000</code></li><li><code>roads[i].length == 3</code></li><li><code>0 &lt;= ui, vi &lt;= n - 1</code></li><li><code>ui != vi</code></li><li><code>1 &lt;= wi &lt;= 1000</code></li><li>一开始所有分部之间通过道路互相可以到达。</li></ul><p>本场的困难题,rating 2077,算是一道比较简单的困难题了，首先观察数据范围n小于10,那么第一想到求最短路的就是<code>floyd</code>,暴力枚举所有方案也才最多1024种，那么就可以完全暴力枚举了，判断连通的话，通常做法为并查集，但这里都用<code>floyd</code>了，计算途中就可以判断联通了，反正n最大也才10,随便都可以啦。代码有点屎。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">numberOfSets</span><span class="hljs-params">(<span class="hljs-type">int</span> n, <span class="hljs-type">int</span> maxDistance, <span class="hljs-type">int</span>[][] roads)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">ans</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1</span> &lt;&lt; n; i++) &#123;<br>            <span class="hljs-keyword">if</span> (check(i, maxDistance, roads, n)) ans++;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">check</span><span class="hljs-params">(<span class="hljs-type">int</span> i, <span class="hljs-type">int</span> maxDistance, <span class="hljs-type">int</span>[][] roads, <span class="hljs-type">int</span> n)</span> &#123;<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-type">int</span>[] p = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; n; j++) &#123;<br>            p[j] = j;<br>        &#125;<br>        <span class="hljs-type">int</span>[][] g = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n][n];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> gg : g) Arrays.fill(gg, <span class="hljs-number">0x3f3f3f3f</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> road : roads) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> road[<span class="hljs-number">0</span>], b = road[<span class="hljs-number">1</span>], d = road[<span class="hljs-number">2</span>];<br>            <span class="hljs-keyword">if</span> ((i &amp; <span class="hljs-number">1</span> &lt;&lt; a) == <span class="hljs-number">0</span> || (i &amp; <span class="hljs-number">1</span> &lt;&lt; b) == <span class="hljs-number">0</span>) <span class="hljs-keyword">continue</span>;<br>            g[a][b] = g[b][a] = Math.min(g[a][b], d);<br>            <span class="hljs-type">int</span> <span class="hljs-variable">pa</span> <span class="hljs-operator">=</span> find(p, a), pb = find(p, b);<br>            <span class="hljs-keyword">if</span> (pa != pb) p[pa] = pb;<br>        &#125;<br>        Set&lt;Integer&gt; set = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; n; j++) &#123;<br>            <span class="hljs-keyword">if</span> ((i &amp; <span class="hljs-number">1</span> &lt;&lt; j) != <span class="hljs-number">0</span>) set.add(find(p, j));<br>        &#125;<br>        <span class="hljs-keyword">if</span> (set.size() &gt; <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">maxD</span> <span class="hljs-operator">=</span> -<span class="hljs-number">0x3f3f3f3f</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; k &lt; n; k++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; n; j++) &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">l</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; l &lt; n; l++) &#123;<br>                    <span class="hljs-keyword">if</span> ((i &gt;&gt; k &amp; <span class="hljs-number">1</span>) == <span class="hljs-number">1</span> &amp;&amp; (i &gt;&gt; j &amp; <span class="hljs-number">1</span>) == <span class="hljs-number">1</span> &amp;&amp; (i &gt;&gt; l &amp; <span class="hljs-number">1</span>) == <span class="hljs-number">1</span>) &#123;<br>                        g[j][l] = Math.min(g[j][l], g[j][k] + g[k][l]);<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; n; j++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> j + <span class="hljs-number">1</span>; k &lt; n; k++) &#123;<br>                <span class="hljs-keyword">if</span> ((i &gt;&gt; j &amp; <span class="hljs-number">1</span>) == <span class="hljs-number">1</span> &amp;&amp; (i &gt;&gt; k &amp; <span class="hljs-number">1</span>) == <span class="hljs-number">1</span>)<br>                    maxD = Math.max(maxD, g[j][k]);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> maxD &lt;= maxDistance;<br>    &#125;<br><br><br>    <span class="hljs-type">int</span> <span class="hljs-title function_">find</span><span class="hljs-params">(<span class="hljs-type">int</span>[] p, <span class="hljs-type">int</span> a)</span> &#123;<br>        <span class="hljs-keyword">if</span> (a == p[a]) <span class="hljs-keyword">return</span> a;<br>        <span class="hljs-keyword">return</span> p[a] = find(p, p[a]);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>leetcode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode-372</title>
    <link href="/2023/11/19/LeetCode-372/"/>
    <url>/2023/11/19/LeetCode-372/</url>
    
    <content type="html"><![CDATA[<h3 id="Q1">Q1</h3><p><a href="https://leetcode.cn/problems/make-three-strings-equal/">100131. 使三个字符串相等</a></p><p>给你三个字符串 <code>s1</code>、<code>s2</code> 和 <code>s3</code>。 你可以根据需要对这三个字符串执行以下操作 <strong>任意次数</strong> 。</p><p>在每次操作中，你可以选择其中一个长度至少为 <code>2</code> 的字符串 并删除其 <strong>最右位置上</strong> 的字符。</p><p>如果存在某种方法能够使这三个字符串相等，请返回使它们相等所需的 <strong>最小</strong> 操作次数；否则，返回 <code>-1</code>。</p><p><strong>示例 1：</strong></p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs armasm">输入：<span class="hljs-built_in">s1</span> = <span class="hljs-string">&quot;abc&quot;</span>，<span class="hljs-built_in">s2</span> = <span class="hljs-string">&quot;abb&quot;</span>，<span class="hljs-built_in">s3</span> = <span class="hljs-string">&quot;ab&quot;</span><br>输出：<span class="hljs-number">2</span><br>解释：对 <span class="hljs-built_in">s1</span> 和 <span class="hljs-built_in">s2</span> 进行一次操作后，可以得到三个相等的字符串。<br>可以证明，不可能用少于两次操作使它们相等。<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs armasm">输入：<span class="hljs-built_in">s1</span> = <span class="hljs-string">&quot;dac&quot;</span>，<span class="hljs-built_in">s2</span> = <span class="hljs-string">&quot;bac&quot;</span>，<span class="hljs-built_in">s3</span> = <span class="hljs-string">&quot;cac&quot;</span><br>输出：-<span class="hljs-number">1</span><br>解释：因为 <span class="hljs-built_in">s1</span> 和 <span class="hljs-built_in">s2</span> 的最左位置上的字母不相等，所以无论进行多少次操作，它们都不可能相等。因此答案是 -<span class="hljs-number">1</span> 。<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= s1.length, s2.length, s3.length &lt;= 100</code></li><li><code>s1</code>、<code>s2</code> 和 <code>s3</code> 仅由小写英文字母组成。</li></ul><p>直接模拟找到最左匹配即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">findMinimumOperations</span>(<span class="hljs-params">self, s1: <span class="hljs-built_in">str</span>, s2: <span class="hljs-built_in">str</span>, s3: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>        <span class="hljs-keyword">if</span> s1[<span class="hljs-number">0</span>] != s2[<span class="hljs-number">0</span>] <span class="hljs-keyword">or</span> s1[<span class="hljs-number">0</span>] != s3[<span class="hljs-number">0</span>] <span class="hljs-keyword">or</span> s2[<span class="hljs-number">0</span>] != s3[<span class="hljs-number">0</span>]:<br>            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span><br>        n = <span class="hljs-built_in">min</span>(<span class="hljs-built_in">len</span>(s1), <span class="hljs-built_in">len</span>(s2), <span class="hljs-built_in">len</span>(s3))<br>        i = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">while</span> i &lt; n <span class="hljs-keyword">and</span> s1[i] == s2[i] == s3[i]:<br>            i += <span class="hljs-number">1</span><br>        ans = <span class="hljs-number">0</span><br>        ans += <span class="hljs-built_in">len</span>(s1) - i<br>        ans += <span class="hljs-built_in">len</span>(s2) - i<br>        ans += <span class="hljs-built_in">len</span>(s3) - i<br>        <span class="hljs-keyword">return</span> ans<br></code></pre></td></tr></table></figure><h3 id="Q2">Q2</h3><p><a href="https://leetcode.cn/problems/separate-black-and-white-balls/">100122. 区分黑球与白球</a></p><p>桌子上有 <code>n</code> 个球，每个球的颜色不是黑色，就是白色。</p><p>给你一个长度为 <code>n</code> 、下标从 <strong>0</strong> 开始的二进制字符串 <code>s</code>，其中 <code>1</code> 和 <code>0</code> 分别代表黑色和白色的球。</p><p>在每一步中，你可以选择两个相邻的球并交换它们。</p><p>返回「将所有黑色球都移到右侧，所有白色球都移到左侧所需的 <strong>最小步数</strong>」。</p><p><strong>示例 1：</strong></p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs abnf">输入：s <span class="hljs-operator">=</span> <span class="hljs-string">&quot;101&quot;</span><br>输出：<span class="hljs-number">1</span><br>解释：我们可以按以下方式将所有黑色球移到右侧：<br>- 交换 s[<span class="hljs-number">0</span>] 和 s[<span class="hljs-number">1</span>]，s <span class="hljs-operator">=</span> <span class="hljs-string">&quot;011&quot;</span>。<br>最开始，<span class="hljs-number">1</span> 没有都在右侧，需要至少 <span class="hljs-number">1</span> 步将其移到右侧。<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs prolog">输入：s = <span class="hljs-string">&quot;100&quot;</span><br>输出：<span class="hljs-number">2</span><br>解释：我们可以按以下方式将所有黑色球移到右侧：<br>- 交换 s[<span class="hljs-number">0</span>] 和 s[<span class="hljs-number">1</span>]，s = <span class="hljs-string">&quot;010&quot;</span>。<br>- 交换 s[<span class="hljs-number">1</span>] 和 s[<span class="hljs-number">2</span>]，s = <span class="hljs-string">&quot;001&quot;</span>。<br>可以证明所需的最小步数为 <span class="hljs-number">2</span> 。<br></code></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs abnf">输入：s <span class="hljs-operator">=</span> <span class="hljs-string">&quot;0111&quot;</span><br>输出：<span class="hljs-number">0</span><br>解释：所有黑色球都已经在右侧。<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= n == s.length &lt;= 105</code></li><li><code>s[i]</code> 不是 <code>'0'</code>，就是 <code>'1'</code>。</li></ul><p>本质上就是求逆序对，但是我没有直接想到，我想到的是一个模拟的过程，大致思想如下图。</p><p><img src="https://ykexc-1314584214.cos.ap-nanjing.myqcloud.com/lc372-2.png" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">minimumSteps</span>(<span class="hljs-params">self, s: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>        c = Counter(<span class="hljs-built_in">list</span>(s))<br>        zero = c[<span class="hljs-string">&#x27;0&#x27;</span>]<br>        one = c[<span class="hljs-string">&#x27;1&#x27;</span>]<br>        <span class="hljs-built_in">print</span>(one, zero)<br>        ans = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(zero):<br>            <span class="hljs-keyword">if</span> s[i] == <span class="hljs-string">&#x27;1&#x27;</span>:<br>                ans += zero - i<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(s) - <span class="hljs-number">1</span>, <span class="hljs-built_in">len</span>(s) - one - <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>):<br>            <span class="hljs-keyword">if</span> s[j] == <span class="hljs-string">&#x27;0&#x27;</span>:<br>                ans += (j - <span class="hljs-built_in">len</span>(s) + one)<br>        <span class="hljs-keyword">return</span> ans<br></code></pre></td></tr></table></figure><h3 id="Q3">Q3</h3><p><a href="https://leetcode.cn/problems/maximum-xor-product/">100119. 最大异或乘积</a></p><p>给你三个整数 <code>a</code> ，<code>b</code> 和 <code>n</code> ，请你返回 <code>(a XOR x) * (b XOR x)</code> 的 <strong>最大值</strong> 且 <code>x</code> 需要满足 <code>0 &lt;= x &lt; 2n</code>。</p><p>由于答案可能会很大，返回它对 <code>109 + 7</code> <strong>取余</strong> 后的结果。</p><p><strong>注意</strong>，<code>XOR</code> 是按位异或操作。</p><p><strong>示例 1：</strong></p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">输入：a = <span class="hljs-number">12</span>, <span class="hljs-keyword">b </span>= <span class="hljs-number">5</span>, n = <span class="hljs-number">4</span><br>输出：<span class="hljs-number">98</span><br>解释：当 x = <span class="hljs-number">2</span> 时，(a <span class="hljs-keyword">XOR </span>x) = <span class="hljs-number">14</span> 且 (<span class="hljs-keyword">b </span><span class="hljs-keyword">XOR </span>x) = <span class="hljs-number">7</span> 。所以，(a <span class="hljs-keyword">XOR </span>x) * (<span class="hljs-keyword">b </span><span class="hljs-keyword">XOR </span>x) = <span class="hljs-number">98</span> 。<br><span class="hljs-number">98</span> 是所有满足 <span class="hljs-number">0</span> &lt;= x &lt; <span class="hljs-number">2</span>n 中 (a <span class="hljs-keyword">XOR </span>x) * (<span class="hljs-keyword">b </span><span class="hljs-keyword">XOR </span>x) 的最大值。<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">输入：a = <span class="hljs-number">6</span>, <span class="hljs-keyword">b </span>= <span class="hljs-number">7</span> , n = <span class="hljs-number">5</span><br>输出：<span class="hljs-number">930</span><br>解释：当 x = <span class="hljs-number">25</span> 时，(a <span class="hljs-keyword">XOR </span>x) = <span class="hljs-number">31</span> 且 (<span class="hljs-keyword">b </span><span class="hljs-keyword">XOR </span>x) = <span class="hljs-number">30</span> 。所以，(a <span class="hljs-keyword">XOR </span>x) * (<span class="hljs-keyword">b </span><span class="hljs-keyword">XOR </span>x) = <span class="hljs-number">930</span> 。<br><span class="hljs-number">930</span> 是所有满足 <span class="hljs-number">0</span> &lt;= x &lt; <span class="hljs-number">2</span>n 中 (a <span class="hljs-keyword">XOR </span>x) * (<span class="hljs-keyword">b </span><span class="hljs-keyword">XOR </span>x) 的最大值。<br></code></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">输入：a = <span class="hljs-number">1</span>, <span class="hljs-keyword">b </span>= <span class="hljs-number">6</span>, n = <span class="hljs-number">3</span><br>输出：<span class="hljs-number">12</span><br>解释： 当 x = <span class="hljs-number">5</span> 时，(a <span class="hljs-keyword">XOR </span>x) = <span class="hljs-number">4</span> 且 (<span class="hljs-keyword">b </span><span class="hljs-keyword">XOR </span>x) = <span class="hljs-number">3</span> 。所以，(a <span class="hljs-keyword">XOR </span>x) * (<span class="hljs-keyword">b </span><span class="hljs-keyword">XOR </span>x) = <span class="hljs-number">12</span> 。<br><span class="hljs-number">12</span> 是所有满足 <span class="hljs-number">0</span> &lt;= x &lt; <span class="hljs-number">2</span>n 中 (a <span class="hljs-keyword">XOR </span>x) * (<span class="hljs-keyword">b </span><span class="hljs-keyword">XOR </span>x) 的最大值。<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>0 &lt;= a, b &lt; 250</code></li><li><code>0 &lt;= n &lt;= 50</code></li></ul><p>贪心思想，不知道该怎样证明。从低到高只要能将结果变大就要这位，要么不要，还有一种就是从高位到低位哪个小就给哪个异或。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">maximumXorProduct</span>(<span class="hljs-params">self, a: <span class="hljs-built_in">int</span>, b: <span class="hljs-built_in">int</span>, n: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>        MOD = <span class="hljs-number">10</span> ** <span class="hljs-number">9</span> + <span class="hljs-number">7</span><br>        result = a * b<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>            xx, yy = a ^ (<span class="hljs-number">1</span> &lt;&lt; i), b ^ (<span class="hljs-number">1</span> &lt;&lt; i)<br>            <span class="hljs-keyword">if</span> xx * yy &gt; a * b:<br>                a, b = xx, yy<br>            result = <span class="hljs-built_in">max</span>(result, a * b)<br><br>        <span class="hljs-keyword">return</span> result % MOD<br><br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">maximumXorProduct</span><span class="hljs-params">(<span class="hljs-type">long</span> <span class="hljs-type">long</span> a, <span class="hljs-type">long</span> <span class="hljs-type">long</span> b, <span class="hljs-type">int</span> n)</span> </span>&#123;<br>        <span class="hljs-type">const</span> <span class="hljs-type">int</span> MOD = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br>        <span class="hljs-comment">// 把输入数据大于等于第 n 位的部分先截出来，它们不受异或操作的影响</span><br>        <span class="hljs-type">long</span> <span class="hljs-type">long</span> p = (a &gt;&gt; n) &lt;&lt; n, q = (b &gt;&gt; n) &lt;&lt; n;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = n - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>            <span class="hljs-comment">// 看 a 和 b 第 i 位是否相同</span><br>            <span class="hljs-type">int</span> x = a &gt;&gt; i &amp; <span class="hljs-number">1</span>;<br>            <span class="hljs-type">int</span> y = b &gt;&gt; i &amp; <span class="hljs-number">1</span>;<br>            <span class="hljs-comment">// 相同则两者都可以获得一个 1</span><br>            <span class="hljs-keyword">if</span> (x == y) p |= <span class="hljs-number">1LL</span> &lt;&lt; i, q |= <span class="hljs-number">1LL</span> &lt;&lt; i;<br>            <span class="hljs-comment">// 不同则谁小谁获得 1</span><br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (p &lt; q) p |= <span class="hljs-number">1LL</span> &lt;&lt; i;<br>            <span class="hljs-keyword">else</span> q |= <span class="hljs-number">1LL</span> &lt;&lt; i;<br>        &#125;<br>        <span class="hljs-comment">// 先取个模防止乘法溢出</span><br>        p %= MOD;<br>        q %= MOD;<br>        <span class="hljs-keyword">return</span> p * q % MOD;<br>    &#125;<br>&#125;;<br><br>作者：TsReaper<br>链接：https:<span class="hljs-comment">//leetcode.cn/problems/maximum-xor-product/</span><br>来源：力扣（LeetCode）<br></code></pre></td></tr></table></figure><h3 id="Q4">Q4</h3><p><a href="https://leetcode.cn/problems/find-building-where-alice-and-bob-can-meet/">100110. 找到 Alice 和 Bob 可以相遇的建筑</a></p><p>给你一个下标从 <strong>0</strong> 开始的正整数数组 <code>heights</code> ，其中 <code>heights[i]</code> 表示第 <code>i</code> 栋建筑的高度。</p><p>如果一个人在建筑 <code>i</code> ，且存在 <code>i &lt; j</code> 的建筑 <code>j</code> 满足 <code>heights[i] &lt; heights[j]</code> ，那么这个人可以移动到建筑 <code>j</code> 。</p><p>给你另外一个数组 <code>queries</code> ，其中 <code>queries[i] = [ai, bi]</code> 。第 <code>i</code> 个查询中，Alice 在建筑 <code>ai</code> ，Bob 在建筑 <code>bi</code> 。</p><p>请你能返回一个数组 <code>ans</code> ，其中 <code>ans[i]</code> 是第 <code>i</code> 个查询中，Alice 和 Bob 可以相遇的 <strong>最左边的建筑</strong> 。如果对于查询 <code>i</code> ，Alice 和 Bob 不能相遇，令 <code>ans[i]</code> 为 <code>-1</code> 。</p><p><strong>示例 1：</strong></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs inform7">输入：heights = <span class="hljs-comment">[6,4,8,5,2,7]</span>, queries = <span class="hljs-comment">[<span class="hljs-comment">[0,1]</span>,<span class="hljs-comment">[0,3]</span>,<span class="hljs-comment">[2,4]</span>,<span class="hljs-comment">[3,4]</span>,<span class="hljs-comment">[2,2]</span>]</span><br>输出：<span class="hljs-comment">[2,5,-1,5,2]</span><br>解释：第一个查询中，Alice 和 Bob 可以移动到建筑 2 ，因为 heights<span class="hljs-comment">[0]</span> &lt; heights<span class="hljs-comment">[2]</span> 且 heights<span class="hljs-comment">[1]</span> &lt; heights<span class="hljs-comment">[2]</span> 。<br>第二个查询中，Alice 和 Bob 可以移动到建筑 5 ，因为 heights<span class="hljs-comment">[0]</span> &lt; heights<span class="hljs-comment">[5]</span> 且 heights<span class="hljs-comment">[3]</span> &lt; heights<span class="hljs-comment">[5]</span> 。<br>第三个查询中，Alice 无法与 Bob 相遇，因为 Alice 不能移动到任何其他建筑。<br>第四个查询中，Alice 和 Bob 可以移动到建筑 5 ，因为 heights<span class="hljs-comment">[3]</span> &lt; heights<span class="hljs-comment">[5]</span> 且 heights<span class="hljs-comment">[4]</span> &lt; heights<span class="hljs-comment">[5]</span> 。<br>第五个查询中，Alice 和 Bob 已经在同一栋建筑中。<br>对于 ans<span class="hljs-comment">[i]</span> != -1 ，ans<span class="hljs-comment">[i]</span> 是 Alice 和 Bob 可以相遇的建筑中最左边建筑的下标。<br>对于 ans<span class="hljs-comment">[i]</span> == -1 ，不存在 Alice 和 Bob 可以相遇的建筑。<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs inform7">输入：heights = <span class="hljs-comment">[5,3,8,2,6,1,4,6]</span>, queries = <span class="hljs-comment">[<span class="hljs-comment">[0,7]</span>,<span class="hljs-comment">[3,5]</span>,<span class="hljs-comment">[5,2]</span>,<span class="hljs-comment">[3,0]</span>,<span class="hljs-comment">[1,6]</span>]</span><br>输出：<span class="hljs-comment">[7,6,-1,4,6]</span><br>解释：第一个查询中，Alice 可以直接移动到 Bob 的建筑，因为 heights<span class="hljs-comment">[0]</span> &lt; heights<span class="hljs-comment">[7]</span> 。<br>第二个查询中，Alice 和 Bob 可以移动到建筑 6 ，因为 heights<span class="hljs-comment">[3]</span> &lt; heights<span class="hljs-comment">[6]</span> 且 heights<span class="hljs-comment">[5]</span> &lt; heights<span class="hljs-comment">[6]</span> 。<br>第三个查询中，Alice 无法与 Bob 相遇，因为 Bob 不能移动到任何其他建筑。<br>第四个查询中，Alice 和 Bob 可以移动到建筑 4 ，因为 heights<span class="hljs-comment">[3]</span> &lt; heights<span class="hljs-comment">[4]</span> 且 heights<span class="hljs-comment">[0]</span> &lt; heights<span class="hljs-comment">[4]</span> 。<br>第五个查询中，Alice 可以直接移动到 Bob 的建筑，因为 heights<span class="hljs-comment">[1]</span> &lt; heights<span class="hljs-comment">[6]</span> 。<br>对于 ans<span class="hljs-comment">[i]</span> != -1 ，ans<span class="hljs-comment">[i]</span> 是 Alice 和 Bob 可以相遇的建筑中最左边建筑的下标。<br>对于 ans<span class="hljs-comment">[i]</span> == -1 ，不存在 Alice 和 Bob 可以相遇的建筑。<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= heights.length &lt;= 5 * 104</code></li><li><code>1 &lt;= heights[i] &lt;= 109</code></li><li><code>1 &lt;= queries.length &lt;= 5 * 104</code></li><li><code>queries[i] = [ai, bi]</code></li><li><code>0 &lt;= ai, bi &lt;= heights.length - 1</code></li></ul><p>因为两人的顺序对结果无关，所以可以先对<code>ai</code>,<code>bi</code>进行排序，设<code>x</code>,<code>y</code>为两人位置, <code>x &lt;= y</code>,若<code>x == y</code>,则<code>ans[i] = x</code>,若<code>height[y] &gt; height[x]</code>则<code>ans[i] = y</code>,对于其他情况问题的转换就成了下标第一个大于<code>y</code>的坐标<code>z</code>且<code>height[z] &gt; height[x]</code>,这就成为了一个<code>二维偏序</code>问题，可以采用离线查询，按照<code>y</code>从到大到小排序，反向过滤height,利用树状数组就可以解决本问题。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">leftmostBuildingQueries</span>(<span class="hljs-params">self, heights: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>], queries: <span class="hljs-type">List</span>[<span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]]</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]:<br>        n = <span class="hljs-built_in">len</span>(heights)<br>        m = <span class="hljs-built_in">len</span>(queries)<br>        tree = [inf] * (n + <span class="hljs-number">1</span>)<br>        ans = [<span class="hljs-number">0</span>] * m<br>        unique_queries = <span class="hljs-built_in">sorted</span>(<span class="hljs-built_in">list</span>(<span class="hljs-built_in">set</span>(heights)))<br>        query_map = &#123;e: idx + <span class="hljs-number">1</span> <span class="hljs-keyword">for</span> idx, e <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(unique_queries)&#125;  <span class="hljs-comment"># 离散化</span><br><br>        remaining_queries = []<br><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(m):<br>            x, y = <span class="hljs-built_in">min</span>(queries[i]), <span class="hljs-built_in">max</span>(queries[i])<br>            <span class="hljs-keyword">if</span> x == y <span class="hljs-keyword">or</span> heights[y] &gt; heights[x]:<br>                ans[i] = y<br>            <span class="hljs-keyword">else</span>:<br>                remaining_queries.append((x, y, i))<br><br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">low_bit</span>(<span class="hljs-params">a: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>            <span class="hljs-keyword">return</span> a &amp; -a<br><br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">update</span>(<span class="hljs-params">i: <span class="hljs-built_in">int</span>, v: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">while</span> i &lt; <span class="hljs-built_in">len</span>(tree):<br>                tree[i] = <span class="hljs-built_in">min</span>(tree[i], v)<br>                i += low_bit(i)<br><br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">get</span>(<span class="hljs-params">i: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>            ret = inf<br>            <span class="hljs-keyword">while</span> i &gt; <span class="hljs-number">0</span>:<br>                ret = <span class="hljs-built_in">min</span>(ret, tree[i])<br>                i -= low_bit(i)<br>            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span> <span class="hljs-keyword">if</span> ret == inf <span class="hljs-keyword">else</span> ret<br><br>        remaining_queries.sort(key=<span class="hljs-keyword">lambda</span> e: e[<span class="hljs-number">1</span>], reverse=<span class="hljs-literal">True</span>)<br>        i = n - <span class="hljs-number">1</span><br><br>        <span class="hljs-keyword">for</span> e <span class="hljs-keyword">in</span> remaining_queries:<br>            v, idx = <span class="hljs-built_in">len</span>(unique_queries) + <span class="hljs-number">1</span> - query_map[heights[e[<span class="hljs-number">0</span>]]], e[<span class="hljs-number">2</span>]<br>            <span class="hljs-keyword">while</span> i &gt; e[<span class="hljs-number">1</span>]:<br>                update(<span class="hljs-built_in">len</span>(unique_queries) + <span class="hljs-number">1</span> - query_map[heights[i]], i)<br>                i -= <span class="hljs-number">1</span><br>            ans[idx] = get(v - <span class="hljs-number">1</span>)<br><br>        <span class="hljs-keyword">return</span> ans<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>leetcode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>二维偏序</title>
    <link href="/2023/11/17/%E4%BA%8C%E7%BB%B4%E5%81%8F%E5%BA%8F/"/>
    <url>/2023/11/17/%E4%BA%8C%E7%BB%B4%E5%81%8F%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<h1>二维偏序</h1><p><a href="https://leetcode.cn/problems/maximum-sum-queries/">2736. 最大和查询</a></p><p>给你两个长度为 <code>n</code> 、下标从 <strong>0</strong> 开始的整数数组 <code>nums1</code> 和 <code>nums2</code> ，另给你一个下标从 <strong>1</strong> 开始的二维数组 <code>queries</code> ，其中 <code>queries[i] = [xi, yi]</code> 。</p><p>对于第 <code>i</code> 个查询，在所有满足 <code>nums1[j] &gt;= xi</code> 且 <code>nums2[j] &gt;= yi</code> 的下标 <code>j</code> <code>(0 &lt;= j &lt; n)</code> 中，找出 <code>nums1[j] + nums2[j]</code> 的 <strong>最大值</strong> ，如果不存在满足条件的 <code>j</code> 则返回 <strong>-1</strong> 。</p><p>返回数组 <code>answer</code> *，*其中 <code>answer[i]</code> 是第 <code>i</code> 个查询的答案。</p><p><strong>示例 1：</strong></p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs tap">输入：nums1 = [4,3,1,2], nums2 = [2,4,9,5], queries = [[4,1],[1,3],[2,5]]<br>输出：[6,10,7]<br>解释：<br>对于第<span class="hljs-number"> 1 </span>个查询：xi =<span class="hljs-number"> 4 </span>且 yi =<span class="hljs-number"> 1 </span>，可以选择下标 j =<span class="hljs-number"> 0 </span>，此时 nums1[j] &gt;=<span class="hljs-number"> 4 </span>且 nums2[j] &gt;=<span class="hljs-number"> 1 </span>。nums1[j] + nums2[j] 等于<span class="hljs-number"> 6 </span>，可以证明<span class="hljs-number"> 6 </span>是可以获得的最大值。<br>对于第<span class="hljs-number"> 2 </span>个查询：xi =<span class="hljs-number"> 1 </span>且 yi =<span class="hljs-number"> 3 </span>，可以选择下标 j =<span class="hljs-number"> 2 </span>，此时 nums1[j] &gt;=<span class="hljs-number"> 1 </span>且 nums2[j] &gt;=<span class="hljs-number"> 3 </span>。nums1[j] + nums2[j] 等于<span class="hljs-number"> 10 </span>，可以证明<span class="hljs-number"> 10 </span>是可以获得的最大值。<br>对于第<span class="hljs-number"> 3 </span>个查询：xi =<span class="hljs-number"> 2 </span>且 yi =<span class="hljs-number"> 5 </span>，可以选择下标 j =<span class="hljs-number"> 3 </span>，此时 nums1[j] &gt;=<span class="hljs-number"> 2 </span>且 nums2[j] &gt;=<span class="hljs-number"> 5 </span>。nums1[j] + nums2[j] 等于<span class="hljs-number"> 7 </span>，可以证明<span class="hljs-number"> 7 </span>是可以获得的最大值。<br>因此，我们返回 [6,10,7] 。<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs inform7">输入：nums1 = <span class="hljs-comment">[3,2,5]</span>, nums2 = <span class="hljs-comment">[2,3,4]</span>, queries = <span class="hljs-comment">[<span class="hljs-comment">[4,4]</span>,<span class="hljs-comment">[3,2]</span>,<span class="hljs-comment">[1,1]</span>]</span><br>输出：<span class="hljs-comment">[9,9,9]</span><br>解释：对于这个示例，我们可以选择下标 j = 2 ，该下标可以满足每个查询的限制。<br></code></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs inform7">输入：nums1 = <span class="hljs-comment">[2,1]</span>, nums2 = <span class="hljs-comment">[2,3]</span>, queries = <span class="hljs-comment">[<span class="hljs-comment">[3,3]</span>]</span><br>输出：<span class="hljs-comment">[-1]</span><br>解释：示例中的查询 xi = 3 且 yi = 3 。对于每个下标 j ，都只满足 nums1<span class="hljs-comment">[j]</span> &lt; xi 或者 nums2<span class="hljs-comment">[j]</span> &lt; yi 。因此，不存在答案。 <br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>nums1.length == nums2.length</code></li><li><code>n == nums1.length </code></li><li><code>1 &lt;= n &lt;= 105</code></li><li><code>1 &lt;= nums1[i], nums2[i] &lt;= 109 </code></li><li><code>1 &lt;= queries.length &lt;= 105</code></li><li><code>queries[i].length == 2</code></li><li><code>xi == queries[i][1]</code></li><li><code>yi == queries[i][2]</code></li><li><code>1 &lt;= xi, yi &lt;= 109</code></li></ul><p>二位偏序问题。</p><ul><li><p>什么是偏序?</p><p>形式上，偏序关系满足以下性质：</p><ol><li>自反性（Reflexivity）：对于任意元素x，都有x ≤ x。</li><li>反对称性（Antisymmetry）：对于任意元素x和y，如果x ≤ y且y ≤ x，则x = y。</li><li>传递性（Transitivity）：对于任意元素x、y和z，如果x ≤ y且y ≤ z，则x ≤ z。</li></ol></li><li><p>什么是二维偏序问题?</p><p><strong>二维偏序问题</strong>（Two-dimensional Partial Order Problem）是指在一个包含两个维度的数据集中，寻找一种线性排序方法来满足特定的约束条件。这种问题是组合优化和离散数学领域的一个经典问题。</p><p>在二维偏序问题中，我们通常需要找到一个排列 <code>P</code> 来对数据集进行排序，使得每个元素 <code>(x, y)</code> 满足以下关系：</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm">(<span class="hljs-keyword">x</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span> y<span class="hljs-number">1</span>) &lt;<span class="hljs-operator">=</span> (<span class="hljs-keyword">x</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span> y<span class="hljs-number">2</span>) if <span class="hljs-keyword">x</span><span class="hljs-number">1</span> &lt; <span class="hljs-keyword">x</span><span class="hljs-number">2</span> <span class="hljs-keyword">or</span> (<span class="hljs-keyword">x</span><span class="hljs-number">1</span> <span class="hljs-operator">=</span><span class="hljs-operator">=</span> <span class="hljs-keyword">x</span><span class="hljs-number">2</span> <span class="hljs-keyword">and</span> y<span class="hljs-number">1</span> &lt;<span class="hljs-operator">=</span> y<span class="hljs-number">2</span>)<br></code></pre></td></tr></table></figure><p>换句话说，如果一个元素的横坐标值较小或者纵坐标值也小于等于另一个元素的对应坐标时，那么这个元素必须在前面。</p></li></ul><p>对于常规的二维偏序问题的解法为: 先排序<code>一维</code>，再树状数组维护第二维。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">maximumSumQueries</span>(<span class="hljs-params">self, nums1: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>], nums2: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>], queries: <span class="hljs-type">List</span>[<span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]]</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]:<br>        arr = <span class="hljs-built_in">sorted</span>(<span class="hljs-built_in">set</span>(nums2 + [y <span class="hljs-keyword">for</span> _, y <span class="hljs-keyword">in</span> queries]))<br>        mp = &#123;v: idx + <span class="hljs-number">1</span> <span class="hljs-keyword">for</span> idx, v <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(arr)&#125; <span class="hljs-comment"># 离散化</span><br>        sz = <span class="hljs-built_in">len</span>(arr) + <span class="hljs-number">1</span><br><br>        tree = [-<span class="hljs-number">1</span>] * (<span class="hljs-built_in">len</span>(nums1) + sz + <span class="hljs-number">1</span>)<br><br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">low_bit</span>(<span class="hljs-params">x: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>            <span class="hljs-keyword">return</span> x &amp; -x<br><br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">x: <span class="hljs-built_in">int</span>, v: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">while</span> x &lt; <span class="hljs-built_in">len</span>(tree):<br>                tree[x] = <span class="hljs-built_in">max</span>(tree[x], v)<br>                x += low_bit(x)<br><br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">get</span>(<span class="hljs-params">x: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>            ans = -<span class="hljs-number">10</span> ** <span class="hljs-number">9</span><br>            <span class="hljs-keyword">while</span> x &gt; <span class="hljs-number">0</span>:<br>                ans = <span class="hljs-built_in">max</span>(ans, tree[x])<br>                x -= low_bit(x)<br>            <span class="hljs-keyword">return</span> ans<br><br>        s1 = <span class="hljs-built_in">sorted</span>([(x, y) <span class="hljs-keyword">for</span> x, y <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(nums1, nums2)], key=<span class="hljs-keyword">lambda</span> e: -e[<span class="hljs-number">0</span>])<br>        s2 = <span class="hljs-built_in">sorted</span>([(x, sz - mp[y], i) <span class="hljs-keyword">for</span> i, (x, y) <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(queries)], key=<span class="hljs-keyword">lambda</span> e: -e[<span class="hljs-number">0</span>])<br><br>        ans = [<span class="hljs-number">0</span>] * <span class="hljs-built_in">len</span>(queries)<br>        j = <span class="hljs-number">0</span><br><br>        <span class="hljs-keyword">for</span> i, (x, y, idx) <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(s2):<br>            <span class="hljs-keyword">while</span> j &lt; <span class="hljs-built_in">len</span>(s1) <span class="hljs-keyword">and</span> s1[j][<span class="hljs-number">0</span>] &gt;= x:<br>                s, v = <span class="hljs-built_in">sum</span>(s1[j]), sz - mp[s1[j][<span class="hljs-number">1</span>]]  <span class="hljs-comment">#把符合的都加进去</span><br>                add(v, s)<br>                j += <span class="hljs-number">1</span><br>            ans[idx] = get(y)<br><br>        <span class="hljs-keyword">return</span> ans<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>杂项</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode-371</title>
    <link href="/2023/11/12/LeetCode-371/"/>
    <url>/2023/11/12/LeetCode-371/</url>
    
    <content type="html"><![CDATA[<h3 id="Q1-Q4">Q1&amp;Q4</h3><p><a href="https://leetcode.cn/problems/maximum-strong-pair-xor-ii/">100124. 找出强数对的最大异或值 II</a></p><p>给你一个下标从 <strong>0</strong> 开始的整数数组 <code>nums</code> 。如果一对整数 <code>x</code> 和 <code>y</code> 满足以下条件，则称其为 <strong>强数对</strong> ：</p><ul><li><code>|x - y| &lt;= min(x, y)</code></li></ul><p>你需要从 <code>nums</code> 中选出两个整数，且满足：这两个整数可以形成一个强数对，并且它们的按位异或（<code>XOR</code>）值是在该数组所有强数对中的 <strong>最大值</strong> 。</p><p>返回数组 <code>nums</code> 所有可能的强数对中的 <strong>最大</strong> 异或值。</p><p><strong>注意</strong>，你可以选择同一个整数两次来形成一个强数对。</p><p><strong>示例 1：</strong></p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs tap">输入：nums = [1,2,3,4,5]<br>输出：7<br>解释：数组 nums 中有<span class="hljs-number"> 11 </span>个强数对：(1, 1), (1, 2), (2, 2), (2, 3), (2, 4), (3, 3), (3, 4), (3, 5), (4, 4), (4, 5) 和 (5, 5) 。<br>这些强数对中的最大异或值是<span class="hljs-number"> 3 </span>XOR<span class="hljs-number"> 4 </span>=<span class="hljs-number"> 7 </span>。<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs tap">输入：nums = [10,100]<br>输出：0<br>解释：数组 nums 中有<span class="hljs-number"> 2 </span>个强数对：(10, 10) 和 (100, 100) 。<br>这些强数对中的最大异或值是<span class="hljs-number"> 10 </span>XOR<span class="hljs-number"> 10 </span>=<span class="hljs-number"> 0 </span>，数对 (100, 100) 的异或值也是<span class="hljs-number"> 100 </span>XOR<span class="hljs-number"> 100 </span>=<span class="hljs-number"> 0 </span>。<br></code></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">输入：nums</span> <span class="hljs-string">=</span> [<span class="hljs-number">500</span>,<span class="hljs-number">520</span>,<span class="hljs-number">2500</span>,<span class="hljs-number">3000</span>]<br><span class="hljs-string">输出：1020</span><br><span class="hljs-string">解释：数组</span> <span class="hljs-string">nums</span> <span class="hljs-string">中有</span> <span class="hljs-number">6</span> <span class="hljs-string">个强数对：(500,</span> <span class="hljs-number">500</span><span class="hljs-string">),</span> <span class="hljs-string">(500,</span> <span class="hljs-number">520</span><span class="hljs-string">),</span> <span class="hljs-string">(520,</span> <span class="hljs-number">520</span><span class="hljs-string">),</span> <span class="hljs-string">(2500,</span> <span class="hljs-number">2500</span><span class="hljs-string">),</span> <span class="hljs-string">(2500,</span> <span class="hljs-number">3000</span><span class="hljs-string">)</span> <span class="hljs-string">和</span> <span class="hljs-string">(3000,</span> <span class="hljs-number">3000</span><span class="hljs-string">)</span> <span class="hljs-string">。</span><br><span class="hljs-string">这些强数对中的最大异或值是</span> <span class="hljs-number">500</span> <span class="hljs-string">XOR</span> <span class="hljs-number">520</span> <span class="hljs-string">=</span> <span class="hljs-number">1020</span> <span class="hljs-string">；另一个异或值非零的数对是</span> <span class="hljs-string">(5,</span> <span class="hljs-number">6</span><span class="hljs-string">)</span> <span class="hljs-string">，其异或值是</span> <span class="hljs-number">2500 </span><span class="hljs-string">XOR</span> <span class="hljs-number">3000</span> <span class="hljs-string">=</span> <span class="hljs-number">636</span> <span class="hljs-string">。</span><br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 5 * 104</code></li><li><code>1 &lt;= nums[i] &lt;= 220 - 1</code></li></ul><p>根据条件<code>|x - y| &lt;= min(x, y)</code>,很容易想到双指针(滑动窗口)维护满足条件区间，那么就只剩下一个区间内求异或值最大的问题了，很明显可以使用<code>01trie</code>来实现，相较于平常的<code>01trie</code>，这个需要实现remove，其实也比较简单，参考正常的字典树，维护一个cnt即可。时间复杂度<code>O(nlogn+nlogU)</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    __slots__ = [<span class="hljs-string">&#x27;root&#x27;</span>]<br><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span>:<br><br>        __slots__ = [<span class="hljs-string">&#x27;nodes&#x27;</span>, <span class="hljs-string">&#x27;cnt&#x27;</span>]<br><br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>            self.nodes = [<span class="hljs-literal">None</span>, <span class="hljs-literal">None</span>]<br>            self.cnt = <span class="hljs-number">0</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self.root = self.Node()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">self, x: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-literal">None</span>:<br>        temp = self.root<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">21</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>):<br>            v = ((x &gt;&gt; i) &amp; <span class="hljs-number">1</span>) ^ <span class="hljs-number">1</span><br>            <span class="hljs-keyword">if</span> temp.nodes[v] <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>                temp.nodes[v] = self.Node()<br>            temp = temp.nodes[v]<br>            temp.cnt += <span class="hljs-number">1</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">remove</span>(<span class="hljs-params">self, x</span>):<br>        temp = self.root<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">21</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>):<br>            v = ((x &gt;&gt; i) &amp; <span class="hljs-number">1</span>) ^ <span class="hljs-number">1</span><br>            temp.nodes[v].cnt -= <span class="hljs-number">1</span><br>            <span class="hljs-keyword">if</span> temp.nodes[v].cnt == <span class="hljs-number">0</span>:<br>                temp.nodes[v] = <span class="hljs-literal">None</span><br>                <span class="hljs-keyword">return</span><br>            temp = temp.nodes[v]<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get</span>(<span class="hljs-params">self, x</span>):<br>        ans = <span class="hljs-number">0</span><br>        temp = self.root<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">21</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>):<br>            v = (x &gt;&gt; i) &amp; <span class="hljs-number">1</span><br>            <span class="hljs-keyword">if</span> temp.nodes[v] <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>                ans |= (<span class="hljs-number">1</span> &lt;&lt; i)<br>                temp = temp.nodes[v]<br>            <span class="hljs-keyword">else</span>:<br>                temp = temp.nodes[v ^ <span class="hljs-number">1</span>]<br>        <span class="hljs-keyword">return</span> ans<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">maximumStrongPairXor</span>(<span class="hljs-params">self, nums</span>):<br>        ans = <span class="hljs-number">0</span><br>        nums.sort()<br>        n = <span class="hljs-built_in">len</span>(nums)<br>        l = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> r <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>            self.add(nums[r])<br>            <span class="hljs-keyword">while</span> nums[r] - nums[l] &gt; nums[l]:<br>                self.remove(nums[l])<br>                l += <span class="hljs-number">1</span><br>            ans = <span class="hljs-built_in">max</span>(ans, self.get(nums[r]))<br>        <span class="hljs-keyword">return</span> ans<br></code></pre></td></tr></table></figure><h3 id="Q2">Q2</h3><p><a href="https://leetcode.cn/problems/high-access-employees/">100128. 高访问员工</a></p><p>给你一个长度为 <code>n</code> 、下标从 <strong>0</strong> 开始的二维字符串数组 <code>access_times</code> 。对于每个 <code>i</code>（<code>0 &lt;= i &lt;= n - 1</code> ），<code>access_times[i][0]</code> 表示某位员工的姓名，<code>access_times[i][1]</code> 表示该员工的访问时间。<code>access_times</code> 中的所有条目都发生在同一天内。</p><p>访问时间用 <strong>四位</strong> 数字表示， 符合 <strong>24 小时制</strong> ，例如 <code>&quot;0800&quot;</code> 或 <code>&quot;2250&quot;</code> 。</p><p>如果员工在 <strong>同一小时内</strong> 访问系统 <strong>三次或更多</strong> ，则称其为 <strong>高访问</strong> 员工。</p><p>时间间隔正好相差一小时的时间 <strong>不</strong> 被视为同一小时内。例如，<code>&quot;0815&quot;</code> 和 <code>&quot;0915&quot;</code> 不属于同一小时内。</p><p>一天开始和结束时的访问时间不被计算为同一小时内。例如，<code>&quot;0005&quot;</code> 和 <code>&quot;2350&quot;</code> 不属于同一小时内。</p><p>以列表形式，按任意顺序，返回所有 <strong>高访问</strong> 员工的姓名。</p><p><strong>示例 1：</strong></p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs prolog">输入：access_times = [[<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-string">&quot;0549&quot;</span>],[<span class="hljs-string">&quot;b&quot;</span>,<span class="hljs-string">&quot;0457&quot;</span>],[<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-string">&quot;0532&quot;</span>],[<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-string">&quot;0621&quot;</span>],[<span class="hljs-string">&quot;b&quot;</span>,<span class="hljs-string">&quot;0540&quot;</span>]]<br>输出：[<span class="hljs-string">&quot;a&quot;</span>]<br>解释：<span class="hljs-string">&quot;a&quot;</span> 在时间段 [<span class="hljs-number">05</span>:<span class="hljs-number">32</span>, <span class="hljs-number">06</span>:<span class="hljs-number">31</span>] 内有三条访问记录，时间分别为 <span class="hljs-number">05</span>:<span class="hljs-number">32</span> 、<span class="hljs-number">05</span>:<span class="hljs-number">49</span> 和 <span class="hljs-number">06</span>:<span class="hljs-number">21</span> 。<br>但是 <span class="hljs-string">&quot;b&quot;</span> 的访问记录只有两条。<br>因此，答案是 [<span class="hljs-string">&quot;a&quot;</span>] 。<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs prolog">输入：access_times = [[<span class="hljs-string">&quot;d&quot;</span>,<span class="hljs-string">&quot;0002&quot;</span>],[<span class="hljs-string">&quot;c&quot;</span>,<span class="hljs-string">&quot;0808&quot;</span>],[<span class="hljs-string">&quot;c&quot;</span>,<span class="hljs-string">&quot;0829&quot;</span>],[<span class="hljs-string">&quot;e&quot;</span>,<span class="hljs-string">&quot;0215&quot;</span>],[<span class="hljs-string">&quot;d&quot;</span>,<span class="hljs-string">&quot;1508&quot;</span>],[<span class="hljs-string">&quot;d&quot;</span>,<span class="hljs-string">&quot;1444&quot;</span>],[<span class="hljs-string">&quot;d&quot;</span>,<span class="hljs-string">&quot;1410&quot;</span>],[<span class="hljs-string">&quot;c&quot;</span>,<span class="hljs-string">&quot;0809&quot;</span>]]<br>输出：[<span class="hljs-string">&quot;c&quot;</span>,<span class="hljs-string">&quot;d&quot;</span>]<br>解释：<span class="hljs-string">&quot;c&quot;</span> 在时间段 [<span class="hljs-number">08</span>:<span class="hljs-number">08</span>, <span class="hljs-number">09</span>:<span class="hljs-number">07</span>] 内有三条访问记录，时间分别为 <span class="hljs-number">08</span>:<span class="hljs-number">08</span> 、<span class="hljs-number">08</span>:<span class="hljs-number">09</span> 和 <span class="hljs-number">08</span>:<span class="hljs-number">29</span> 。<br><span class="hljs-string">&quot;d&quot;</span> 在时间段 [<span class="hljs-number">14</span>:<span class="hljs-number">10</span>, <span class="hljs-number">15</span>:<span class="hljs-number">09</span>] 内有三条访问记录，时间分别为 <span class="hljs-number">14</span>:<span class="hljs-number">10</span> 、<span class="hljs-number">14</span>:<span class="hljs-number">44</span> 和 <span class="hljs-number">15</span>:<span class="hljs-number">08</span> 。<br>然而，<span class="hljs-string">&quot;e&quot;</span> 只有一条访问记录，因此不能包含在答案中，最终答案是 [<span class="hljs-string">&quot;c&quot;</span>,<span class="hljs-string">&quot;d&quot;</span>] 。<br></code></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs prolog">输入：access_times = [[<span class="hljs-string">&quot;cd&quot;</span>,<span class="hljs-string">&quot;1025&quot;</span>],[<span class="hljs-string">&quot;ab&quot;</span>,<span class="hljs-string">&quot;1025&quot;</span>],[<span class="hljs-string">&quot;cd&quot;</span>,<span class="hljs-string">&quot;1046&quot;</span>],[<span class="hljs-string">&quot;cd&quot;</span>,<span class="hljs-string">&quot;1055&quot;</span>],[<span class="hljs-string">&quot;ab&quot;</span>,<span class="hljs-string">&quot;1124&quot;</span>],[<span class="hljs-string">&quot;ab&quot;</span>,<span class="hljs-string">&quot;1120&quot;</span>]]<br>输出：[<span class="hljs-string">&quot;ab&quot;</span>,<span class="hljs-string">&quot;cd&quot;</span>]<br>解释：<span class="hljs-string">&quot;ab&quot;</span>在时间段 [<span class="hljs-number">10</span>:<span class="hljs-number">25</span>, <span class="hljs-number">11</span>:<span class="hljs-number">24</span>] 内有三条访问记录，时间分别为 <span class="hljs-number">10</span>:<span class="hljs-number">25</span> 、<span class="hljs-number">11</span>:<span class="hljs-number">20</span> 和 <span class="hljs-number">11</span>:<span class="hljs-number">24</span> 。<br><span class="hljs-string">&quot;cd&quot;</span> 在时间段 [<span class="hljs-number">10</span>:<span class="hljs-number">25</span>, <span class="hljs-number">11</span>:<span class="hljs-number">24</span>] 内有三条访问记录，时间分别为 <span class="hljs-number">10</span>:<span class="hljs-number">25</span> 、<span class="hljs-number">10</span>:<span class="hljs-number">46</span> 和 <span class="hljs-number">10</span>:<span class="hljs-number">55</span> 。<br>因此，答案是 [<span class="hljs-string">&quot;ab&quot;</span>,<span class="hljs-string">&quot;cd&quot;</span>] 。<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= access_times.length &lt;= 100</code></li><li><code>access_times[i].length == 2</code></li><li><code>1 &lt;= access_times[i][0].length &lt;= 10</code></li><li><code>access_times[i][0]</code> 仅由小写英文字母组成。</li><li><code>access_times[i][1].length == 4</code></li><li><code>access_times[i][1]</code> 采用24小时制表示时间。</li><li><code>access_times[i][1]</code> 仅由数字 <code>'0'</code> 到 <code>'9'</code> 组成。</li></ul><p>根据每个人分组，排序时间，滑动窗口即可，如果有一个小时内超过三次的，就添加到ans当中。时间复杂度<code>O(Lnlogn)</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">findHighAccessEmployees</span>(<span class="hljs-params">self, access_times: <span class="hljs-type">List</span>[<span class="hljs-type">List</span>[<span class="hljs-built_in">str</span>]]</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-built_in">str</span>]:<br>        mp = &#123;&#125;<br>        ans = []<br>        <span class="hljs-keyword">for</span> x, y <span class="hljs-keyword">in</span> access_times:<br>            <span class="hljs-keyword">if</span> x <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> mp:<br>                mp[x] = []<br>            mp[x].append(y)<br><br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">check</span>(<span class="hljs-params">s1: <span class="hljs-built_in">str</span>, s2: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">bool</span>:<br>            h1 = <span class="hljs-built_in">int</span>(s1[:<span class="hljs-number">2</span>])<br>            m1 = <span class="hljs-built_in">int</span>(s1[<span class="hljs-number">2</span>:])<br>            h2 = <span class="hljs-built_in">int</span>(s2[:<span class="hljs-number">2</span>])<br>            m2 = <span class="hljs-built_in">int</span>(s2[<span class="hljs-number">2</span>:])<br>            diff = m1 - m2 + (h1 - h2) * <span class="hljs-number">60</span><br>            <span class="hljs-keyword">return</span> diff &lt; <span class="hljs-number">60</span><br><br>        <span class="hljs-keyword">for</span> x, v <span class="hljs-keyword">in</span> mp.items():<br>            v.sort()<br>            n = <span class="hljs-built_in">len</span>(v)<br>            <span class="hljs-keyword">if</span> n &lt; <span class="hljs-number">3</span>: <span class="hljs-keyword">continue</span><br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>, n):<br>                s1, s2 = v[i], v[i - <span class="hljs-number">2</span>]<br>                <span class="hljs-keyword">if</span> check(s1, s2):<br>                    ans.append(x)<br>                    <span class="hljs-keyword">break</span><br><br>        <span class="hljs-keyword">return</span> ans<br></code></pre></td></tr></table></figure><h3 id="Q3">Q3</h3><p><a href="https://leetcode.cn/problems/minimum-operations-to-maximize-last-elements-in-arrays/">100117. 最大化数组末位元素的最少操作次数</a></p><p>给你两个下标从 <strong>0</strong> 开始的整数数组 <code>nums1</code> 和 <code>nums2</code> ，这两个数组的长度都是 <code>n</code> 。</p><p>你可以执行一系列 <strong>操作（可能不执行）</strong>。</p><p>在每次操作中，你可以选择一个在范围 <code>[0, n - 1]</code> 内的下标 <code>i</code> ，并交换 <code>nums1[i]</code> 和 <code>nums2[i]</code> 的值。</p><p>你的任务是找到满足以下条件所需的 <strong>最小</strong> 操作次数：</p><ul><li><code>nums1[n - 1]</code> 等于 <code>nums1</code> 中所有元素的 <strong>最大值</strong> ，即 <code>nums1[n - 1] = max(nums1[0], nums1[1], ..., nums1[n - 1])</code> 。</li><li><code>nums2[n - 1]</code> 等于 <code>nums2</code> 中所有元素的 <strong>最大值</strong> ，即 <code>nums2[n - 1] = max(nums2[0], nums2[1], ..., nums2[n - 1])</code> 。</li></ul><p>以整数形式，表示并返回满足上述 <strong>全部</strong> 条件所需的 <strong>最小</strong> 操作次数，如果无法同时满足两个条件，则返回 <code>-1</code> 。</p><p><strong>示例 1：</strong></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs stylus">输入：nums1 = <span class="hljs-selector-attr">[1,2,7]</span>，nums2 = <span class="hljs-selector-attr">[4,5,3]</span><br>输出：<span class="hljs-number">1</span><br>解释：在这个示例中，可以选择下标 <span class="hljs-selector-tag">i</span> = <span class="hljs-number">2</span> 执行一次操作。<br>交换 nums1<span class="hljs-selector-attr">[2]</span> 和 nums2<span class="hljs-selector-attr">[2]</span> 的值，nums1 变为 <span class="hljs-selector-attr">[1,2,3]</span> ，nums2 变为 <span class="hljs-selector-attr">[4,5,7]</span> 。<br>同时满足两个条件。<br>可以证明，需要执行的最小操作次数为 <span class="hljs-number">1</span> 。<br>因此，答案是 <span class="hljs-number">1</span> 。<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs stylus">输入：nums1 = <span class="hljs-selector-attr">[2,3,4,5,9]</span>，nums2 = <span class="hljs-selector-attr">[8,8,4,4,4]</span><br>输出：<span class="hljs-number">2</span><br>解释：在这个示例中，可以执行以下操作：<br>首先，选择下标 <span class="hljs-selector-tag">i</span> = <span class="hljs-number">4</span> 执行操作。<br>交换 nums1<span class="hljs-selector-attr">[4]</span> 和 nums2<span class="hljs-selector-attr">[4]</span> 的值，nums1 变为 <span class="hljs-selector-attr">[2,3,4,5,4]</span> ，nums2 变为 <span class="hljs-selector-attr">[8,8,4,4,9]</span> 。<br>然后，选择下标 <span class="hljs-selector-tag">i</span> = <span class="hljs-number">3</span> 执行操作。<br>交换 nums1<span class="hljs-selector-attr">[3]</span> 和 nums2<span class="hljs-selector-attr">[3]</span> 的值，nums1 变为 <span class="hljs-selector-attr">[2,3,4,4,4]</span> ，nums2 变为 <span class="hljs-selector-attr">[8,8,4,5,9]</span> 。<br>同时满足两个条件。 <br>可以证明，需要执行的最小操作次数为 <span class="hljs-number">2</span> 。 <br>因此，答案是 <span class="hljs-number">2</span> 。<br></code></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gcode">输入：<span class="hljs-symbol">nums1</span> = [<span class="hljs-number">1</span>,<span class="hljs-number">5</span>,<span class="hljs-number">4</span>]，<span class="hljs-symbol">nums2</span> = [<span class="hljs-number">2</span>,<span class="hljs-number">5</span>,<span class="hljs-number">3</span>]<br>输出：<span class="hljs-number">-1</span><br>解释：在这个示例中，无法同时满足两个条件。<br>因此，答案是 <span class="hljs-number">-1</span> 。<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= n == nums1.length == nums2.length &lt;= 1000</code></li><li><code>1 &lt;= nums1[i] &lt;= 109</code></li><li><code>1 &lt;= nums2[i] &lt;= 109</code></li></ul><p>显然，如果两个数组中的最大值不位于<code>nums1[n - 1]</code>或<code>nums2[n - 1]</code>，一定不符合要求，那么结果就只有两种可能了，第一种是不交换最后一对，计算需要交换多少次，另一个就是交换最后一对需要计算多少次，取最小值即可，如果中间有不符合的情况直接返回-1即可。时间复杂度<code>O(n)</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs python">lass Solution:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">minOperations</span>(<span class="hljs-params">self, nums1: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>], nums2: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-built_in">int</span>:<br>        n1 = copy.deepcopy(nums1)<br>        n2 = copy.deepcopy(nums2)<br>        mx1, mx2 = <span class="hljs-built_in">max</span>(nums1), <span class="hljs-built_in">max</span>(nums2)<br>        mx = <span class="hljs-built_in">max</span>(mx1, mx2)<br>        <span class="hljs-keyword">if</span> mx != nums1[-<span class="hljs-number">1</span>] <span class="hljs-keyword">and</span> mx != nums2[-<span class="hljs-number">1</span>]:<br>            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span><br><br>        <span class="hljs-comment"># 不交换最后一个</span><br>        ans = <span class="hljs-number">0</span><br>        n = <span class="hljs-built_in">len</span>(nums2)<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n - <span class="hljs-number">2</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>):<br>            <span class="hljs-keyword">if</span> nums1[i] &lt;= nums1[-<span class="hljs-number">1</span>] <span class="hljs-keyword">and</span> nums2[i] &lt;= nums2[-<span class="hljs-number">1</span>]:<br>                <span class="hljs-keyword">continue</span><br>            <span class="hljs-keyword">else</span>:<br>                nums2[i], nums1[i] = nums1[i], nums2[i]<br>                ans += <span class="hljs-number">1</span><br>                <span class="hljs-keyword">if</span> nums1[i] &gt; nums1[-<span class="hljs-number">1</span>] <span class="hljs-keyword">or</span> nums2[i] &gt; nums2[-<span class="hljs-number">1</span>]:<br>                    <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span><br><br>        <span class="hljs-comment"># 交换最后一个</span><br>        nums1 = copy.deepcopy(n1)<br>        nums2 = copy.deepcopy(n2)<br>        ans1 = <span class="hljs-number">1</span><br>        nums1[-<span class="hljs-number">1</span>], nums2[-<span class="hljs-number">1</span>] = nums2[-<span class="hljs-number">1</span>], nums1[-<span class="hljs-number">1</span>]<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n - <span class="hljs-number">2</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>):<br>            <span class="hljs-keyword">if</span> nums1[i] &lt;= nums1[-<span class="hljs-number">1</span>] <span class="hljs-keyword">and</span> nums2[i] &lt;= nums2[-<span class="hljs-number">1</span>]:<br>                <span class="hljs-keyword">continue</span><br>            <span class="hljs-keyword">else</span>:<br>                nums2[i], nums1[i] = nums1[i], nums2[i]<br>                ans1 += <span class="hljs-number">1</span><br>                <span class="hljs-keyword">if</span> nums1[i] &gt; nums1[-<span class="hljs-number">1</span>] <span class="hljs-keyword">or</span> nums2[i] &gt; nums2[-<span class="hljs-number">1</span>]:<br>                    <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">min</span>(ans, ans1)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>leetcode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode-W117</title>
    <link href="/2023/11/12/LeetCode-W117/"/>
    <url>/2023/11/12/LeetCode-W117/</url>
    
    <content type="html"><![CDATA[<h3 id="Q1-Q2">Q1&amp;Q2</h3><p><a href="https://leetcode.cn/problems/distribute-candies-among-children-ii/">100127. 给小朋友们分糖果</a></p><p>给你两个正整数 <code>n</code> 和 <code>limit</code> 。</p><p>请你将 <code>n</code> 颗糖果分给 <code>3</code> 位小朋友，确保没有任何小朋友得到超过 <code>limit</code> 颗糖果，请你返回满足此条件下的 <strong>总方案数</strong> 。</p><p><strong>示例 1：</strong></p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs tap">输入：n = 5, limit = 2<br>输出：3<br>解释：总共有<span class="hljs-number"> 3 </span>种方法分配<span class="hljs-number"> 5 </span>颗糖果，且每位小朋友的糖果数不超过<span class="hljs-number"> 2 </span>：(1, 2, 2) ，(2, 1, 2) 和 (2, 2, 1) 。<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs tap">输入：n = 3, limit = 3<br>输出：10<br>解释：总共有<span class="hljs-number"> 10 </span>种方法分配<span class="hljs-number"> 3 </span>颗糖果，且每位小朋友的糖果数不超过<span class="hljs-number"> 3 </span>：(0, 0, 3) ，(0, 1, 2) ，(0, 2, 1) ，(0, 3, 0) ，(1, 0, 2) ，(1, 1, 1) ，(1, 2, 0) ，(2, 0, 1) ，(2, 1, 0) 和 (3, 0, 0) 。<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= n &lt;= 106</code></li><li><code>1 &lt;= limit &lt;= 106</code></li></ul><h4 id="解法一">解法一</h4><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>的思考方式</p><p>因为需要分给3个人，可以考虑先分一个人，然后计算剩下的糖果分给两个人的方案，考虑满足要求第一个人的糖果数量<code>x</code>,<code>0 &lt;= x &lt;= min(limit, n)</code>,则剩下的两个人分的糖果数量<code>k</code>为<code>max(0, n - limit) &lt;= k &lt;= n</code>,若<code>k &lt;= limit</code>则有<code>k + 1</code>种方案,若<code>k &gt; limit</code>,则有(<code>limit - (k - limit) + 1</code>)种方案</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">distributeCandies</span>(<span class="hljs-params">self, n: <span class="hljs-built_in">int</span>, limit: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>        ans = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">max</span>(<span class="hljs-number">0</span>, n - limit), n + <span class="hljs-number">1</span>):<br>            <span class="hljs-keyword">if</span> i &gt; limit * <span class="hljs-number">2</span>:<br>                <span class="hljs-keyword">return</span> ans<br>            <span class="hljs-keyword">if</span> limit &gt;= i:<br>                ans += i + <span class="hljs-number">1</span><br>            <span class="hljs-keyword">else</span>:<br>                ans += limit - (i - limit) + <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> ans<br></code></pre></td></tr></table></figure><h4 id="解法二">解法二</h4><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span>的思考方式</p><p>正难则反,计算全部的方案数再减去不符合的方案数，用隔板法计算n个糖果分给x个人有多少种方案的公式为C(n-1, x - 1),但本题要求可以分0个，可以假设确保每人至少一个，那么总糖果数就为n + 3个，这样就可以继续套公式了，本题的公式就为<code>C(n + 2, 2)</code>。利用容斥原理计算有多少个不符合(<code>不符合一个</code> - <code>不符合两个</code> + <code>不符合三个</code>)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">distributeCandies</span>(<span class="hljs-params">self, n: <span class="hljs-built_in">int</span>, limit: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">c</span>(<span class="hljs-params">x: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span> <span class="hljs-keyword">if</span> x &lt; <span class="hljs-number">0</span> <span class="hljs-keyword">else</span> x * (x - <span class="hljs-number">1</span>) // <span class="hljs-number">2</span><br><br>        <span class="hljs-keyword">return</span> c(n + <span class="hljs-number">2</span>) - <span class="hljs-number">3</span> * c(n - limit + <span class="hljs-number">1</span>) + <span class="hljs-number">3</span> * c(n - <span class="hljs-number">2</span> * limit) - c(n - <span class="hljs-number">3</span> * limit - <span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><h3 id="Q3">Q3</h3><p><a href="https://leetcode.cn/problems/number-of-strings-which-can-be-rearranged-to-contain-substring/">100126. 重新排列后包含指定子字符串的字符串数目</a></p><p>给你一个整数 <code>n</code> 。</p><p>如果一个字符串 <code>s</code> 只包含小写英文字母，<strong>且</strong> 将 <code>s</code> 的字符重新排列后，新字符串包含 <strong>子字符串</strong> <code>&quot;leet&quot;</code> ，那么我们称字符串 <code>s</code> 是一个 <strong>好</strong> 字符串。</p><p>比方说：</p><ul><li>字符串 <code>&quot;lteer&quot;</code> 是好字符串，因为重新排列后可以得到 <code>&quot;leetr&quot;</code> 。</li><li><code>&quot;letl&quot;</code> 不是好字符串，因为无法重新排列并得到子字符串 <code>&quot;leet&quot;</code> 。</li></ul><p>请你返回长度为 <code>n</code> 的好字符串 <strong>总</strong> 数目。</p><p>由于答案可能很大，将答案对 <code>109 + 7</code> <strong>取余</strong> 后返回。</p><p><strong>子字符串</strong> 是一个字符串中一段连续的字符序列。</p><p><strong>示例 1：</strong></p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs abnf">输入：n <span class="hljs-operator">=</span> <span class="hljs-number">4</span><br>输出：<span class="hljs-number">12</span><br>解释：总共有 <span class="hljs-number">12</span> 个字符串重新排列后包含子字符串 <span class="hljs-string">&quot;leet&quot;</span> ：<span class="hljs-string">&quot;eelt&quot;</span> ，<span class="hljs-string">&quot;eetl&quot;</span> ，<span class="hljs-string">&quot;elet&quot;</span> ，<span class="hljs-string">&quot;elte&quot;</span> ，<span class="hljs-string">&quot;etel&quot;</span> ，<span class="hljs-string">&quot;etle&quot;</span> ，<span class="hljs-string">&quot;leet&quot;</span> ，<span class="hljs-string">&quot;lete&quot;</span> ，<span class="hljs-string">&quot;ltee&quot;</span> ，<span class="hljs-string">&quot;teel&quot;</span> ，<span class="hljs-string">&quot;tele&quot;</span> 和 <span class="hljs-string">&quot;tlee&quot;</span> 。<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs tap">输入：n = 10<br>输出：83943898<br>解释：长度为<span class="hljs-number"> 10 </span>的字符串重新排列后包含子字符串 &quot;leet&quot; 的方案数为<span class="hljs-number"> 526083947580 </span>。所以答案为<span class="hljs-number"> 526083947580 </span>% (109 + 7) =<span class="hljs-number"> 83943898 </span>。<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= n &lt;= 105</code></li></ul><h4 id="解法一-2">解法一</h4><p>容斥原理。正难则反,计算出全部方案减去不符合的方案。利用容斥原理计算不符合的方案。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">stringCount</span>(<span class="hljs-params">self, n: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br><br>        mod = <span class="hljs-number">10</span> ** <span class="hljs-number">9</span> + <span class="hljs-number">7</span><br><br>        s = <span class="hljs-built_in">pow</span>(<span class="hljs-number">26</span>, n, mod)<br><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        一个不符合类型</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        no_l = <span class="hljs-built_in">pow</span>(<span class="hljs-number">25</span>, n, mod)<br>        no_t = <span class="hljs-built_in">pow</span>(<span class="hljs-number">25</span>, n, mod)<br>        no_e_or_ee = <span class="hljs-built_in">pow</span>(<span class="hljs-number">25</span>, n, mod) + n * <span class="hljs-built_in">pow</span>(<span class="hljs-number">25</span>, n - <span class="hljs-number">1</span>, mod)<br><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        两个不符合</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        no_lt = <span class="hljs-built_in">pow</span>(<span class="hljs-number">24</span>, n, mod)<br>        no_le = <span class="hljs-built_in">pow</span>(<span class="hljs-number">24</span>, n, mod) + n * <span class="hljs-built_in">pow</span>(<span class="hljs-number">24</span>, n - <span class="hljs-number">1</span>, mod)<br>        no_te = <span class="hljs-built_in">pow</span>(<span class="hljs-number">24</span>, n, mod) + n * <span class="hljs-built_in">pow</span>(<span class="hljs-number">24</span>, n - <span class="hljs-number">1</span>, mod)<br><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        三个不符合</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        no_let = <span class="hljs-built_in">pow</span>(<span class="hljs-number">23</span>, n, mod) + n * <span class="hljs-built_in">pow</span>(<span class="hljs-number">23</span>, n - <span class="hljs-number">1</span>, mod)<br><br>        <span class="hljs-keyword">return</span> (s - (no_l + no_t + no_e_or_ee) + (no_lt + no_le + no_te) - no_let) % mod<br></code></pre></td></tr></table></figure><h4 id="解法二-2">解法二</h4><p>将题目意思转换下: n次选择的机会每次选择的包含26个字母，其中包含1个l,1个t,2个e的方案,可以使用状压DP来解决本问题，选择1个t和两个t的效果是一样的，因此可以进一步压缩状态。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@cache</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">f</span>(<span class="hljs-params">i: <span class="hljs-built_in">int</span>, l: <span class="hljs-built_in">int</span>, e: <span class="hljs-built_in">int</span>, t: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>    <span class="hljs-keyword">if</span> i == <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span> <span class="hljs-keyword">if</span> l == e == t == <span class="hljs-number">0</span> <span class="hljs-keyword">else</span> <span class="hljs-number">0</span><br>    res = f(i - <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, e, t)<br>    res += f(i - <span class="hljs-number">1</span>, l, e, <span class="hljs-number">0</span>)<br>    res += f(i - <span class="hljs-number">1</span>, l, <span class="hljs-built_in">max</span>(<span class="hljs-number">0</span>, e - <span class="hljs-number">1</span>), t)<br>    res += f(i - <span class="hljs-number">1</span>, l, e, t) * <span class="hljs-number">23</span><br>    <span class="hljs-keyword">return</span> res % (<span class="hljs-number">10</span> ** <span class="hljs-number">9</span> + <span class="hljs-number">7</span>)<br><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">stringCount</span>(<span class="hljs-params">self, n: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>        <span class="hljs-keyword">return</span> f(n, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><h3 id="Q4">Q4</h3><p><a href="https://leetcode.cn/problems/maximum-spending-after-buying-items/">100043. 购买物品的最大开销</a></p><p>给你一个下标从 <strong>0</strong> 开始大小为 <code>m * n</code> 的整数矩阵 <code>values</code> ，表示 <code>m</code> 个不同商店里 <code>m * n</code> 件不同的物品。每个商店有 <code>n</code> 件物品，第 <code>i</code> 个商店的第 <code>j</code> 件物品的价值为 <code>values[i][j]</code> 。除此以外，第 <code>i</code> 个商店的物品已经按照价值非递增排好序了，也就是说对于所有 <code>0 &lt;= j &lt; n - 1</code> 都有 <code>values[i][j] &gt;= values[i][j + 1]</code> 。</p><p>每一天，你可以在一个商店里购买一件物品。具体来说，在第 <code>d</code> 天，你可以：</p><ul><li>选择商店 <code>i</code> 。</li><li>购买数组中最右边的物品 <code>j</code> ，开销为 <code>values[i][j] * d</code> 。换句话说，选择该商店中还没购买过的物品中最大的下标 <code>j</code> ，并且花费 <code>values[i][j] * d</code> 去购买。</li></ul><p><strong>注意</strong>，所有物品都视为不同的物品。比方说如果你已经从商店 <code>1</code> 购买了物品 <code>0</code> ，你还可以在别的商店里购买其他商店的物品 <code>0</code> 。</p><p>请你返回购买所有 <code>m * n</code> 件物品需要的 <strong>最大开销</strong> 。</p><p><strong>示例 1：</strong></p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs tap">输入：values = [[8,5,2],[6,4,1],[9,7,3]]<br>输出：285<br>解释：第一天，从商店<span class="hljs-number"> 1 </span>购买物品<span class="hljs-number"> 2 </span>，开销为 values[1][2] *<span class="hljs-number"> 1 </span>=<span class="hljs-number"> 1 </span>。<br>第二天，从商店<span class="hljs-number"> 0 </span>购买物品<span class="hljs-number"> 2 </span>，开销为 values[0][2] *<span class="hljs-number"> 2 </span>=<span class="hljs-number"> 4 </span>。<br>第三天，从商店<span class="hljs-number"> 2 </span>购买物品<span class="hljs-number"> 2 </span>，开销为 values[2][2] *<span class="hljs-number"> 3 </span>=<span class="hljs-number"> 9 </span>。<br>第四天，从商店<span class="hljs-number"> 1 </span>购买物品<span class="hljs-number"> 1 </span>，开销为 values[1][1] *<span class="hljs-number"> 4 </span>=<span class="hljs-number"> 16 </span>。<br>第五天，从商店<span class="hljs-number"> 0 </span>购买物品<span class="hljs-number"> 1 </span>，开销为 values[0][1] *<span class="hljs-number"> 5 </span>=<span class="hljs-number"> 25 </span>。<br>第六天，从商店<span class="hljs-number"> 1 </span>购买物品<span class="hljs-number"> 0 </span>，开销为 values[1][0] *<span class="hljs-number"> 6 </span>=<span class="hljs-number"> 36 </span>。<br>第七天，从商店<span class="hljs-number"> 2 </span>购买物品<span class="hljs-number"> 1 </span>，开销为 values[2][1] *<span class="hljs-number"> 7 </span>=<span class="hljs-number"> 49 </span>。<br>第八天，从商店<span class="hljs-number"> 0 </span>购买物品<span class="hljs-number"> 0 </span>，开销为 values[0][0] *<span class="hljs-number"> 8 </span>=<span class="hljs-number"> 64 </span>。<br>第九天，从商店<span class="hljs-number"> 2 </span>购买物品<span class="hljs-number"> 0 </span>，开销为 values[2][0] *<span class="hljs-number"> 9 </span>=<span class="hljs-number"> 81 </span>。<br>所以总开销为<span class="hljs-number"> 285 </span>。<br>285 是购买所有 m * n 件物品的最大总开销。<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs tap">输入：values = [[10,8,6,4,2],[9,7,5,3,2]]<br>输出：386<br>解释：第一天，从商店<span class="hljs-number"> 0 </span>购买物品<span class="hljs-number"> 4 </span>，开销为 values[0][4] *<span class="hljs-number"> 1 </span>=<span class="hljs-number"> 2 </span>。<br>第二天，从商店<span class="hljs-number"> 1 </span>购买物品<span class="hljs-number"> 4 </span>，开销为 values[1][4] *<span class="hljs-number"> 2 </span>=<span class="hljs-number"> 4 </span>。<br>第三天，从商店<span class="hljs-number"> 1 </span>购买物品<span class="hljs-number"> 3 </span>，开销为 values[1][3] *<span class="hljs-number"> 3 </span>=<span class="hljs-number"> 9 </span>。<br>第四天，从商店<span class="hljs-number"> 0 </span>购买物品<span class="hljs-number"> 3 </span>，开销为 values[0][3] *<span class="hljs-number"> 4 </span>=<span class="hljs-number"> 16 </span>。<br>第五天，从商店<span class="hljs-number"> 1 </span>购买物品<span class="hljs-number"> 2 </span>，开销为 values[1][2] *<span class="hljs-number"> 5 </span>=<span class="hljs-number"> 25 </span>。<br>第六天，从商店<span class="hljs-number"> 0 </span>购买物品<span class="hljs-number"> 2 </span>，开销为 values[0][2] *<span class="hljs-number"> 6 </span>=<span class="hljs-number"> 36 </span>。<br>第七天，从商店<span class="hljs-number"> 1 </span>购买物品<span class="hljs-number"> 1 </span>，开销为 values[1][1] *<span class="hljs-number"> 7 </span>=<span class="hljs-number"> 49 </span>。<br>第八天，从商店<span class="hljs-number"> 0 </span>购买物品<span class="hljs-number"> 1 </span>，开销为 values[0][1] *<span class="hljs-number"> 8 </span>=<span class="hljs-number"> 64 </span>。<br>第九天，从商店<span class="hljs-number"> 1 </span>购买物品<span class="hljs-number"> 0 </span>，开销为 values[1][0] *<span class="hljs-number"> 9 </span>=<span class="hljs-number"> 81 </span>。<br>第十天，从商店<span class="hljs-number"> 0 </span>购买物品<span class="hljs-number"> 0 </span>，开销为 values[0][0] *<span class="hljs-number"> 10 </span>=<span class="hljs-number"> 100 </span>。<br>所以总开销为<span class="hljs-number"> 386 </span>。<br>386 是购买所有 m * n 件物品的最大总开销。<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= m == values.length &lt;= 10</code></li><li><code>1 &lt;= n == values[i].length &lt;= 104</code></li><li><code>1 &lt;= values[i][j] &lt;= 106</code></li><li><code>values[i]</code> 按照非递增顺序排序。</li></ul><h4 id="解法一-3">解法一</h4><p>多路归并(归并排序)</p><p>贪心思想，从大的开始反着选，谁大就选谁，用堆模拟即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">maxSpending</span>(<span class="hljs-params">self, values: <span class="hljs-type">List</span>[<span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]]</span>) -&gt; <span class="hljs-built_in">int</span>:<br>        heap = []<br><br>        n, m = <span class="hljs-built_in">len</span>(values), <span class="hljs-built_in">len</span>(values[<span class="hljs-number">0</span>])<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>            heap.append((-values[i][<span class="hljs-number">0</span>], i, <span class="hljs-number">0</span>))<br><br>        heapify(heap)<br>        ans = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n * m, <span class="hljs-number">0</span>, -<span class="hljs-number">1</span>):<br>            poll = heappop(heap)<br>            v, x, y = poll[<span class="hljs-number">0</span>], poll[<span class="hljs-number">1</span>], poll[<span class="hljs-number">2</span>]<br>            ans += -i * v<br>            <span class="hljs-keyword">if</span> y &lt; m - <span class="hljs-number">1</span>: heappush(heap, (-values[x][y + <span class="hljs-number">1</span>], x, y + <span class="hljs-number">1</span>))<br>        <span class="hljs-keyword">return</span> ans<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>leetcode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>综合-BFS</title>
    <link href="/2023/11/09/%E7%BB%BC%E5%90%88-BFS/"/>
    <url>/2023/11/09/%E7%BB%BC%E5%90%88-BFS/</url>
    
    <content type="html"><![CDATA[<h1>综合-BFS</h1><blockquote><p><a href="https://leetcode.cn/problems/escape-the-spreading-fire/description/?envType=daily-question&amp;envId=2023-11-09">lc 2023/11/09每日一题</a></p></blockquote><p>给你一个下标从 <strong>0</strong> 开始大小为 <code>m x n</code> 的二维整数数组 <code>grid</code> ，它表示一个网格图。每个格子为下面 3 个值之一：</p><ul><li><code>0</code> 表示草地。</li><li><code>1</code> 表示着火的格子。</li><li><code>2</code> 表示一座墙，你跟火都不能通过这个格子。</li></ul><p>一开始你在最左上角的格子 <code>(0, 0)</code> ，你想要到达最右下角的安全屋格子 <code>(m - 1, n - 1)</code> 。每一分钟，你可以移动到 <strong>相邻</strong> 的草地格子。每次你移动 <strong>之后</strong> ，着火的格子会扩散到所有不是墙的 <strong>相邻</strong> 格子。</p><p>请你返回你在初始位置可以停留的 <strong>最多</strong> 分钟数，且停留完这段时间后你还能安全到达安全屋。如果无法实现，请你返回 <code>-1</code> 。如果不管你在初始位置停留多久，你 <strong>总是</strong> 能到达安全屋，请你返回 <code>109</code> 。</p><p>注意，如果你到达安全屋后，火马上到了安全屋，这视为你能够安全到达安全屋。</p><p>如果两个格子有共同边，那么它们为 <strong>相邻</strong> 格子。</p><p><strong>示例 1：</strong></p><p><img src="https://assets.leetcode.com/uploads/2022/03/10/ex1new.jpg" alt="img"></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs inform7">输入：grid = <span class="hljs-comment">[<span class="hljs-comment">[0,2,0,0,0,0,0]</span>,<span class="hljs-comment">[0,0,0,2,2,1,0]</span>,<span class="hljs-comment">[0,2,0,0,1,2,0]</span>,<span class="hljs-comment">[0,0,2,2,2,0,2]</span>,<span class="hljs-comment">[0,0,0,0,0,0,0]</span>]</span><br>输出：3<br>解释：上图展示了你在初始位置停留 3 分钟后的情形。<br>你仍然可以安全到达安全屋。<br>停留超过 3 分钟会让你无法安全到达安全屋。<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><p><img src="https://assets.leetcode.com/uploads/2022/03/10/ex2new2.jpg" alt="img"></p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs lua">输入：grid = <span class="hljs-string">[[0,0,0,0],[0,1,2,0],[0,2,0,0]]</span><br>输出：<span class="hljs-number">-1</span><br>解释：上图展示了你马上开始朝安全屋移动的情形。<br>火会蔓延到你可以移动的所有格子，所以无法安全到达安全屋。<br>所以返回 <span class="hljs-number">-1</span> 。<br></code></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><p><img src="https://assets.leetcode.com/uploads/2022/03/10/ex3new.jpg" alt="img"></p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs lua">输入：grid = <span class="hljs-string">[[0,0,0],[2,2,0],[1,2,0]]</span><br>输出：<span class="hljs-number">1000000000</span><br>解释：上图展示了初始网格图。<br>注意，由于火被墙围了起来，所以无论如何你都能安全到达安全屋。<br>所以返回 <span class="hljs-number">109</span> 。<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>m == grid.length</code></li><li><code>n == grid[i].length</code></li><li><code>2 &lt;= m, n &lt;= 300</code></li><li><code>4 &lt;= m * n &lt;= 2 * 104</code></li><li><code>grid[i][j]</code> 是 <code>0</code> ，<code>1</code> 或者 <code>2</code> 。</li><li><code>grid[0][0] == grid[m - 1][n - 1] == 0</code></li></ul><h3 id="解法一">解法一</h3><p>常规二分+bfs模拟，不多解释，时间复杂度O(nmlog(nm))</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> copy<br><span class="hljs-keyword">from</span> collections <span class="hljs-keyword">import</span> deque<br><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">List</span><br><br>DIRS = [(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>), (<span class="hljs-number">0</span>, -<span class="hljs-number">1</span>), (-<span class="hljs-number">1</span>, <span class="hljs-number">0</span>), (<span class="hljs-number">1</span>, <span class="hljs-number">0</span>)]<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">maximumMinutes</span>(<span class="hljs-params">self, grid: <span class="hljs-type">List</span>[<span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]]</span>) -&gt; <span class="hljs-built_in">int</span>:<br>        n, m = <span class="hljs-built_in">len</span>(grid), <span class="hljs-built_in">len</span>(grid[<span class="hljs-number">0</span>])<br><br>        l, r = <span class="hljs-number">0</span>, n * m<br><br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">check</span>(<span class="hljs-params">s: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">bool</span>:<br>            u = copy.deepcopy(grid)<br>            q = deque()<br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>                <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(m):<br>                    <span class="hljs-keyword">if</span> u[i][j] == <span class="hljs-number">1</span>:<br>                        q.append((i, j))<br>            <span class="hljs-keyword">while</span> s &gt; <span class="hljs-number">0</span>:<br>                le = <span class="hljs-built_in">len</span>(q)<br>                <span class="hljs-keyword">while</span> le &gt; <span class="hljs-number">0</span>:<br>                    poll = q.popleft()<br>                    x, y = poll[<span class="hljs-number">0</span>], poll[<span class="hljs-number">1</span>]<br>                    <span class="hljs-keyword">for</span> dx, dy <span class="hljs-keyword">in</span> DIRS:<br>                        xx, yy = x + dx, y + dy<br>                        <span class="hljs-keyword">if</span> n &gt; xx &gt;= <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> m &gt; yy &gt;= <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> u[xx][yy] == <span class="hljs-number">0</span>:<br>                            u[xx][yy] = <span class="hljs-number">1</span><br>                            q.append((xx, yy))<br>                    le -= <span class="hljs-number">1</span><br>                s -= <span class="hljs-number">1</span><br>            <span class="hljs-keyword">if</span> u[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] == <span class="hljs-number">1</span> <span class="hljs-keyword">or</span> u[n - <span class="hljs-number">1</span>][m - <span class="hljs-number">1</span>] == <span class="hljs-number">1</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>            q2 = deque()<br>            q2.append((<span class="hljs-number">0</span>, <span class="hljs-number">0</span>))<br>            vis = [[<span class="hljs-number">0</span>] * m <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n)]<br>            vis[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = <span class="hljs-number">1</span><br>            <span class="hljs-keyword">while</span> q2:<br>                sz2 = <span class="hljs-built_in">len</span>(q)<br>                flag = <span class="hljs-literal">False</span><br>                <span class="hljs-keyword">while</span> sz2:<br>                    poll = q.popleft()<br>                    x, y = poll[<span class="hljs-number">0</span>], poll[<span class="hljs-number">1</span>]<br>                    <span class="hljs-keyword">for</span> dx, dy <span class="hljs-keyword">in</span> DIRS:<br>                        xx, yy = x + dx, y + dy<br>                        <span class="hljs-keyword">if</span> n &gt; xx &gt;= <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> m &gt; yy &gt;= <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> u[xx][yy] == <span class="hljs-number">0</span>:<br>                            u[xx][yy] = <span class="hljs-number">1</span><br>                            <span class="hljs-keyword">if</span> xx == n - <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> yy == m - <span class="hljs-number">1</span>:<br>                                flag = <span class="hljs-literal">True</span><br>                            q.append((xx, yy))<br>                    sz2 -= <span class="hljs-number">1</span><br>                sz1 = <span class="hljs-built_in">len</span>(q2)<br>                <span class="hljs-keyword">while</span> sz1:<br>                    poll = q2.popleft()<br>                    x, y = poll[<span class="hljs-number">0</span>], poll[<span class="hljs-number">1</span>]<br>                    <span class="hljs-keyword">if</span> x == n - <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> y == m - <span class="hljs-number">1</span>:<br>                        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>                    <span class="hljs-keyword">for</span> dx, dy <span class="hljs-keyword">in</span> DIRS:<br>                        xx, yy = x + dx, y + dy<br>                        <span class="hljs-keyword">if</span> n &gt; xx &gt;= <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> m &gt; yy &gt;= <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> (<br>                                u[xx][yy] == <span class="hljs-number">0</span> <span class="hljs-keyword">or</span> xx == n - <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> yy == m - <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> flag) <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> vis[xx][yy]:<br>                            q2.append((xx, yy))<br>                            vis[xx][yy] = <span class="hljs-number">1</span><br>                    sz1 -= <span class="hljs-number">1</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br>        <span class="hljs-keyword">while</span> l &lt; r:<br>            mid = (l + r + <span class="hljs-number">1</span>) // <span class="hljs-number">2</span><br>            <span class="hljs-keyword">if</span> check(mid):<br>                l = mid<br>            <span class="hljs-keyword">else</span>:<br>                r = mid - <span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> l == m * n:<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">10</span> ** <span class="hljs-number">9</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> l <span class="hljs-keyword">if</span> check(l) <span class="hljs-keyword">else</span> -<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h3 id="解法二">解法二</h3><p>O(nm)做法，单源BFS(人)+多源BFS(火)，计算出每个位置被人或者是火最早到达的时间分别为g1、g2,一个简单的设想，假设人可以到达安全位置(n - 1, m - 1)的话，那么答案为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>g</mi><mn>2</mn><mo stretchy="false">[</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>m</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo><mo>−</mo><mi>g</mi><mn>1</mn><mo stretchy="false">[</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>m</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">g2[n - 1][m - 1] - g1[n - 1][m - 1]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord">2</span><span class="mopen">[</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord">1</span><span class="mopen">[</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span></span></span></span>,但是这个答案是我们理想状态下的，并且是题目恰好有一个条件就是可以在安全位置允许火和人同时到达，但在这种情况下无法保证其他的可以到达的点都是人先到然后火后到，又由于<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo separator="true">,</mo><mi>m</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mtext>是由</mtext><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>2</mn><mo separator="true">,</mo><mi>m</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mtext>或者</mtext><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo separator="true">,</mo><mi>m</mi><mo>−</mo><mn>2</mn><mo stretchy="false">)</mo><mtext>而转移来的，那么只需要保证在对于这两个转移点</mtext></mrow><annotation encoding="application/x-tex">(n - 1, m - 1)是由(n - 2, m - 1)或者(n - 1, m - 2)而转移来的，那么只需要保证在对于这两个转移点</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8389em;vertical-align:-0.1944em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mord cjk_fallback">是由</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8389em;vertical-align:-0.1944em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mord cjk_fallback">或者</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8389em;vertical-align:-0.1944em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mclose">)</span><span class="mord cjk_fallback">而转移来的，那么只需要保证在对于这两个转移点</span></span></span></span><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>进行判断时</mtext><mo separator="true">,</mo><mtext>存在其一</mtext><mi>g</mi><mn>2</mn><mo stretchy="false">[</mo><mi>x</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>y</mi><mo stretchy="false">]</mo><mo>−</mo><mi>g</mi><mn>1</mn><mo stretchy="false">[</mo><mi>x</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>y</mi><mo stretchy="false">]</mo><mo>&gt;</mo><mo stretchy="false">(</mo><mi>g</mi><mn>2</mn><mo stretchy="false">[</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>m</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo><mo>−</mo><mi>g</mi><mn>1</mn><mo stretchy="false">[</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>m</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo><mo stretchy="false">)</mo><mtext>就可以保证答案为最</mtext></mrow><annotation encoding="application/x-tex">进行判断时,存在其一g2[x][y] - g1[x][y] &gt; (g2[n - 1][m - 1] - g1[n - 1][m - 1])就可以保证答案为最</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord cjk_fallback">进行判断时</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord cjk_fallback">存在其一</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord">2</span><span class="mopen">[</span><span class="mord mathnormal">x</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord">1</span><span class="mopen">[</span><span class="mord mathnormal">x</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord">2</span><span class="mopen">[</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord">1</span><span class="mopen">[</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">])</span><span class="mord cjk_fallback">就可以保证答案为最</span></span></span></span><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>理想的结果，否则则减一</mtext><mo separator="true">,</mo><mtext>减一一定可以保证人先到，火后到。</mtext></mrow><annotation encoding="application/x-tex">理想的结果，否则则减一,减一一定可以保证人先到，火后到。</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord cjk_fallback">理想的结果，否则则减一</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord cjk_fallback">减一一定可以保证人先到，火后到。</span></span></span></span></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> collections <span class="hljs-keyword">import</span> deque<br><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">List</span><br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">aa/bb  aa:人 bb:火</span><br><span class="hljs-string">理想情况</span><br><span class="hljs-string">xx/xx 12/12</span><br><span class="hljs-string">10/14 11/13</span><br><span class="hljs-string"></span><br><span class="hljs-string">特殊情况</span><br><span class="hljs-string">xx/xx 12/12</span><br><span class="hljs-string">10/12 11/13</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br>DIRS = [(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>), (<span class="hljs-number">0</span>, -<span class="hljs-number">1</span>), (-<span class="hljs-number">1</span>, <span class="hljs-number">0</span>), (<span class="hljs-number">1</span>, <span class="hljs-number">0</span>)]<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">maximumMinutes</span>(<span class="hljs-params">self, grid: <span class="hljs-type">List</span>[<span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]]</span>) -&gt; <span class="hljs-built_in">int</span>:<br>        n, m = <span class="hljs-built_in">len</span>(grid), <span class="hljs-built_in">len</span>(grid[<span class="hljs-number">0</span>])<br>        g1, g2 = [[-<span class="hljs-number">1</span>] * m <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n)], [[-<span class="hljs-number">1</span>] * m <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n)]<br>        q = deque()<br>        g1[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = <span class="hljs-number">0</span><br>        q.append((<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>))<br>        <span class="hljs-keyword">while</span> q:<br>            poll = q.popleft()<br>            x, y, v = poll[<span class="hljs-number">0</span>], poll[<span class="hljs-number">1</span>], poll[<span class="hljs-number">2</span>]<br>            <span class="hljs-keyword">for</span> dx, dy <span class="hljs-keyword">in</span> DIRS:<br>                xx, yy = x + dx, y + dy<br>                <span class="hljs-keyword">if</span> <span class="hljs-number">0</span> &lt;= xx &lt; n <span class="hljs-keyword">and</span> <span class="hljs-number">0</span> &lt;= yy &lt; m <span class="hljs-keyword">and</span> g1[xx][yy] == -<span class="hljs-number">1</span> <span class="hljs-keyword">and</span> grid[xx][yy] == <span class="hljs-number">0</span>:<br>                    g1[xx][yy] = v + <span class="hljs-number">1</span><br>                    q.append((xx, yy, v + <span class="hljs-number">1</span>))<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(m):<br>                <span class="hljs-keyword">if</span> grid[i][j] == <span class="hljs-number">1</span>:<br>                    g2[i][j] = <span class="hljs-number">0</span><br>                    q.append((i, j, <span class="hljs-number">0</span>))<br>        <span class="hljs-keyword">while</span> q:<br>            poll = q.popleft()<br>            x, y, v = poll[<span class="hljs-number">0</span>], poll[<span class="hljs-number">1</span>], poll[<span class="hljs-number">2</span>]<br>            <span class="hljs-keyword">for</span> dx, dy <span class="hljs-keyword">in</span> DIRS:<br>                xx, yy = x + dx, y + dy<br>                <span class="hljs-keyword">if</span> <span class="hljs-number">0</span> &lt;= xx &lt; n <span class="hljs-keyword">and</span> <span class="hljs-number">0</span> &lt;= yy &lt; m <span class="hljs-keyword">and</span> g2[xx][yy] == -<span class="hljs-number">1</span> <span class="hljs-keyword">and</span> grid[xx][yy] == <span class="hljs-number">0</span>:<br>                    g2[xx][yy] = v + <span class="hljs-number">1</span><br>                    q.append((xx, yy, v + <span class="hljs-number">1</span>))<br>        <span class="hljs-keyword">if</span> g1[n - <span class="hljs-number">1</span>][m - <span class="hljs-number">1</span>] == -<span class="hljs-number">1</span> <span class="hljs-keyword">or</span> g2[n - <span class="hljs-number">1</span>][m - <span class="hljs-number">1</span>] != -<span class="hljs-number">1</span> <span class="hljs-keyword">and</span> g2[n - <span class="hljs-number">1</span>][m - <span class="hljs-number">1</span>] &lt; g1[n - <span class="hljs-number">1</span>][m - <span class="hljs-number">1</span>]:<br>            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> g2[n - <span class="hljs-number">1</span>][m - <span class="hljs-number">1</span>] == -<span class="hljs-number">1</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">10</span> ** <span class="hljs-number">9</span><br>        d = g2[n - <span class="hljs-number">1</span>][m - <span class="hljs-number">1</span>] - g1[n - <span class="hljs-number">1</span>][m - <span class="hljs-number">1</span>]<br>        <span class="hljs-keyword">if</span> g1[n - <span class="hljs-number">2</span>][m - <span class="hljs-number">1</span>] + d &lt; g2[n - <span class="hljs-number">2</span>][m - <span class="hljs-number">1</span>] <span class="hljs-keyword">and</span> grid[n - <span class="hljs-number">2</span>][m - <span class="hljs-number">1</span>] != <span class="hljs-number">2</span> <span class="hljs-keyword">or</span> g1[n - <span class="hljs-number">1</span>][m - <span class="hljs-number">2</span>] + d &lt; g2[n - <span class="hljs-number">1</span>][<br>            m - <span class="hljs-number">2</span>] <span class="hljs-keyword">and</span> grid[n - <span class="hljs-number">1</span>][m - <span class="hljs-number">2</span>] != <span class="hljs-number">2</span>:<br>            <span class="hljs-keyword">return</span> d<br>        <span class="hljs-keyword">return</span> d - <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>杂项</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>RandomAccessFile</title>
    <link href="/2023/11/06/RandomAccessFile/"/>
    <url>/2023/11/06/RandomAccessFile/</url>
    
    <content type="html"><![CDATA[<h1>RandomAccessFile</h1><blockquote><p><code>RandomAccessFile</code> 是 Java 提供的用于读写文件的类，与普通的输入输出流不同的是，<code>RandomAccessFile</code> 具备随机访问文件的能力。</p></blockquote><h3 id="构造方法">构造方法</h3><p><code>RandomAccessFile</code> 的构造方法有两个参数，分别是文件名和访问模式。访问模式有&quot;r&quot;(只读)、“rw”(读写)、“rws”(读写并同步文件内容)、“rwd”(读写并同步文件元数据)四种。通过指定访问模式，我们可以决定<code>RandomAccessFile</code> 对文件的读写权限。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">RandomAccessFile</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RandomAccessFile</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;yk.txt&quot;</span>), <span class="hljs-string">&quot;rw&quot;</span>)<br></code></pre></td></tr></table></figure><h3 id="常用方法">常用方法</h3><ul><li><p>read</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">read</span><span class="hljs-params">(<span class="hljs-type">byte</span>[] b, <span class="hljs-type">int</span> off, <span class="hljs-type">int</span> len)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-keyword">return</span> readBytes(b, off, len);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>write</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">write</span><span class="hljs-params">(<span class="hljs-type">byte</span>[] b)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    writeBytes(b, <span class="hljs-number">0</span>, b.length);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>seek</p><p>Sets the file-pointer offset, measured from the beginning of this file, at which the next read or write occurs. The offset may be set beyond the end of the file. Setting the offset beyond the end of the file does not change the file length. The file length will change only by writing after the offset has been set beyond the end of the file.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">seek</span><span class="hljs-params">(<span class="hljs-type">long</span> pos)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-keyword">if</span> (pos &lt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IOException</span>(<span class="hljs-string">&quot;Negative seek offset&quot;</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        seek0(pos);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>getFilePointer</p><p>Returns the current offset in this file</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">native</span> <span class="hljs-type">long</span> <span class="hljs-title function_">getFilePointer</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException;<br></code></pre></td></tr></table></figure></li></ul><h3 id="案例一">案例一</h3><p>从一个文件读入输出到另一个文件</p><ul><li><p>常用的写法</p><ul><li><p>字节流</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">try</span> (<br>                <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fileInputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;yy.txt&quot;</span>);<br>                <span class="hljs-type">BufferedInputStream</span> <span class="hljs-variable">bri</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedInputStream</span>(fileInputStream);<br>                <span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">fileOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;yk.txt&quot;</span>);<br>                <span class="hljs-type">BufferedOutputStream</span> <span class="hljs-variable">bro</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedOutputStream</span>(fileOutputStream);<br>        ) &#123;<br>            <span class="hljs-type">int</span> len;<br>            <span class="hljs-type">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br>            <span class="hljs-keyword">while</span> ((len = bri.read(bytes)) != -<span class="hljs-number">1</span>) &#123;<br>                bro.write(bytes, <span class="hljs-number">0</span>, len);<br>            &#125;<br>        &#125;<br></code></pre></td></tr></table></figure></li><li><p>字符流</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">try</span>(<br>                <span class="hljs-type">FileReader</span> <span class="hljs-variable">fileReader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(<span class="hljs-string">&quot;yy.txt&quot;</span>);<br>                <span class="hljs-type">FileWriter</span> <span class="hljs-variable">fileWriter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWriter</span>(<span class="hljs-string">&quot;yk.txt&quot;</span>);<br>                <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">br</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(fileReader);<br>                <span class="hljs-type">BufferedWriter</span> <span class="hljs-variable">bw</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedWriter</span>(fileWriter);<br>                ) &#123;<br>            <span class="hljs-type">char</span>[] chars = <span class="hljs-keyword">new</span> <span class="hljs-title class_">char</span>[<span class="hljs-number">1024</span>];<br>            <span class="hljs-type">int</span> len;<br>            <span class="hljs-keyword">while</span> ((len = br.read(chars)) != -<span class="hljs-number">1</span>) &#123;<br>                bw.write(chars, <span class="hljs-number">0</span>, len);<br>            &#125;<br>        &#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>RandomAccessFile</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">try</span>(<br>                <span class="hljs-type">RandomAccessFile</span> <span class="hljs-variable">ri</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RandomAccessFile</span>(<span class="hljs-string">&quot;yy.txt&quot;</span>, <span class="hljs-string">&quot;rw&quot;</span>);<br>                <span class="hljs-type">RandomAccessFile</span> <span class="hljs-variable">ro</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RandomAccessFile</span>(<span class="hljs-string">&quot;yk.txt&quot;</span>, <span class="hljs-string">&quot;rw&quot;</span>);<br>                ) &#123;<br>            <span class="hljs-type">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br>            <span class="hljs-type">int</span> len;<br>            <span class="hljs-keyword">while</span> ((len = ri.read(bytes)) != -<span class="hljs-number">1</span>) &#123;<br>                ro.write(bytes, <span class="hljs-number">0</span>, len);<br>            &#125;<br>        &#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="案例二">案例二</h3><p>多个线程给不同的位置写字节</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ExecutorService</span> <span class="hljs-variable">executorService</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadPoolExecutor</span>(<span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">10</span>,<br>                TimeUnit.SECONDS, <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedBlockingQueue</span>&lt;&gt;());<br>        <span class="hljs-type">CountDownLatch</span> <span class="hljs-variable">countDownLatch</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CountDownLatch</span>(<span class="hljs-number">10</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>            <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> i;<br>            executorService.submit(() -&gt; &#123;<br>                <span class="hljs-keyword">try</span>(<span class="hljs-type">RandomAccessFile</span> <span class="hljs-variable">accessFile</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RandomAccessFile</span>(<span class="hljs-string">&quot;yk.txt&quot;</span>, <span class="hljs-string">&quot;rw&quot;</span>)) &#123;<br>                    accessFile.seek(s);<br>                    accessFile.write(String.valueOf(s).getBytes(StandardCharsets.UTF_8));<br>                &#125; <span class="hljs-keyword">catch</span> (Exception ignore)&#123;&#125;<br>                countDownLatch.countDown();<br>            &#125;);<br>        &#125;<br>        countDownLatch.await();<br>        executorService.shutdown();<br>        System.out.println(<span class="hljs-string">&quot;out&quot;</span>);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>IO</category>
      
    </categories>
    
    
    <tags>
      
      <tag>杂项</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>多线程缓存</title>
    <link href="/2023/11/02/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BC%93%E5%AD%98/"/>
    <url>/2023/11/02/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BC%93%E5%AD%98/</url>
    
    <content type="html"><![CDATA[<h1>多线程缓存</h1><blockquote><p>缓存作为当前服务端最常见的技术，若是在单线程前提下,缓存只需要一个HashMap即可,但在多线程的情况下就会出现很多问题</p></blockquote><p>实现<code>Computable</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Computable</span>&lt;A, V&gt; &#123;<br>    V <span class="hljs-title function_">compute</span><span class="hljs-params">(A args)</span>;   <br>&#125;<br></code></pre></td></tr></table></figure><h4 id="V1">V1</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Memo</span>&lt;A, V&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Computable</span>&lt;A, V&gt; &#123;<br>    <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> HashMap&lt;A, V&gt; hashMap;<br>    <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Computable&lt;A, V&gt; computable;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Memo</span><span class="hljs-params">(Computable&lt;A, V&gt; computable)</span> &#123;<br>        hashMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        <span class="hljs-built_in">this</span>.computable = computable;<br>    &#125;<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> V <span class="hljs-title function_">compute</span><span class="hljs-params">(A args)</span> &#123;<br>        <span class="hljs-keyword">if</span> (!hashMap.containsKey(args)) &#123;<br>            <span class="hljs-keyword">return</span> hashMap.get(args);<br>        &#125;<br>        <span class="hljs-type">V</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> computable.compute(args);<br>        hashMap.put(args, res);<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>不考虑并发场景,单线程下这样写足够。但在并发场景下,此代码会导致多次重复写。</p><h4 id="V2">V2</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Memo</span>&lt;A, V&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Computable</span>&lt;A, V&gt; &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> HashMap&lt;A, V&gt; hashMap;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Computable&lt;A, V&gt; computable;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Memo</span><span class="hljs-params">(Computable&lt;A, V&gt; computable)</span> &#123;<br>        hashMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        <span class="hljs-built_in">this</span>.computable = computable;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> V <span class="hljs-title function_">compute</span><span class="hljs-params">(A args)</span> &#123;<br>        <span class="hljs-keyword">if</span> (!hashMap.containsKey(args)) &#123;<br>            <span class="hljs-keyword">return</span> hashMap.get(args);<br>        &#125;<br>        <span class="hljs-type">V</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> computable.compute(args);<br>        hashMap.put(args, res);<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>完全解决了并发问题,非常安全,但是太慢了,每来一个都得等上一个执行完毕。</p><h4 id="V3">V3</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Memo</span>&lt;A, V&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Computable</span>&lt;A, V&gt; &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> ConcurrentHashMap&lt;A, V&gt; hashMap;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Computable&lt;A, V&gt; computable;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Memo</span><span class="hljs-params">(Computable&lt;A, V&gt; computable)</span> &#123;<br>        hashMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcurrentHashMap</span>&lt;&gt;();<br>        <span class="hljs-built_in">this</span>.computable = computable;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> V <span class="hljs-title function_">compute</span><span class="hljs-params">(A args)</span> &#123;<br>        <span class="hljs-keyword">if</span> (!hashMap.containsKey(args)) &#123;<br>            <span class="hljs-keyword">return</span> hashMap.get(args);<br>        &#125;<br>        <span class="hljs-type">V</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> computable.compute(args);<br>        hashMap.put(args, res);<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>解决了可以多个同时<code>compute</code>的问题,但又回到了最初有重复的问题(假设<code>compute</code>时间特别长)，有什么方式可以避免这些重复操作呢?如果能<code>异步执行</code>就好了。</p><p>V3</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Memo</span>&lt;A, V&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Computable</span>&lt;A, V&gt; &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> ConcurrentHashMap&lt;A, Future&lt;V&gt;&gt; hashMap;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Computable&lt;A, V&gt; computable;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Memo</span><span class="hljs-params">(Computable&lt;A, V&gt; computable)</span> &#123;<br>        hashMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcurrentHashMap</span>&lt;&gt;();<br>        <span class="hljs-built_in">this</span>.computable = computable;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> V <span class="hljs-title function_">compute</span><span class="hljs-params">(A args)</span> &#123;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            Future&lt;V&gt; future = hashMap.get(args);<br>            <span class="hljs-keyword">if</span> (future == <span class="hljs-literal">null</span>) &#123;<br>                Callable&lt;V&gt; eval = () -&gt; computable.compute(args);<br>                FutureTask&lt;V&gt; futureTask = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FutureTask</span>&lt;&gt;(eval);<br>                future = hashMap.putIfAbsent(args, futureTask);<br>                <span class="hljs-keyword">if</span> (future == <span class="hljs-literal">null</span>) &#123;<br>                    future = futureTask;<br>                    futureTask.run();<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">return</span> future.get();<br>            &#125; <span class="hljs-keyword">catch</span> (CancellationException e) &#123;<br>                hashMap.remove(args);<br>            &#125; <span class="hljs-keyword">catch</span> (ExecutionException | InterruptedException e) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalStateException</span>(e.getCause());<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>完美解决方案: 使用Future来存Value,异步执行Future，让重复的args等待一个的执行结果,并发性能优秀!</p><h4 id="总结">总结</h4><p>对于并发问题的处理，并不是线程安全就行，还需要考虑性能，两者都很重要，并发本身就是为了提高性能，不能盲目加锁，在进行加锁的时候应该考虑锁的粒度，以及考虑用什么锁。</p>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JUC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>排序算法</title>
    <link href="/2023/10/28/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    <url>/2023/10/28/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1>排序算法</h1><h3 id="归并排序">归并排序</h3><p>稳定的nlogn排序算法,每次将区间分为两半，分别进行排序最后进行合并。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">void</span> <span class="hljs-title function_">mergeSort</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span> &#123;<br>        <span class="hljs-keyword">if</span> (l &gt;= r) <span class="hljs-keyword">return</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">mid</span> <span class="hljs-operator">=</span> l + r &gt;&gt; <span class="hljs-number">1</span>;<br>        mergeSort(l, mid);<br>        mergeSort(mid + <span class="hljs-number">1</span>, r);<br>        merge(l, mid, r);<br>    &#125;<br><span class="hljs-keyword">void</span> <span class="hljs-title function_">merge</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> m, <span class="hljs-type">int</span> r)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> l;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> m + <span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">idx</span> <span class="hljs-operator">=</span> l;<br>        <span class="hljs-keyword">while</span> (l &lt;= m &amp;&amp; j &lt;= r) &#123;<br>            <span class="hljs-keyword">if</span> (arr0[l] &lt;= arr0[j]) arr1[idx++] = arr0[l++];<br>            <span class="hljs-keyword">else</span> arr1[idx++] = arr0[j++];<br>        &#125;<br>        <span class="hljs-keyword">while</span> (l &lt;= m) arr1[idx++] = arr0[l++];<br>        <span class="hljs-keyword">while</span> (j &lt;= r) arr1[idx++] = arr0[j++];<br>        <span class="hljs-keyword">if</span> (r + <span class="hljs-number">1</span> - s &gt;= <span class="hljs-number">0</span>) System.arraycopy(arr1, s, arr0, s, r + <span class="hljs-number">1</span> - s);<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="希尔排序">希尔排序</h3><p>插入排序的升级版,时间复杂度比插入排序低。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">void</span> <span class="hljs-title function_">shellSort</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">grep</span> <span class="hljs-operator">=</span> arr.length;<br>        <span class="hljs-keyword">while</span> (grep &gt; <span class="hljs-number">1</span>) &#123;<br>            grep /= <span class="hljs-number">2</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">v</span> <span class="hljs-operator">=</span> arr[i];<br>                <span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> i;<br>                <span class="hljs-keyword">while</span> (j - grep &gt;= <span class="hljs-number">0</span> &amp;&amp; arr[j - grep] &gt;= v) &#123;<br>                    arr[j] = arr[j - grep];<br>                    j -= grep;<br>                &#125;<br>                arr[j] = v;<br>            &#125;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="快速排序">快速排序</h3><p>根据pivot来进行x次交换,pivot最好随机,期望时间复杂度nlogn</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">void</span> <span class="hljs-title function_">quickSort</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span> &#123;<br>        <span class="hljs-keyword">if</span> (l &gt;= r) <span class="hljs-keyword">return</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> l - <span class="hljs-number">1</span>, j = r + <span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">pivot</span> <span class="hljs-operator">=</span> arr[i + j &gt;&gt; <span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">while</span> (i &lt; j) &#123;<br>            <span class="hljs-keyword">do</span> i++; <span class="hljs-keyword">while</span> (arr[i] &lt; pivot);<br>            <span class="hljs-keyword">do</span> j--; <span class="hljs-keyword">while</span> (arr[j] &gt; pivot);<br>            <span class="hljs-keyword">if</span> (i &lt; j) &#123;<br>                arr[i] ^= arr[j];<br>                arr[j] ^= arr[i];<br>                arr[i] ^= arr[j];<br>            &#125;<br>        &#125;<br>        quickSort(arr, l, j);<br>        quickSort(arr, j + <span class="hljs-number">1</span>, r);<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="冒泡排序">冒泡排序</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">void</span> <span class="hljs-title function_">bubbleSort</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> arr.length;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n - <span class="hljs-number">1</span>; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> i + <span class="hljs-number">1</span>; j &lt; n; j++) &#123;<br>                <span class="hljs-keyword">if</span> (arr[i] &gt; arr[j]) &#123;<br>                    arr[i] ^= arr[j];<br>                    arr[j] ^= arr[i];<br>                    arr[i] ^= arr[j];<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="选择排序">选择排序</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">void</span> <span class="hljs-title function_">selectSort</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr)</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n - <span class="hljs-number">1</span>; i++) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">minValue</span> <span class="hljs-operator">=</span> arr[i];<br>            <span class="hljs-type">int</span> <span class="hljs-variable">idx</span> <span class="hljs-operator">=</span> i;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> i + <span class="hljs-number">1</span>; j &lt; n; j++) &#123;<br>                <span class="hljs-keyword">if</span> (arr[j] &lt; minValue) &#123;<br>                    idx = j;<br>                    minValue = arr[j];<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (idx != i) &#123;<br>                arr[i] ^= arr[idx];<br>                arr[idx] ^= arr[i];<br>                arr[i] ^= arr[idx];<br>            &#125;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="插入排序">插入排序</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">void</span> <span class="hljs-title function_">insertSort</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> arr.length;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> i, v = arr[i];<br>            <span class="hljs-keyword">while</span> (j - <span class="hljs-number">1</span> &gt;= <span class="hljs-number">0</span> &amp;&amp; arr[j - <span class="hljs-number">1</span>] &gt; v) arr[j] = arr[--j];<br>            arr[j] = v;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="堆排序">堆排序</h3><p>核心函数down(),根据堆的结构比较好想,heapify()时间复杂度证明比较难:用等比数列求和进行证明。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HeapSort</span> &#123;<br><br><br>        <span class="hljs-type">int</span>[] arr;<br><br>        <span class="hljs-type">int</span> n;<br><br>        HeapSort(<span class="hljs-type">int</span>[] _arr) &#123;<br>            n = _arr.length;<br>            arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n + <span class="hljs-number">1</span>];<br>            System.arraycopy(_arr, <span class="hljs-number">0</span>, arr, <span class="hljs-number">1</span>, n);<br>        &#125;<br><br>        <span class="hljs-keyword">void</span> <span class="hljs-title function_">heapify</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> n / <span class="hljs-number">2</span>; i &gt; <span class="hljs-number">0</span> ; i--) &#123;<br>                down(i);<br>            &#125;<br>        &#125;<br><br><br>        <span class="hljs-keyword">void</span> <span class="hljs-title function_">down</span><span class="hljs-params">(<span class="hljs-type">int</span> idx)</span> &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">ls</span> <span class="hljs-operator">=</span> idx * <span class="hljs-number">2</span>, rs = idx * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">os</span> <span class="hljs-operator">=</span> idx;<br>            <span class="hljs-keyword">if</span> (ls &lt;= n &amp;&amp; arr[ls] &lt; arr[os]) os = ls;<br>            <span class="hljs-keyword">if</span> (rs &lt;= n &amp;&amp; arr[rs] &lt; arr[os]) os = rs;<br>            <span class="hljs-keyword">if</span> (os != idx) &#123;<br>                arr[os] ^= arr[idx];<br>                arr[idx] ^= arr[os];<br>                arr[os] ^= arr[idx];<br>                down(os);<br>            &#125;<br>        &#125;<br><br><br>        <span class="hljs-type">int</span> <span class="hljs-title function_">poll</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> arr[<span class="hljs-number">1</span>];<br>            arr[<span class="hljs-number">1</span>] = arr[n--];<br>            down(<span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">return</span> res;<br>        &#125;<br><br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="计数排序">计数排序</h3><p>不能处理负数,如果有负数就得加偏移量。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">void</span> <span class="hljs-title function_">countSort</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> arr.length;<br>        Integer[] array = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>[<span class="hljs-number">1000</span>];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> e : arr) &#123;<br>            <span class="hljs-keyword">if</span> (array[e] == <span class="hljs-literal">null</span>) array[e] = <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">else</span> array[e] += <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">idx</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1000</span>; i++) &#123;<br>            <span class="hljs-keyword">if</span> (array[i] != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">cnt</span> <span class="hljs-operator">=</span> array[i];<br>                <span class="hljs-keyword">while</span> (cnt-- &gt; <span class="hljs-number">0</span>) arr[idx++] = i;<br>            &#125;<br>        &#125;<br>    &#125;<br><br></code></pre></td></tr></table></figure><h3 id="桶排序">桶排序</h3><p>根据数据范围,和数据数量确定每个桶的size，再进而确定需要多少个桶,通过通用公式计算每个数所在桶,再对每个桶单独排序,最后合并起来就是排序好的结果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">void</span> <span class="hljs-title function_">bucketSort</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr)</span> &#123;<br>       <span class="hljs-type">int</span> <span class="hljs-variable">min</span> <span class="hljs-operator">=</span> <span class="hljs-number">0x3f3f3f3f</span>, max = -min;<br>       <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> e : arr) &#123;<br>           min = Math.min(min, e);<br>           max = Math.max(max, e);<br>       &#125;<br>       <span class="hljs-type">int</span> <span class="hljs-variable">bucketSize</span> <span class="hljs-operator">=</span> (max - min) / arr.length + <span class="hljs-number">1</span>;  <span class="hljs-comment">//根据区间范围和数量确定单个桶范围</span><br>       <span class="hljs-type">int</span> <span class="hljs-variable">bucketCount</span> <span class="hljs-operator">=</span> (max - min) / bucketSize + <span class="hljs-number">1</span>;  <span class="hljs-comment">//根据区间范围和单个桶的数量确定需要多少个桶</span><br>       List&lt;Integer&gt;[] lists = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>[bucketCount];<br>       Arrays.setAll(lists, e -&gt; <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;());<br>       <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> e : arr) &#123;<br>           lists[(e - min) / bucketSize].add(e);  <span class="hljs-comment">//类似于求多少个桶</span><br>       &#125;<br>       <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> list : lists) list.sort(Comparator.comparing(e -&gt; e));<br>       <span class="hljs-type">int</span> <span class="hljs-variable">idx</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>       <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; bucketCount; i++) &#123;<br>           <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> e : lists[i])<br>               arr[idx++] = e;<br>       &#125;<br>   &#125;<br></code></pre></td></tr></table></figure><h3 id="基数排序">基数排序</h3><p>核心思想: 用0~9表示位上面的数,总共10个桶,遍历maxLen次,每次遍历当前位,将每个数放到自己值的位置。时间复杂度稳定O(k * n),不能处理负数,如果有负数就得加偏移量。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">void</span> <span class="hljs-title function_">radixSort</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr)</span> &#123;<br>    LinkedList&lt;Integer&gt;[] lists = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>[<span class="hljs-number">10</span>];<br>    Arrays.setAll(lists, e -&gt; <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;&gt;());  <span class="hljs-comment">//这里使用linkedList比较好,使用linkedlist方便删除</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">maxLen</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> e : arr) maxLen = Math.max(e, maxLen);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= maxLen; i++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> e : arr) lists[getIndexValue(i, e)].add(e);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">idx</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> list : lists) &#123;<br>            <span class="hljs-keyword">while</span> (!list.isEmpty()) &#123;<br>                arr[idx++] = list.poll();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">getLength</span><span class="hljs-params">(<span class="hljs-type">int</span> num)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">ans</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (num &gt; <span class="hljs-number">0</span>) &#123;<br>            num /= <span class="hljs-number">10</span>;<br>            ans++;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">getIndexValue</span><span class="hljs-params">(<span class="hljs-type">int</span> k, <span class="hljs-type">int</span> num)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> num % <span class="hljs-number">10</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; k; i++) &#123;<br>            res = num % <span class="hljs-number">10</span>;<br>            num /= <span class="hljs-number">10</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>杂项</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>多线程爬虫</title>
    <link href="/2023/10/26/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%88%AC%E8%99%AB/"/>
    <url>/2023/10/26/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%88%AC%E8%99%AB/</url>
    
    <content type="html"><![CDATA[<h1>多线程网络爬虫</h1><p>给定一个链接 <code>startUrl</code> 和一个接口 <code>HtmlParser</code> ，请你实现一个网络爬虫，以实现爬取同 <code>startUrl</code> 拥有相同 <strong>域名标签</strong> 的全部链接。该爬虫得到的全部链接可以 <strong>任何顺序</strong> 返回结果。</p><p>你的网络爬虫应当按照如下模式工作：</p><ul><li>自链接 <code>startUrl</code> 开始爬取</li><li>调用 <code>HtmlParser.getUrls(url)</code> 来获得链接<code>url</code>页面中的全部链接</li><li>同一个链接最多只爬取一次</li><li>只输出 <strong>域名</strong> 与 <code>startUrl</code> <strong>相同</strong> 的链接集合</li></ul><p><img src="https://assets.leetcode.com/uploads/2019/08/13/urlhostname.png" alt="img"></p><p>如上所示的一个链接，其域名为 <code>example.org</code>。简单起见，你可以假设所有的链接都采用 <strong>http协议</strong> 并没有指定 <strong>端口</strong>。例如，链接 <code>http://leetcode.com/problems</code> 和 <code>http://leetcode.com/contest</code> 是同一个域名下的，而链接<code>http://example.org/test</code> 和 <code>http://example.com/abc</code> 是不在同一域名下的。</p><p><code>HtmlParser</code> 接口定义如下：</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">HtmlParser</span> </span>&#123;<br>  <span class="hljs-comment">// 返回给定 url 对应的页面中的全部 url 。</span><br>  <span class="hljs-keyword">public</span> List&lt;<span class="hljs-keyword">String</span>&gt; getUrls(<span class="hljs-keyword">String</span> url);<br>&#125;<br></code></pre></td></tr></table></figure><p>下面是两个实例，用以解释该问题的设计功能，对于自定义测试，你可以使用三个变量 <code>urls</code>, <code>edges</code> 和 <code>startUrl</code>。注意在代码实现中，你只可以访问 <code>startUrl</code> ，而 <code>urls</code> 和 <code>edges</code> 不可以在你的代码中被直接访问。</p><p><strong>示例 1：</strong></p><p><img src="https://assets.leetcode.com/uploads/2019/10/23/sample_2_1497.png" alt="img"></p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs prolog">输入：<br>urls = [<br>  <span class="hljs-string">&quot;http://news.yahoo.com&quot;</span>,<br>  <span class="hljs-string">&quot;http://news.yahoo.com/news&quot;</span>,<br>  <span class="hljs-string">&quot;http://news.yahoo.com/news/topics/&quot;</span>,<br>  <span class="hljs-string">&quot;http://news.google.com&quot;</span>,<br>  <span class="hljs-string">&quot;http://news.yahoo.com/us&quot;</span><br>]<br>edges = [[<span class="hljs-number">2</span>,<span class="hljs-number">0</span>],[<span class="hljs-number">2</span>,<span class="hljs-number">1</span>],[<span class="hljs-number">3</span>,<span class="hljs-number">2</span>],[<span class="hljs-number">3</span>,<span class="hljs-number">1</span>],[<span class="hljs-number">0</span>,<span class="hljs-number">4</span>]]<br>startUrl = <span class="hljs-string">&quot;http://news.yahoo.com/news/topics/&quot;</span><br>输出：[<br>  <span class="hljs-string">&quot;http://news.yahoo.com&quot;</span>,<br>  <span class="hljs-string">&quot;http://news.yahoo.com/news&quot;</span>,<br>  <span class="hljs-string">&quot;http://news.yahoo.com/news/topics/&quot;</span>,<br>  <span class="hljs-string">&quot;http://news.yahoo.com/us&quot;</span><br>]<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><p><strong><img src="https://assets.leetcode.com/uploads/2019/10/23/sample_3_1497.png" alt="img"></strong></p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs prolog">输入：<br>urls = [<br>  <span class="hljs-string">&quot;http://news.yahoo.com&quot;</span>,<br>  <span class="hljs-string">&quot;http://news.yahoo.com/news&quot;</span>,<br>  <span class="hljs-string">&quot;http://news.yahoo.com/news/topics/&quot;</span>,<br>  <span class="hljs-string">&quot;http://news.google.com&quot;</span><br>]<br>edges = [[<span class="hljs-number">0</span>,<span class="hljs-number">2</span>],[<span class="hljs-number">2</span>,<span class="hljs-number">1</span>],[<span class="hljs-number">3</span>,<span class="hljs-number">2</span>],[<span class="hljs-number">3</span>,<span class="hljs-number">1</span>],[<span class="hljs-number">3</span>,<span class="hljs-number">0</span>]]<br>startUrl = <span class="hljs-string">&quot;http://news.google.com&quot;</span><br>输入：[<span class="hljs-string">&quot;http://news.google.com&quot;</span>]<br>解释：startUrl 链接到所有其他不共享相同主机名的页面。<br></code></pre></td></tr></table></figure><p>核心思想: 在进行bfs时需要使用多线程。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java">BlockingDeque&lt;String&gt; deque = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedBlockingDeque</span>&lt;&gt;();<br><br>HtmlParser htmlParser;<br><br>ConcurrentHashMap&lt;String, Boolean&gt; set = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcurrentHashMap</span>&lt;&gt;();<br><br><span class="hljs-keyword">public</span> List&lt;String&gt; <span class="hljs-title function_">crawl</span><span class="hljs-params">(String startUrl, HtmlParser htmlParser)</span> &#123;<br>    <span class="hljs-built_in">this</span>.htmlParser = htmlParser;<br>    set.put(startUrl, <span class="hljs-literal">true</span>);<br>    deque.addLast(startUrl);<br>    <span class="hljs-type">Thread</span> <span class="hljs-variable">thread</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-built_in">this</span>::dsth);<br>    thread.start();<br>    <span class="hljs-keyword">try</span> &#123;<br>        thread.join();<br>    &#125; <span class="hljs-keyword">catch</span> (Exception ignore) &#123;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(set.keySet());<br>&#125;<br><br><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">dsth</span><span class="hljs-params">()</span> &#123;<br>    List&lt;Thread&gt; threads = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> deque.pollFirst();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> ss : htmlParser.getUrls(s)) &#123;<br>        <span class="hljs-keyword">if</span> (set.containsKey(ss)) <span class="hljs-keyword">continue</span>;<br>        <span class="hljs-keyword">if</span> (getHost(s).equals(getHost(ss))) &#123;<br>            set.put(ss, <span class="hljs-literal">true</span>);<br>            deque.addLast(ss);<br>            <span class="hljs-type">Thread</span> <span class="hljs-variable">thread</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-built_in">this</span>::dsth);<br>            threads.add(thread);<br>            thread.start();<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> thread : threads) &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            thread.join();<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException ignore) &#123;<br>        &#125;<br>    &#125;<br>&#125;<br><br>String <span class="hljs-title function_">getHost</span><span class="hljs-params">(String url)</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">substring</span> <span class="hljs-operator">=</span> url.substring(<span class="hljs-number">7</span>);<br>    <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> substring.indexOf(<span class="hljs-string">&#x27;/&#x27;</span>);<br>    <span class="hljs-keyword">if</span> (i != -<span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">return</span> substring.substring(<span class="hljs-number">0</span>, i);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> substring;<br><br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>为什么需要join？</p><p>join是让当前正在运行的线程先阻塞，让给指定线程，我们必须保证主线程在最后执行。</p></li><li><p>为什么需先把thread先存起来然后依次调用join？而不是每次start()完后就join？</p><p>每次start()完后直接join的话会导致性能降低,每次都得等先执行完。</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JUC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>交替打印字符串</title>
    <link href="/2023/10/25/%E4%BA%A4%E6%9B%BF%E6%89%93%E5%8D%B0%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <url>/2023/10/25/%E4%BA%A4%E6%9B%BF%E6%89%93%E5%8D%B0%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
    
    <content type="html"><![CDATA[<h3 id="交替打印字符串">交替打印字符串</h3><p>编写一个可以从 1 到 n 输出代表这个数字的字符串的程序，但是：</p><ul><li>如果这个数字可以被 3 整除，输出 “fizz”。</li><li>如果这个数字可以被 5 整除，输出 “buzz”。</li><li>如果这个数字可以同时被 3 和 5 整除，输出 “fizzbuzz”。</li></ul><p>例如，当 <code>n = 15</code>，输出： <code>1, 2, fizz, 4, buzz, fizz, 7, 8, fizz, buzz, 11, fizz, 13, 14, fizzbuzz</code>。</p><p>假设有这么一个类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">FizzBuzz</span> &#123;<br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">FizzBuzz</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123; ... &#125;               <span class="hljs-comment">// constructor</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">fizz</span><span class="hljs-params">(printFizz)</span> &#123; ... &#125;          <span class="hljs-comment">// only output &quot;fizz&quot;</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">buzz</span><span class="hljs-params">(printBuzz)</span> &#123; ... &#125;          <span class="hljs-comment">// only output &quot;buzz&quot;</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">fizzbuzz</span><span class="hljs-params">(printFizzBuzz)</span> &#123; ... &#125;  <span class="hljs-comment">// only output &quot;fizzbuzz&quot;</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">number</span><span class="hljs-params">(printNumber)</span> &#123; ... &#125;      <span class="hljs-comment">// only output the numbers</span><br>&#125;<br></code></pre></td></tr></table></figure><p>请你实现一个有四个线程的多线程版 <code>FizzBuzz</code>， 同一个 <code>FizzBuzz</code> 实例会被如下四个线程使用：</p><ol><li>线程A将调用 <code>fizz()</code> 来判断是否能被 3 整除，如果可以，则输出 <code>fizz</code>。</li><li>线程B将调用 <code>buzz()</code> 来判断是否能被 5 整除，如果可以，则输出 <code>buzz</code>。</li><li>线程C将调用 <code>fizzbuzz()</code> 来判断是否同时能被 3 和 5 整除，如果可以，则输出 <code>fizzbuzz</code>。</li><li>线程D将调用 <code>number()</code> 来实现输出既不能被 3 整除也不能被 5 整除的数字。</li></ol><ul><li><p>什么时候使用<code>if (...) xx.wait() / cond.await()</code> 什么时候使用<code>while(...) xx.wait() / cond.await()</code> ?</p><p>最好的方式就是根据代码自己模拟一下，<code>if</code> 不执行的话就要执行<code>else</code>, <code>while</code>则是一个循环。</p></li><li><p>如何避免未拿到锁最后还需释放锁导致抛出异常?</p><p>将<code>lock.lock()</code>放在try前面,只有当确定拿到锁之后,在执行<code>try..finally</code>。</p></li></ul><h4 id="信号量">信号量</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">FizzBuzz</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">Semaphore</span> <span class="hljs-variable">nu</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Semaphore</span>(<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">Semaphore</span> <span class="hljs-variable">f</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Semaphore</span>(<span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">Semaphore</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Semaphore</span>(<span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">Semaphore</span> <span class="hljs-variable">fb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Semaphore</span>(<span class="hljs-number">0</span>);<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> n;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">FizzBuzz</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br>        <span class="hljs-built_in">this</span>.n = n;<br>    &#125;<br><br>    <span class="hljs-comment">// printFizz.run() outputs &quot;fizz&quot;.</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">fizz</span><span class="hljs-params">(Runnable printFizz)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>            <span class="hljs-keyword">if</span>(i % <span class="hljs-number">3</span> == <span class="hljs-number">0</span> &amp;&amp; i % <span class="hljs-number">5</span> != <span class="hljs-number">0</span>)&#123;<br>                f.acquire();<br>                printFizz.run();<br>                nu.release();<br>            &#125;<br>        &#125;<br>        <br>    &#125;<br><br>    <span class="hljs-comment">// printBuzz.run() outputs &quot;buzz&quot;.</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">buzz</span><span class="hljs-params">(Runnable printBuzz)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>       <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>            <span class="hljs-keyword">if</span>(i % <span class="hljs-number">5</span> == <span class="hljs-number">0</span> &amp;&amp; i % <span class="hljs-number">3</span> != <span class="hljs-number">0</span>)&#123;<br>                b.acquire();<br>                printBuzz.run();<br>                nu.release();<br>            &#125;<br>       &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// printFizzBuzz.run() outputs &quot;fizzbuzz&quot;.</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">fizzbuzz</span><span class="hljs-params">(Runnable printFizzBuzz)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">15</span>; i &lt;= n; i += <span class="hljs-number">15</span>) &#123;<br>            fb.acquire();<br>            printFizzBuzz.run();<br>            nu.release();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// printNumber.accept(x) outputs &quot;x&quot;, where x is an integer.</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">number</span><span class="hljs-params">(IntConsumer printNumber)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>            nu.acquire();<br>            <span class="hljs-keyword">if</span>(i % <span class="hljs-number">3</span> == <span class="hljs-number">0</span> &amp;&amp; i % <span class="hljs-number">5</span> == <span class="hljs-number">0</span>) &#123;<br>                fb.release();<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(i % <span class="hljs-number">3</span> == <span class="hljs-number">0</span>) &#123;<br>                f.release();<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(i % <span class="hljs-number">5</span> == <span class="hljs-number">0</span>) &#123;<br>                b.release();<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                printNumber.accept(i);<br>                nu.release();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="ReentrantLock-Condition-1">ReentrantLock+Condition(1)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">FizzBuzz</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> n;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">Lock</span> <span class="hljs-variable">lo</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantLock</span>();<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">Condition</span> <span class="hljs-variable">cond</span> <span class="hljs-operator">=</span> lo.newCondition();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">FizzBuzz</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br>        <span class="hljs-built_in">this</span>.n = n;<br>    &#125;<br><br>    <span class="hljs-comment">// printFizz.run() outputs &quot;fizz&quot;.</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">fizz</span><span class="hljs-params">(Runnable printFizz)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        lo.lock();<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">while</span> (i &lt;= n) &#123;<br>                <span class="hljs-keyword">if</span> (i % <span class="hljs-number">3</span> == <span class="hljs-number">0</span> &amp;&amp; i % <span class="hljs-number">5</span> != <span class="hljs-number">0</span>) &#123;<br>                    printFizz.run();<br>                    i++;<br>                    cond.signalAll();<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    cond.await();<br>                &#125;<br>            &#125;<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            lo.unlock();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// printBuzz.run() outputs &quot;buzz&quot;.</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">buzz</span><span class="hljs-params">(Runnable printBuzz)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        lo.lock();<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">while</span> (i &lt;= n) &#123;<br>                <span class="hljs-keyword">if</span> (i % <span class="hljs-number">3</span> != <span class="hljs-number">0</span> &amp;&amp; i % <span class="hljs-number">5</span> == <span class="hljs-number">0</span>) &#123;<br>                    printBuzz.run();<br>                    i++;<br>                    cond.signalAll();<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    cond.await();<br>                &#125;<br>            &#125;<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            lo.unlock();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// printFizzBuzz.run() outputs &quot;fizzbuzz&quot;.</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">fizzbuzz</span><span class="hljs-params">(Runnable printFizzBuzz)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        lo.lock();<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">while</span> (i &lt;= n) &#123;<br>                <span class="hljs-keyword">if</span> (i % <span class="hljs-number">3</span> == <span class="hljs-number">0</span> &amp;&amp; i % <span class="hljs-number">5</span> == <span class="hljs-number">0</span>) &#123;<br>                    printFizzBuzz.run();<br>                    i++;<br>                    cond.signalAll();<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    cond.await();<br>                &#125;<br>            &#125;<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            lo.unlock();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// printNumber.accept(x) outputs &quot;x&quot;, where x is an integer.</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">number</span><span class="hljs-params">(IntConsumer printNumber)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        lo.lock();<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">while</span> (i &lt;= n) &#123;<br>                <span class="hljs-keyword">if</span> (i % <span class="hljs-number">3</span> != <span class="hljs-number">0</span> &amp;&amp; i % <span class="hljs-number">5</span> != <span class="hljs-number">0</span>) &#123;<br>                    printNumber.accept(i);<br>                    i++;<br>                    cond.signalAll();<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    cond.await();<br>                &#125;<br>            &#125;<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            lo.unlock();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-type">FizzBuzz</span> <span class="hljs-variable">fizzBuzz</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FizzBuzz</span>(<span class="hljs-number">20</span>);<br>        <span class="hljs-type">CountDownLatch</span> <span class="hljs-variable">latch</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CountDownLatch</span>(<span class="hljs-number">4</span>);<br>        <span class="hljs-type">Runnable</span> <span class="hljs-variable">fizz</span> <span class="hljs-operator">=</span> () -&gt; &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                fizzBuzz.fizz(() -&gt; System.out.println(<span class="hljs-string">&quot;fizz&quot;</span>));<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125; <span class="hljs-keyword">finally</span> &#123;<br>                latch.countDown();<br>            &#125;<br>        &#125;;<br>        <span class="hljs-type">Runnable</span> <span class="hljs-variable">buzz</span> <span class="hljs-operator">=</span> () -&gt; &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                fizzBuzz.buzz(() -&gt; System.out.println(<span class="hljs-string">&quot;buzz&quot;</span>));<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125; <span class="hljs-keyword">finally</span> &#123;<br>                latch.countDown();<br>            &#125;<br>        &#125;;<br>        <span class="hljs-type">Runnable</span> <span class="hljs-variable">fizzbuzz</span> <span class="hljs-operator">=</span> () -&gt; &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                fizzBuzz.fizzbuzz(() -&gt; System.out.println(<span class="hljs-string">&quot;fizzbuzz&quot;</span>));<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125; <span class="hljs-keyword">finally</span> &#123;<br>                latch.countDown();<br>            &#125;<br>        &#125;;<br>        <span class="hljs-type">Runnable</span> <span class="hljs-variable">number</span> <span class="hljs-operator">=</span> () -&gt; &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                fizzBuzz.number(value -&gt; System.out.println(value));<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125; <span class="hljs-keyword">finally</span> &#123;<br>                latch.countDown();<br>            &#125;<br>        &#125;;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(fizz).start();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(buzz).start();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(fizzbuzz).start();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(number).start();<br>        latch.await();<br>        System.out.println(<span class="hljs-string">&quot;done...&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="ReentrantLock-Condition-2">ReentrantLock+Condition(2)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">FizzBuzz</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> n;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> <span class="hljs-type">int</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">ReentrantLock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantLock</span>();<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">Condition</span> <span class="hljs-variable">condition</span> <span class="hljs-operator">=</span> lock.newCondition();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">FizzBuzz</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br>        <span class="hljs-built_in">this</span>.n = n;<br>    &#125;<br><br>    <span class="hljs-comment">// printFizz.run() outputs &quot;fizz&quot;.</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">fizz</span><span class="hljs-params">(Runnable printFizz)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>            <span class="hljs-keyword">if</span> (i % <span class="hljs-number">3</span> != <span class="hljs-number">0</span> || i % <span class="hljs-number">5</span> == <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            lock.lock();<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">while</span> (i != value) &#123;<br>                    condition.await();<br>                &#125;<br>                printFizz.run();<br>                value++;<br>                condition.signalAll();<br>            &#125; <span class="hljs-keyword">finally</span> &#123;<br>                lock.unlock();<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// printBuzz.run() outputs &quot;buzz&quot;.</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">buzz</span><span class="hljs-params">(Runnable printBuzz)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>            <span class="hljs-keyword">if</span> (i % <span class="hljs-number">5</span> != <span class="hljs-number">0</span> || i % <span class="hljs-number">3</span> == <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br><br>            <span class="hljs-keyword">try</span> &#123;<br>                lock.lock();<br>                <span class="hljs-keyword">while</span> (i != value) &#123;<br>                    condition.await();<br>                &#125;<br>                printBuzz.run();<br>                value++;<br>                condition.signalAll();<br>            &#125; <span class="hljs-keyword">finally</span> &#123;<br>                lock.unlock();<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// printFizzBuzz.run() outputs &quot;fizzbuzz&quot;.</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">fizzbuzz</span><span class="hljs-params">(Runnable printFizzBuzz)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>            <span class="hljs-keyword">if</span> (i % <span class="hljs-number">5</span> != <span class="hljs-number">0</span> || i % <span class="hljs-number">3</span> != <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            lock.lock();<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">while</span> (i != value) &#123;<br>                    condition.await();<br>                &#125;<br>                printFizzBuzz.run();<br>                value++;<br>                condition.signalAll();<br>            &#125; <span class="hljs-keyword">finally</span> &#123;<br>                lock.unlock();<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// printNumber.accept(x) outputs &quot;x&quot;, where x is an integer.</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">number</span><span class="hljs-params">(IntConsumer printNumber)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>            <span class="hljs-keyword">if</span> (i % <span class="hljs-number">5</span> == <span class="hljs-number">0</span> || i % <span class="hljs-number">3</span> == <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            lock.lock();<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">while</span> (i != value) &#123;<br>                    condition.await();<br>                &#125;<br>                printNumber.accept(value);<br>                value++;<br>                condition.signalAll();<br>            &#125; <span class="hljs-keyword">finally</span> &#123;<br>                lock.unlock();<br>            &#125;<br>        &#125;<br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-type">FizzBuzz</span> <span class="hljs-variable">fizzBuzz</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FizzBuzz</span>(<span class="hljs-number">20</span>);<br>        <span class="hljs-type">CountDownLatch</span> <span class="hljs-variable">latch</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CountDownLatch</span>(<span class="hljs-number">4</span>);<br>        <span class="hljs-type">Runnable</span> <span class="hljs-variable">fizz</span> <span class="hljs-operator">=</span> () -&gt; &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                fizzBuzz.fizz(() -&gt; System.out.println(<span class="hljs-string">&quot;fizz&quot;</span>));<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125; <span class="hljs-keyword">finally</span> &#123;<br>                latch.countDown();<br>            &#125;<br>        &#125;;<br>        <span class="hljs-type">Runnable</span> <span class="hljs-variable">buzz</span> <span class="hljs-operator">=</span> () -&gt; &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                fizzBuzz.buzz(() -&gt; System.out.println(<span class="hljs-string">&quot;buzz&quot;</span>));<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125; <span class="hljs-keyword">finally</span> &#123;<br>                latch.countDown();<br>            &#125;<br>        &#125;;<br>        <span class="hljs-type">Runnable</span> <span class="hljs-variable">fizzbuzz</span> <span class="hljs-operator">=</span> () -&gt; &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                fizzBuzz.fizzbuzz(() -&gt; System.out.println(<span class="hljs-string">&quot;fizzbuzz&quot;</span>));<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125; <span class="hljs-keyword">finally</span> &#123;<br>                latch.countDown();<br>            &#125;<br>        &#125;;<br>        <span class="hljs-type">Runnable</span> <span class="hljs-variable">number</span> <span class="hljs-operator">=</span> () -&gt; &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                fizzBuzz.number(value -&gt; System.out.println(value));<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125; <span class="hljs-keyword">finally</span> &#123;<br>                latch.countDown();<br>            &#125;<br>        &#125;;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(number).start();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(fizz).start();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(buzz).start();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(fizzbuzz).start();<br>        latch.await();<br>        System.out.println(<span class="hljs-string">&quot;done...&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Synchronized">Synchronized</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">FizzBuzz</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> n;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> <span class="hljs-type">int</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">FizzBuzz</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br>        <span class="hljs-built_in">this</span>.n = n;<br>    &#125;<br><br>    <span class="hljs-comment">// printFizz.run() outputs &quot;fizz&quot;.</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">fizz</span><span class="hljs-params">(Runnable printFizz)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>            <span class="hljs-keyword">if</span> (i % <span class="hljs-number">3</span> != <span class="hljs-number">0</span> || i % <span class="hljs-number">5</span> == <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            <span class="hljs-keyword">synchronized</span> (<span class="hljs-built_in">this</span>) &#123;<br>                <span class="hljs-keyword">while</span> (i != value) &#123;<br>                    <span class="hljs-built_in">this</span>.wait();<br>                &#125;<br>                printFizz.run();<br>                value++;<br>                <span class="hljs-built_in">this</span>.notifyAll();<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// printBuzz.run() outputs &quot;buzz&quot;.</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">buzz</span><span class="hljs-params">(Runnable printBuzz)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>            <span class="hljs-keyword">if</span> (i % <span class="hljs-number">5</span> != <span class="hljs-number">0</span> || i % <span class="hljs-number">3</span> == <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            <span class="hljs-keyword">synchronized</span> (<span class="hljs-built_in">this</span>) &#123;<br>                <span class="hljs-keyword">while</span> (i != value) &#123;<br>                    <span class="hljs-built_in">this</span>.wait();<br>                &#125;<br>                printBuzz.run();<br>                value++;<br>                <span class="hljs-built_in">this</span>.notifyAll();<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// printFizzBuzz.run() outputs &quot;fizzbuzz&quot;.</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">fizzbuzz</span><span class="hljs-params">(Runnable printFizzBuzz)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>            <span class="hljs-keyword">if</span> (i % <span class="hljs-number">5</span> != <span class="hljs-number">0</span> || i % <span class="hljs-number">3</span> != <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            <span class="hljs-keyword">synchronized</span> (<span class="hljs-built_in">this</span>) &#123;<br>                <span class="hljs-keyword">while</span> (i != value) &#123;<br>                    <span class="hljs-built_in">this</span>.wait();<br>                &#125;<br>                printFizzBuzz.run();<br>                value++;<br>                <span class="hljs-built_in">this</span>.notifyAll();<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// printNumber.accept(x) outputs &quot;x&quot;, where x is an integer.</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">number</span><span class="hljs-params">(IntConsumer printNumber)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>            <span class="hljs-keyword">if</span> (i % <span class="hljs-number">5</span> == <span class="hljs-number">0</span> || i % <span class="hljs-number">3</span> == <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            <span class="hljs-keyword">synchronized</span> (<span class="hljs-built_in">this</span>) &#123;<br>                <span class="hljs-keyword">while</span> (i != value) &#123;<br>                    <span class="hljs-built_in">this</span>.wait();<br>                &#125;<br>                printNumber.accept(value);<br>                value++;<br>                <span class="hljs-built_in">this</span>.notifyAll();<br>            &#125;<br>        &#125;<br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-type">FizzBuzz</span> <span class="hljs-variable">fizzBuzz</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FizzBuzz</span>(<span class="hljs-number">20</span>);<br>        <span class="hljs-type">CountDownLatch</span> <span class="hljs-variable">latch</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CountDownLatch</span>(<span class="hljs-number">4</span>);<br>        <span class="hljs-type">Runnable</span> <span class="hljs-variable">fizz</span> <span class="hljs-operator">=</span> () -&gt; &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                fizzBuzz.fizz(() -&gt; System.out.println(<span class="hljs-string">&quot;fizz&quot;</span>));<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125; <span class="hljs-keyword">finally</span> &#123;<br>                latch.countDown();<br>            &#125;<br>        &#125;;<br>        <span class="hljs-type">Runnable</span> <span class="hljs-variable">buzz</span> <span class="hljs-operator">=</span> () -&gt; &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                fizzBuzz.buzz(() -&gt; System.out.println(<span class="hljs-string">&quot;buzz&quot;</span>));<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125; <span class="hljs-keyword">finally</span> &#123;<br>                latch.countDown();<br>            &#125;<br>        &#125;;<br>        <span class="hljs-type">Runnable</span> <span class="hljs-variable">fizzbuzz</span> <span class="hljs-operator">=</span> () -&gt; &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                fizzBuzz.fizzbuzz(() -&gt; System.out.println(<span class="hljs-string">&quot;fizzbuzz&quot;</span>));<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125; <span class="hljs-keyword">finally</span> &#123;<br>                latch.countDown();<br>            &#125;<br>        &#125;;<br>        <span class="hljs-type">Runnable</span> <span class="hljs-variable">number</span> <span class="hljs-operator">=</span> () -&gt; &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                fizzBuzz.number(value -&gt; System.out.println(value));<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125; <span class="hljs-keyword">finally</span> &#123;<br>                latch.countDown();<br>            &#125;<br>        &#125;;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(fizz).start();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(buzz).start();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(fizzbuzz).start();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(number).start();<br>        latch.await();<br>        System.out.println(<span class="hljs-string">&quot;done...&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JUC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>哲学家进餐问题</title>
    <link href="/2023/10/25/%E5%93%B2%E5%AD%A6%E5%AE%B6%E8%BF%9B%E9%A4%90%E9%97%AE%E9%A2%98/"/>
    <url>/2023/10/25/%E5%93%B2%E5%AD%A6%E5%AE%B6%E8%BF%9B%E9%A4%90%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h3 id="哲学家进餐问题">哲学家进餐问题</h3><p>5 个沉默寡言的哲学家围坐在圆桌前，每人面前一盘意面。叉子放在哲学家之间的桌面上。（5 个哲学家，5 根叉子）</p><p>所有的哲学家都只会在思考和进餐两种行为间交替。哲学家只有同时拿到左边和右边的叉子才能吃到面，而同一根叉子在同一时间只能被一个哲学家使用。每个哲学家吃完面后都需要把叉子放回桌面以供其他哲学家吃面。只要条件允许，哲学家可以拿起左边或者右边的叉子，但在没有同时拿到左右叉子时不能进食。</p><p>假设面的数量没有限制，哲学家也能随便吃，不需要考虑吃不吃得下。</p><p>设计一个进餐规则（并行算法）使得每个哲学家都不会挨饿；也就是说，在没有人知道别人什么时候想吃东西或思考的情况下，每个哲学家都可以在吃饭和思考之间一直交替下去。</p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/10/23/an_illustration_of_the_dining_philosophers_problem.png" alt="img" style="zoom:80%;" /><h4 id="信号量-可重入式锁">信号量+可重入式锁</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 最多允许4个人同时拿叉子,使用信号量来解决</span><br><span class="hljs-comment"> * 同时利用互斥锁来保证同一个叉子同一时刻只能有一个人拿。</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DiningPhilosophers</span> &#123;<br><br>    <span class="hljs-comment">//信号量初始值</span><br>    <span class="hljs-type">Semaphore</span> <span class="hljs-variable">semaphore</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Semaphore</span>(<span class="hljs-number">4</span>);<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> ReentrantLock[] LOCKS = &#123;<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantLock</span>(),<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantLock</span>(),<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantLock</span>(),<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantLock</span>(),<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantLock</span>()<br>    &#125;;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">wantsToEat</span><span class="hljs-params">(<span class="hljs-type">int</span> philosopher,</span><br><span class="hljs-params">                           Runnable pickLeftFork,</span><br><span class="hljs-params">                           Runnable pickRightFork,</span><br><span class="hljs-params">                           Runnable eat,</span><br><span class="hljs-params">                           Runnable putLeftFork,</span><br><span class="hljs-params">                           Runnable putRightFork)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br><br>        semaphore.acquire();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">nextPhilosopher</span> <span class="hljs-operator">=</span> (philosopher + <span class="hljs-number">1</span>) % <span class="hljs-number">5</span>;<br>        LOCKS[philosopher].lock();<br>        LOCKS[nextPhilosopher].lock();<br><br>        pickLeftFork.run();<br>        pickRightFork.run();<br>        eat.run();<br>        putLeftFork.run();<br>        putRightFork.run();<br><br>        LOCKS[philosopher].unlock();<br>        LOCKS[nextPhilosopher].unlock();<br>        semaphore.release();<br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><h4 id="信号量-synchronized">信号量+synchronized</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 最多允许4个人同时拿叉子,使用信号量来解决</span><br><span class="hljs-comment"> * 同时利用互斥锁来保证同一个叉子同一时刻只能有一个人拿。</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DiningPhilosophers</span> &#123;<br><br>    <span class="hljs-comment">//信号量初始值</span><br>    <span class="hljs-type">Semaphore</span> <span class="hljs-variable">semaphore</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Semaphore</span>(<span class="hljs-number">4</span>);<br><br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Object[] LOCKS = &#123;<br>      <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>(),<br>      <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>(),<br>      <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>(),<br>      <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>(),<br>      <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>()<br>    &#125;;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">wantsToEat</span><span class="hljs-params">(<span class="hljs-type">int</span> philosopher,</span><br><span class="hljs-params">                           Runnable pickLeftFork,</span><br><span class="hljs-params">                           Runnable pickRightFork,</span><br><span class="hljs-params">                           Runnable eat,</span><br><span class="hljs-params">                           Runnable putLeftFork,</span><br><span class="hljs-params">                           Runnable putRightFork)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br><br>        semaphore.acquire();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">nextPhilosopher</span> <span class="hljs-operator">=</span> (philosopher + <span class="hljs-number">1</span>) % <span class="hljs-number">5</span>;<br>        <span class="hljs-keyword">synchronized</span> (LOCKS[philosopher]) &#123;<br>            <span class="hljs-keyword">synchronized</span> (LOCKS[nextPhilosopher]) &#123;<br>                pickLeftFork.run();<br>                pickRightFork.run();<br>                eat.run();<br>                putLeftFork.run();<br>                putRightFork.run();<br>            &#125;<br>        &#125;<br>        semaphore.release();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JUC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一道数位DP题</title>
    <link href="/2023/10/07/%E4%B8%80%E9%81%93%E6%95%B0%E4%BD%8DDP%E9%A2%98/"/>
    <url>/2023/10/07/%E4%B8%80%E9%81%93%E6%95%B0%E4%BD%8DDP%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1>易变数</h1><p>们定义以下正整数变形操作。</p><p>对于一个正整数 x，如果其二进制表示恰好包含 y 个 1，那么经过一次变形操作后，x将变为 y。</p><p>例如，对于正整数13，其二进制表示为 <code>1101</code>，其中恰好包含 3 个 1，所以 13 经过一次变形操作后会变为 3。</p><p>如果一个正整数通过上述变形操作变为 1 所需要的最少操作次数<strong>恰好</strong>为 k，那么就称这个数是一个易变数。</p><p>给定一个正整数 n 的不含前导 0 的二进制表示，请你计算 [1,n] 范围内的易变数的数量。</p><p>由于结果可能很大，你只需要输出对 1e9 + 7 取模后的结果。</p><p>输入样例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">110</span><br><span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>输出</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">3<br></code></pre></td></tr></table></figure><p>这道题花了挺长时间的，主要原因是因为对数位DP的不熟练和这道题有点坑。</p><p>这道题的数位DP不存在<code>跳位</code>而且前导零不影响结果,因此不需要<code>isNum</code>，剩下这个题就比较容易写出来了,这题比较坑的点还有就是当k为0和n为1时都需要特判，有点搞心态。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">long</span> <span class="hljs-variable">mod</span> <span class="hljs-operator">=</span> (<span class="hljs-type">long</span>) (<span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>);<br><span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> in.next();<br><span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> in.nextInt();<br><br>Long[][] cache = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Long</span>[<span class="hljs-number">1005</span>][<span class="hljs-number">1005</span>];<br><br>HashSet&lt;Integer&gt; set = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;();<br><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">solve</span><span class="hljs-params">()</span> &#123;<br>    out.println(s.length());<br>    <span class="hljs-keyword">if</span> (k == <span class="hljs-number">0</span>) &#123;<br>        out.println(<span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= s.length(); i++) &#123;<br>            <span class="hljs-keyword">if</span> (check(i)) set.add(i);<br>        &#125;<br>    &#125;<br>    out.println(dfs(<span class="hljs-literal">true</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>) - (k == <span class="hljs-number">1</span> ? <span class="hljs-number">1</span> : <span class="hljs-number">0</span>));<br>&#125;<br><br><br><span class="hljs-type">long</span> <span class="hljs-title function_">dfs</span><span class="hljs-params">(<span class="hljs-type">boolean</span> isLimit, <span class="hljs-type">int</span> i, <span class="hljs-type">int</span> cnt)</span> &#123;<br>    <span class="hljs-keyword">if</span> (i == s.length()) &#123;<br>        <span class="hljs-keyword">return</span> set.contains(cnt) ? <span class="hljs-number">1</span> : <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (!isLimit &amp;&amp; cache[i][cnt] != <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> cache[i][cnt];<br>    <span class="hljs-type">long</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> <span class="hljs-number">0L</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">lo</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">up</span> <span class="hljs-operator">=</span> isLimit ? (s.charAt(i) - <span class="hljs-string">&#x27;0&#x27;</span>) : <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> lo; j &lt;= up; j++) &#123;<br>        res = (res + dfs(isLimit &amp;&amp; j == up, i + <span class="hljs-number">1</span>, cnt + (j == <span class="hljs-number">1</span> ? <span class="hljs-number">1</span> : <span class="hljs-number">0</span>))) % mod;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (!isLimit) cache[i][cnt] = res;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><br><span class="hljs-type">boolean</span> <span class="hljs-title function_">check</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (x != <span class="hljs-number">1</span>) &#123;<br>        x = Integer.bitCount(x);<br>        c++;<br>    &#125;<br>    <span class="hljs-keyword">return</span> c == k;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>杂项</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>二叉树遍历</title>
    <link href="/2023/10/05/%E4%BA%8C%E5%8F%89%E6%A0%91%E9%81%8D%E5%8E%86/"/>
    <url>/2023/10/05/%E4%BA%8C%E5%8F%89%E6%A0%91%E9%81%8D%E5%8E%86/</url>
    
    <content type="html"><![CDATA[<h1>二叉树遍历</h1><p>二叉树作为一种常见的数据结构,对于其遍历也是有很多形式,以下记录部分二叉树遍历.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Java二叉树表示</span><br><span class="hljs-comment"> * public class TreeNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     TreeNode left;</span><br><span class="hljs-comment"> *     TreeNode right;</span><br><span class="hljs-comment"> *     TreeNode() &#123;&#125;</span><br><span class="hljs-comment"> *     TreeNode(int val) &#123; this.val = val; &#125;</span><br><span class="hljs-comment"> *     TreeNode(int val, TreeNode left, TreeNode right) &#123;</span><br><span class="hljs-comment"> *         this.val = val;</span><br><span class="hljs-comment"> *         this.left = left;</span><br><span class="hljs-comment"> *         this.right = right;</span><br><span class="hljs-comment"> *     &#125;</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure><h3 id="前序遍历-非递归">前序遍历(非递归)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> List&lt;Integer&gt; <span class="hljs-title function_">preorderTraversal</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>        <span class="hljs-type">var</span> <span class="hljs-variable">ans</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Integer&gt;();<br>        <span class="hljs-type">var</span> <span class="hljs-variable">stk</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayDeque</span>&lt;TreeNode&gt;();<br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> ans;<br>        stk.addLast(root);<br>        <span class="hljs-keyword">while</span> (!stk.isEmpty()) &#123;<br>            <span class="hljs-type">var</span> <span class="hljs-variable">pop</span> <span class="hljs-operator">=</span> stk.pollLast();<br>            ans.add(pop.val);<br>            <span class="hljs-keyword">if</span> (pop.right != <span class="hljs-literal">null</span>)  <span class="hljs-comment">//  注意这里的顺序</span><br>                stk.addLast(pop.right);<br>            <span class="hljs-keyword">if</span> (pop.left != <span class="hljs-literal">null</span>)<br>                stk.addLast(pop.left);<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="中序遍历-非递归">中序遍历(非递归)</h3><blockquote><p>中序遍历是比较难的,有两处细节需注意.</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> List&lt;Integer&gt; <span class="hljs-title function_">inorderTraversal</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>        <span class="hljs-type">var</span> <span class="hljs-variable">ans</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Integer&gt;();<br>        <span class="hljs-type">var</span> <span class="hljs-variable">stk</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayDeque</span>&lt;TreeNode&gt;();<br>        <span class="hljs-keyword">while</span> (root != <span class="hljs-literal">null</span> || !stk.isEmpty()) &#123;  <span class="hljs-comment">//这里是||</span><br>            <span class="hljs-keyword">while</span> (root != <span class="hljs-literal">null</span>) &#123;<br>                stk.addLast(root);<br>                root = root.left;<br>            &#125;<br>            root = stk.pollLast();<br>            ans.add(root.val);<br>            root = root.right; <span class="hljs-comment">//  脑子里想一个二叉树来模拟</span><br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="后续遍历-非递归">后续遍历(非递归)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//  和前序遍历比较类似,还是比较好想的</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> List&lt;Integer&gt; <span class="hljs-title function_">postorderTraversal</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>        <span class="hljs-type">var</span> <span class="hljs-variable">ans</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;Integer&gt;();<br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> ans;<br>        <span class="hljs-type">var</span> <span class="hljs-variable">stk</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayDeque</span>&lt;TreeNode&gt;();<br>        stk.addLast(root);<br>        <span class="hljs-keyword">while</span> (!stk.isEmpty()) &#123;<br>            <span class="hljs-type">var</span> <span class="hljs-variable">pop</span> <span class="hljs-operator">=</span> stk.pollLast();<br>            ans.addFirst(pop.val);<br>            <span class="hljs-keyword">if</span> (pop.left != <span class="hljs-literal">null</span>) stk.addLast(pop.left);<br>            <span class="hljs-keyword">if</span> (pop.right != <span class="hljs-literal">null</span>) stk.addLast(pop.right);<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="垂直遍历">垂直遍历</h3><p>对于同一层级的同一垂直坐标采取数值比较</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">verticalTraversal</span>(<span class="hljs-params">self, root: <span class="hljs-type">Optional</span>[TreeNode]</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]]:<br>        g = [[] <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">30</span>)]<br>        q = deque([(root, <span class="hljs-number">15</span>)])<br>        <span class="hljs-keyword">while</span> q:<br>            sz = <span class="hljs-built_in">len</span>(q)<br>            temp = []<br>            <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(sz):<br>                poll = q.popleft()<br>                temp.append((poll[<span class="hljs-number">1</span>], poll[<span class="hljs-number">0</span>].val))<br>                <span class="hljs-keyword">if</span> poll[<span class="hljs-number">0</span>].left: q.append((poll[<span class="hljs-number">0</span>].left, poll[<span class="hljs-number">1</span>] - <span class="hljs-number">1</span>))<br>                <span class="hljs-keyword">if</span> poll[<span class="hljs-number">0</span>].right: q.append((poll[<span class="hljs-number">0</span>].right, poll[<span class="hljs-number">1</span>] + <span class="hljs-number">1</span>))<br>            temp.sort()<br>            <span class="hljs-keyword">for</span> e <span class="hljs-keyword">in</span> temp: g[e[<span class="hljs-number">0</span>]].append(e[<span class="hljs-number">1</span>])<br>                <br>        ret = []<br>        <span class="hljs-keyword">for</span> e <span class="hljs-keyword">in</span> g:<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(e) != <span class="hljs-number">0</span>:<br>                ret.append(e)<br>        <span class="hljs-keyword">return</span> ret<br></code></pre></td></tr></table></figure><p><img src="https://assets.leetcode.com/uploads/2021/01/29/vtree1.jpg" style="zoom:80%;" ></img></p><p>输出[9, 3, 15, 20, 7]</p><h3 id="层序遍历-递归">层序遍历(递归)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">levelOrder</span>(<span class="hljs-params">self, root: <span class="hljs-type">Optional</span>[TreeNode]</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]]:<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> root: <span class="hljs-keyword">return</span> []<br>        g = [[] <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2000</span>)]<br><br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">dfs</span>(<span class="hljs-params">r: <span class="hljs-string">&#x27;TreeNode&#x27;</span>, t: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-literal">None</span>:<br>            g[t].append(r.val)<br>            <span class="hljs-keyword">if</span> r.left:<br>                dfs(r.left, t + <span class="hljs-number">1</span>)  <span class="hljs-comment"># 根据递归的思路，这样写也是符合顺序的</span><br>            <span class="hljs-keyword">if</span> r.right:<br>                dfs(r.right, t + <span class="hljs-number">1</span>)<br><br>        dfs(root, <span class="hljs-number">0</span>)<br>        ret = []<br>        <span class="hljs-keyword">for</span> e <span class="hljs-keyword">in</span> g:<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(e): ret.append(e)<br>        <span class="hljs-keyword">return</span> ret<br></code></pre></td></tr></table></figure><h3 id="前中恢复二叉树">前中恢复二叉树</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">buildTree</span>(<span class="hljs-params">self, preorder: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>], inorder: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-type">Optional</span>[TreeNode]:<br>        n = <span class="hljs-built_in">len</span>(preorder)<br>        d = &#123;val: idx <span class="hljs-keyword">for</span> idx, val <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(inorder)&#125;<br>        <br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">dfs</span>(<span class="hljs-params">pl: <span class="hljs-built_in">int</span>, pr: <span class="hljs-built_in">int</span>, il: <span class="hljs-built_in">int</span>, ir: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-type">Optional</span>[TreeNode]:<br>            <span class="hljs-keyword">if</span> pl &gt; pr <span class="hljs-keyword">or</span> il &gt; ir: <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br>            node = TreeNode(preorder[pl])<br>            t = d[preorder[pl]]<br>            node.left = dfs(pl + <span class="hljs-number">1</span>, pl + t - il, il, t - <span class="hljs-number">1</span>)<br>            node.right = dfs(pl + t - il + <span class="hljs-number">1</span>, pr, t + <span class="hljs-number">1</span>, ir)<br>            <span class="hljs-keyword">return</span> node<br><br>        <span class="hljs-keyword">return</span> dfs(<span class="hljs-number">0</span>, n - <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, n - <span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><h3 id="中后恢复二叉树">中后恢复二叉树</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">buildTree</span>(<span class="hljs-params">self, inorder: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>], postorder: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-type">Optional</span>[TreeNode]:<br>        n = <span class="hljs-built_in">len</span>(inorder)<br>        d = &#123;val: idx <span class="hljs-keyword">for</span> idx, val <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(inorder)&#125;<br><br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">dfs</span>(<span class="hljs-params">pl: <span class="hljs-built_in">int</span>, pr: <span class="hljs-built_in">int</span>, il: <span class="hljs-built_in">int</span>, ir: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-type">Optional</span>[TreeNode]:<br>            <span class="hljs-keyword">if</span> pl &gt; pr <span class="hljs-keyword">or</span> il &gt; ir: <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br>            node = TreeNode(postorder[pr])<br>            t = d[postorder[pr]]<br>            node.left = dfs(pl, pr - ir + t - <span class="hljs-number">1</span>, il, t - <span class="hljs-number">1</span>)<br>            node.right = dfs(pr - ir + t, pr - <span class="hljs-number">1</span>, t + <span class="hljs-number">1</span>, ir)<br>            <span class="hljs-keyword">return</span> node<br><br>        <span class="hljs-keyword">return</span> dfs(<span class="hljs-number">0</span>, n - <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, n - <span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><h3 id="前后恢复二叉树">前后恢复二叉树</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"># 前序遍历和后续遍历不能确定一颗二叉树<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    def <span class="hljs-title function_">constructFromPrePost</span><span class="hljs-params">(self, pre: List[<span class="hljs-type">int</span>], post: List[<span class="hljs-type">int</span>])</span> -&gt; TreeNode:<br>        n = len(pre)<br>        d = &#123;val: idx <span class="hljs-keyword">for</span> idx, val in <span class="hljs-title function_">enumerate</span><span class="hljs-params">(post)</span>&#125;<br><br>        def <span class="hljs-title function_">dfs</span><span class="hljs-params">(prl: <span class="hljs-type">int</span>, prr: <span class="hljs-type">int</span>, pol: <span class="hljs-type">int</span>, por: <span class="hljs-type">int</span>)</span> -&gt; TreeNode:<br>            <span class="hljs-keyword">if</span> prl &gt; prr: <span class="hljs-type">return</span><br>            <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> TreeNode(pre[prl])<br>            <span class="hljs-keyword">if</span> prl == prr: <span class="hljs-keyword">return</span> <span class="hljs-type">node</span><br>            <span class="hljs-variable">nxt</span> <span class="hljs-operator">=</span> prl + <span class="hljs-number">1</span><br>            t = d[pre[nxt]] - pol<br>            node.left = dfs(nxt, nxt + t, pol, pol + t)<br>            node.right = dfs(nxt + t + <span class="hljs-number">1</span>, prr, pol + t + <span class="hljs-number">1</span>, por - <span class="hljs-number">1</span>)<br>            <span class="hljs-keyword">return</span> node<br><br>        <span class="hljs-keyword">return</span> dfs(<span class="hljs-number">0</span>, n - <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, n - <span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>杂项</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>差分&amp;二分</title>
    <link href="/2023/09/29/%E5%B7%AE%E5%88%86-%E4%BA%8C%E5%88%86/"/>
    <url>/2023/09/29/%E5%B7%AE%E5%88%86-%E4%BA%8C%E5%88%86/</url>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.cn/problems/number-of-flowers-in-full-bloom/description/">LC2251</a></p><p>给你一个下标从 <strong>0</strong> 开始的二维整数数组 <code>flowers</code> ，其中 <code>flowers[i] = [starti, endi]</code> 表示第 <code>i</code> 朵花的 <strong>花期</strong> 从 <code>starti</code> 到 <code>endi</code> （都 <strong>包含</strong>）。同时给你一个下标从 <strong>0</strong> 开始大小为 <code>n</code> 的整数数组 <code>people</code> ，<code>people[i]</code> 是第 <code>i</code> 个人来看花的时间。</p><p>请你返回一个大小为 <code>n</code> 的整数数组 <code>answer</code> ，其中 <code>answer[i]</code>是第 <code>i</code> 个人到达时在花期内花的 <strong>数目</strong> 。</p><p><strong>示例 1：</strong></p><p><img src="https://assets.leetcode.com/uploads/2022/03/02/ex1new.jpg" alt="img"></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs inform7">输入：flowers = <span class="hljs-comment">[<span class="hljs-comment">[1,6]</span>,<span class="hljs-comment">[3,7]</span>,<span class="hljs-comment">[9,12]</span>,<span class="hljs-comment">[4,13]</span>]</span>, people = <span class="hljs-comment">[2,3,7,11]</span><br>输出：<span class="hljs-comment">[1,2,2,2]</span><br>解释：上图展示了每朵花的花期时间，和每个人的到达时间。<br>对每个人，我们返回他们到达时在花期内花的数目。<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><p><img src="https://assets.leetcode.com/uploads/2022/03/02/ex2new.jpg" alt="img"></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs inform7">输入：flowers = <span class="hljs-comment">[<span class="hljs-comment">[1,10]</span>,<span class="hljs-comment">[3,3]</span>]</span>, people = <span class="hljs-comment">[3,3,2]</span><br>输出：<span class="hljs-comment">[2,2,1]</span><br>解释：上图展示了每朵花的花期时间，和每个人的到达时间。<br>对每个人，我们返回他们到达时在花期内花的数目。<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= flowers.length &lt;= 5 * 104</code></li><li><code>flowers[i].length == 2</code></li><li><code>1 &lt;= starti &lt;= endi &lt;= 109</code></li><li><code>1 &lt;= people.length &lt;= 5 * 104</code></li><li><code>1 &lt;= people[i] &lt;= 109</code></li></ul><p>对于此题首先想到的就是离散化+差分,但后来想了想二分也很适合解决此类问题</p><ul><li><p>差分</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] fullBloomFlowers(<span class="hljs-type">int</span>[][] flowers, <span class="hljs-type">int</span>[] people) &#123;<br>        Set&lt;Integer&gt; set = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeSet</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> flower : flowers) &#123;<br>            set.add(flower[<span class="hljs-number">0</span>]);<br>            set.add(flower[<span class="hljs-number">1</span>]);<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> e : people) set.add(e);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>        Map&lt;Integer, Integer&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> s : set) map.put(s, p++);<br>        <span class="hljs-type">int</span>[] diff = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[p + <span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> flower : flowers) &#123;<br>            diff[map.get(flower[<span class="hljs-number">0</span>])]++;<br>            diff[map.get(flower[<span class="hljs-number">1</span>]) + <span class="hljs-number">1</span>]--;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= p; i++) &#123;<br>            diff[i] += diff[i - <span class="hljs-number">1</span>];<br>        &#125;<br>        <span class="hljs-type">int</span>[] ans = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[people.length];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; people.length; i++) &#123;<br>            ans[i] = diff[map.get(people[i])];<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>二分</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] fullBloomFlowers(<span class="hljs-type">int</span>[][] flowers, <span class="hljs-type">int</span>[] people) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> flowers.length;<br>        <span class="hljs-type">int</span>[] start = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n];<br>        <span class="hljs-type">int</span>[] end = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n];<br>        IntStream.range(<span class="hljs-number">0</span>, n).forEach(idx -&gt; &#123;<br>            start[idx] = flowers[idx][<span class="hljs-number">0</span>];<br>            end[idx] = flowers[idx][<span class="hljs-number">1</span>];<br>        &#125;);<br>        Arrays.sort(start);<br>        Arrays.sort(end);<br>        <span class="hljs-keyword">return</span> Arrays.stream(people).map(person -&gt; binarySearch(start, person) - binarySearch(end, person - <span class="hljs-number">1</span>)).toArray();<br>    &#125;<br><br><br>    <span class="hljs-type">int</span> <span class="hljs-title function_">binarySearch</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr, <span class="hljs-type">int</span> v)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">l</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, r = arr.length - <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span> (l &lt; r) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">mid</span> <span class="hljs-operator">=</span> l + r + <span class="hljs-number">1</span> &gt;&gt; <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span> (arr[mid] &lt;= v) l = mid;<br>            <span class="hljs-keyword">else</span> r = mid - <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> arr[l] &lt;= v ? l : -<span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><p>对于二维情况下两种思路同样适用</p><p><a href="https://leetcode.cn/problems/count-number-of-rectangles-containing-each-point/description/">LC2250</a></p><p>给你一个二维整数数组 <code>rectangles</code> ，其中 <code>rectangles[i] = [li, hi]</code> 表示第 <code>i</code> 个矩形长为 <code>li</code> 高为 <code>hi</code> 。给你一个二维整数数组 <code>points</code> ，其中 <code>points[j] = [xj, yj]</code> 是坐标为 <code>(xj, yj)</code> 的一个点。</p><p>第 <code>i</code> 个矩形的 <strong>左下角</strong> 在 <code>(0, 0)</code> 处，<strong>右上角</strong> 在 <code>(li, hi)</code> 。</p><p>请你返回一个整数数组 <code>count</code> ，长度为 <code>points.length</code>，其中 <code>count[j]</code>是 <strong>包含</strong> 第 <code>j</code> 个点的矩形数目。</p><p>如果 <code>0 &lt;= xj &lt;= li</code> 且 <code>0 &lt;= yj &lt;= hi</code> ，那么我们说第 <code>i</code> 个矩形包含第 <code>j</code> 个点。如果一个点刚好在矩形的 <strong>边上</strong> ，这个点也被视为被矩形包含。</p><p><strong>示例 1：</strong></p><p><img src="https://assets.leetcode.com/uploads/2022/03/02/example1.png" alt="img"></p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs lua">输入：rectangles = <span class="hljs-string">[[1,2],[2,3],[2,5]]</span>, points = <span class="hljs-string">[[2,1],[1,4]]</span><br>输出：[<span class="hljs-number">2</span>,<span class="hljs-number">1</span>]<br>解释：<br>第一个矩形不包含任何点。<br>第二个矩形只包含一个点 (<span class="hljs-number">2</span>, <span class="hljs-number">1</span>) 。<br>第三个矩形包含点 (<span class="hljs-number">2</span>, <span class="hljs-number">1</span>) 和 (<span class="hljs-number">1</span>, <span class="hljs-number">4</span>) 。<br>包含点 (<span class="hljs-number">2</span>, <span class="hljs-number">1</span>) 的矩形数目为 <span class="hljs-number">2</span> 。<br>包含点 (<span class="hljs-number">1</span>, <span class="hljs-number">4</span>) 的矩形数目为 <span class="hljs-number">1</span> 。<br>所以，我们返回 [<span class="hljs-number">2</span>, <span class="hljs-number">1</span>] 。<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><p><img src="https://assets.leetcode.com/uploads/2022/03/02/example2.png" alt="img"></p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs lua">输入：rectangles = <span class="hljs-string">[[1,1],[2,2],[3,3]]</span>, points = <span class="hljs-string">[[1,3],[1,1]]</span><br>输出：[<span class="hljs-number">1</span>,<span class="hljs-number">3</span>]<br>解释：<br>第一个矩形只包含点 (<span class="hljs-number">1</span>, <span class="hljs-number">1</span>) 。<br>第二个矩形只包含点 (<span class="hljs-number">1</span>, <span class="hljs-number">1</span>) 。<br>第三个矩形包含点 (<span class="hljs-number">1</span>, <span class="hljs-number">3</span>) 和 (<span class="hljs-number">1</span>, <span class="hljs-number">1</span>) 。<br>包含点 (<span class="hljs-number">1</span>, <span class="hljs-number">3</span>) 的矩形数目为 <span class="hljs-number">1</span> 。<br>包含点 (<span class="hljs-number">1</span>, <span class="hljs-number">1</span>) 的矩形数目为 <span class="hljs-number">3</span> 。<br>所以，我们返回 [<span class="hljs-number">1</span>, <span class="hljs-number">3</span>] 。<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><p><code>1 &lt;= rectangles.length, points.length &lt;= 5 * 104</code></p></li><li><p><code>rectangles[i].length == points[j].length == 2</code></p></li><li><p><code>1 &lt;= li, xj &lt;= 109</code></p></li><li><p><code>1 &lt;= hi, yj &lt;= 100</code></p></li><li><p>所有 <code>rectangles</code> <strong>互不相同</strong> 。</p></li><li><p>所有 <code>points</code> <strong>互不相同</strong> 。</p></li><li><p>差分</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] countRectangles(<span class="hljs-type">int</span>[][] rectangles, <span class="hljs-type">int</span>[][] points) &#123;<br>        Set&lt;Integer&gt; set = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeSet</span>&lt;&gt;();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">g</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>;<br>        set.add(<span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> rectangle : rectangles) &#123;<br>            set.add(rectangle[<span class="hljs-number">0</span>]);<br>            set.add(rectangle[<span class="hljs-number">1</span>]);<br>            g = Math.max(g, rectangle[<span class="hljs-number">1</span>]);<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> point : points) &#123;<br>            set.add(point[<span class="hljs-number">0</span>]);<br>            set.add(point[<span class="hljs-number">1</span>]);<br>            g = Math.max(g, point[<span class="hljs-number">1</span>]);<br>        &#125;<br>        Map&lt;Integer, Integer&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> e : set) map.put(e, p++);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> map.get(g);<br>        <span class="hljs-type">int</span>[][] diff = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[p + <span class="hljs-number">1</span>][m + <span class="hljs-number">2</span>];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> rectangle : rectangles) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> map.get(rectangle[<span class="hljs-number">0</span>]), y = map.get(rectangle[<span class="hljs-number">1</span>]);<br>            diff[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>]++;<br>            diff[<span class="hljs-number">1</span>][y + <span class="hljs-number">1</span>]--;<br>            diff[x + <span class="hljs-number">1</span>][<span class="hljs-number">1</span>]--;<br>            diff[x + <span class="hljs-number">1</span>][y + <span class="hljs-number">1</span>]++;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= p; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; j &lt;= m; j++) &#123;<br>                diff[i][j] += diff[i - <span class="hljs-number">1</span>][j] + diff[i][j - <span class="hljs-number">1</span>] - diff[i - <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>];<br>            &#125;<br>        &#125;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> points.length;<br>        <span class="hljs-type">int</span>[] ans = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> map.get(points[i][<span class="hljs-number">0</span>]), y = map.get(points[i][<span class="hljs-number">1</span>]);<br>            ans[i] = diff[x][y];<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>二分</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-type">int</span>[][] _rectangles;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] countRectangles(<span class="hljs-type">int</span>[][] rectangles, <span class="hljs-type">int</span>[][] points) &#123;<br>        <span class="hljs-built_in">this</span>._rectangles = rectangles;<br>        Arrays.sort(_rectangles, Comparator.comparing(e -&gt; e[<span class="hljs-number">0</span>]));<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> rectangles.length, m = points.length;<br>        <span class="hljs-type">int</span>[][] sum = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n][<span class="hljs-number">101</span>];<br>        sum[n - <span class="hljs-number">1</span>][_rectangles[n - <span class="hljs-number">1</span>][<span class="hljs-number">1</span>]] = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> n - <span class="hljs-number">2</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>            System.arraycopy(sum[i + <span class="hljs-number">1</span>], <span class="hljs-number">0</span>, sum[i], <span class="hljs-number">0</span>, <span class="hljs-number">101</span>);<br>            sum[i][_rectangles[i][<span class="hljs-number">1</span>]] += <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">99</span>; j &gt;= <span class="hljs-number">0</span>; j--) &#123;<br>                sum[i][j] += sum[i][j + <span class="hljs-number">1</span>];<br>            &#125;<br>        &#125;<br>        <br>        <span class="hljs-type">int</span>[] ans = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[m];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; m; i++) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> points[i][<span class="hljs-number">0</span>], y = points[i][<span class="hljs-number">1</span>];<br>            <span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> binarySearch(x);<br>            <span class="hljs-keyword">if</span> (k != -<span class="hljs-number">1</span>) ans[i] = sum[k][y];<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>    <br>    <span class="hljs-type">int</span> <span class="hljs-title function_">binarySearch</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">l</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, r = _rectangles.length - <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span> (l &lt; r) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">mid</span> <span class="hljs-operator">=</span> l + r &gt;&gt; <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span> (_rectangles[mid][<span class="hljs-number">0</span>] &gt;= x) r = mid;<br>            <span class="hljs-keyword">else</span> l = mid + <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> _rectangles[l][<span class="hljs-number">0</span>] &gt;= x ? l : -<span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>杂项</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>迟到的双向广搜</title>
    <link href="/2023/09/26/%E8%BF%9F%E5%88%B0%E7%9A%84%E5%8F%8C%E5%90%91%E5%B9%BF%E6%90%9C-md/"/>
    <url>/2023/09/26/%E8%BF%9F%E5%88%B0%E7%9A%84%E5%8F%8C%E5%90%91%E5%B9%BF%E6%90%9C-md/</url>
    
    <content type="html"><![CDATA[<h1>双向广搜</h1><p>这个算法很早之前就了解过了,一直没有写过,今天重新学习一遍。</p><p>字典 <code>wordList</code> 中从单词 <code>beginWord</code> 和 <code>endWord</code> 的 <strong>转换序列</strong> 是一个按下述规格形成的序列 <code>beginWord -&gt; s1 -&gt; s2 -&gt; ... -&gt; sk</code>：</p><ul><li>每一对相邻的单词只差一个字母。</li><li>对于 <code>1 &lt;= i &lt;= k</code> 时，每个 <code>si</code> 都在 <code>wordList</code> 中。注意， <code>beginWord</code> 不需要在 <code>wordList</code> 中。</li><li><code>sk == endWord</code></li></ul><p>给你两个单词 <code>beginWord</code> 和 <code>endWord</code> 和一个字典 <code>wordList</code> ，返回 <em>从 <code>beginWord</code> 到 <code>endWord</code> 的 <strong>最短转换序列</strong> 中的 <strong>单词数目</strong></em> 。如果不存在这样的转换序列，返回 <code>0</code> 。</p><p><strong>示例 1：</strong></p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs clean">输入：beginWord = <span class="hljs-string">&quot;hit&quot;</span>, endWord = <span class="hljs-string">&quot;cog&quot;</span>, wordList = [<span class="hljs-string">&quot;hot&quot;</span>,<span class="hljs-string">&quot;dot&quot;</span>,<span class="hljs-string">&quot;dog&quot;</span>,<span class="hljs-string">&quot;lot&quot;</span>,<span class="hljs-string">&quot;log&quot;</span>,<span class="hljs-string">&quot;cog&quot;</span>]<br>输出：<span class="hljs-number">5</span><br>解释：一个最短转换序列是 <span class="hljs-string">&quot;hit&quot;</span> -&gt; <span class="hljs-string">&quot;hot&quot;</span> -&gt; <span class="hljs-string">&quot;dot&quot;</span> -&gt; <span class="hljs-string">&quot;dog&quot;</span> -&gt; <span class="hljs-string">&quot;cog&quot;</span>, 返回它的长度 <span class="hljs-number">5</span>。<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs erlang">输入：<span class="hljs-keyword">begin</span>Word = <span class="hljs-string">&quot;hit&quot;</span>, <span class="hljs-keyword">end</span>Word = <span class="hljs-string">&quot;cog&quot;</span>, wordList = [<span class="hljs-string">&quot;hot&quot;</span>,<span class="hljs-string">&quot;dot&quot;</span>,<span class="hljs-string">&quot;dog&quot;</span>,<span class="hljs-string">&quot;lot&quot;</span>,<span class="hljs-string">&quot;log&quot;</span>]<br>输出：<span class="hljs-number">0</span><br>解释：<span class="hljs-keyword">end</span>Word <span class="hljs-string">&quot;cog&quot;</span> 不在字典中，所以无法进行转换。<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">check</span>(<span class="hljs-params">self, s1: <span class="hljs-built_in">str</span>, s2: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">bool</span>:<br>        cnt = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> c1, c2 <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(s1, s2):<br>            <span class="hljs-keyword">if</span> c1 != c2:<br>                cnt += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> cnt == <span class="hljs-number">1</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">ladderLength</span>(<span class="hljs-params">self, beginWord: <span class="hljs-built_in">str</span>, endWord: <span class="hljs-built_in">str</span>, wordList: <span class="hljs-type">List</span>[<span class="hljs-built_in">str</span>]</span>) -&gt; <span class="hljs-built_in">int</span>:<br>        <span class="hljs-keyword">if</span> endWord <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">set</span>(wordList):<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>        q1, q2 = deque(), deque()<br>        mp1, mp2 = &#123;&#125;, &#123;&#125;<br>        mp1[beginWord] = <span class="hljs-number">1</span><br>        mp2[endWord] = <span class="hljs-number">1</span><br>        q1.append(beginWord)<br>        q2.append(endWord)<br>        <span class="hljs-keyword">while</span> q1 <span class="hljs-keyword">and</span> q2:<br>            i = <span class="hljs-number">0</span><br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(q1) &lt;= <span class="hljs-built_in">len</span>(q2):<br>                i = self.bfs(q1, mp1, mp2, wordList)<br>            <span class="hljs-keyword">else</span>:<br>                i = self.bfs(q2, mp2, mp1, wordList)<br>            <span class="hljs-keyword">if</span> i != -<span class="hljs-number">1</span>:<br>                <span class="hljs-keyword">return</span> i<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br><br>    <span class="hljs-comment"># 核心代码</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">bfs</span>(<span class="hljs-params">self, q: Deque, mp1: <span class="hljs-built_in">dict</span>, mp2: <span class="hljs-built_in">dict</span>, wordList: <span class="hljs-type">List</span>[<span class="hljs-built_in">str</span>]</span>) -&gt; <span class="hljs-built_in">int</span>:<br>        sz = <span class="hljs-built_in">len</span>(q)<br>        <span class="hljs-keyword">while</span> sz:<br>            s = q.popleft()<br>            <span class="hljs-keyword">if</span> s <span class="hljs-keyword">in</span> mp2:<br>                <span class="hljs-keyword">return</span> mp1[s] + mp2[s] - <span class="hljs-number">1</span><br>            <span class="hljs-keyword">for</span> word <span class="hljs-keyword">in</span> wordList:<br>                <span class="hljs-keyword">if</span> word <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> mp1 <span class="hljs-keyword">and</span> self.check(word, s):<br>                    mp1[word] = mp1[s] + <span class="hljs-number">1</span><br>                    q.append(word)<br>            sz -= <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>杂项</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一道数据结构题</title>
    <link href="/2023/09/25/%E4%B8%80%E9%81%93%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E9%A2%98/"/>
    <url>/2023/09/25/%E4%B8%80%E9%81%93%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1>LRU和LFU</h1><p>LRU作为常用的缓存策略,LFU也是一种缓存策略。两者的代码实现均可采用<code>LinkedHashSet(map)</code>或双向链表来实现。</p><h3 id="LRU">LRU</h3><h4 id="LinkedHashSet">LinkedHashSet</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">LRUCache</span> &#123;<br><br><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span> &#123;<br><br>        Integer k, v;<br><br><br>        Node(Integer _k, Integer _v) &#123;<br>            k = _k;<br>            v = _v;<br>        &#125;<br>    &#125;<br><br>    Map&lt;Integer, Node&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>    LinkedHashSet&lt;Node&gt; set = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedHashSet</span>&lt;&gt;();<br><br>    <span class="hljs-type">int</span> capacity;<br>    <span class="hljs-type">int</span> count;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">LRUCache</span><span class="hljs-params">(<span class="hljs-type">int</span> _capacity)</span> &#123;<br>        capacity = _capacity;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">get</span><span class="hljs-params">(<span class="hljs-type">int</span> key)</span> &#123;<br>        <span class="hljs-keyword">if</span> (!map.containsKey(key)) <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> map.get(key);<br>        set.remove(node);<br>        set.add(node);<br>        <span class="hljs-keyword">return</span> map.get(key).v;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">put</span><span class="hljs-params">(<span class="hljs-type">int</span> key, <span class="hljs-type">int</span> value)</span> &#123;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">newNode</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(key, value);<br>        <span class="hljs-keyword">if</span> (map.containsKey(key)) &#123;<br>            <span class="hljs-type">var</span> <span class="hljs-variable">oldNode</span> <span class="hljs-operator">=</span> map.get(key);<br>            set.remove(oldNode);<br>            set.add(newNode);<br>            map.put(key, newNode);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">if</span> (count &lt; capacity) &#123;<br>                set.add(newNode);<br>                map.put(key, newNode);<br>                count++;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-type">var</span> <span class="hljs-variable">obsoleteNode</span> <span class="hljs-operator">=</span> set.iterator().next();<br>                set.remove(obsoleteNode);<br>                map.remove(obsoleteNode.k);<br>                set.add(newNode);<br>                map.put(key, newNode);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="DoublyList">DoublyList</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">LRUCache</span> &#123;<br><br><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span>&lt;K, V&gt; &#123;<br>        Node&lt;K, V&gt; pre;<br>        Node&lt;K, V&gt; next;<br>        K k;<br>        V v;<br><br>        Node(K k, V v) &#123;<br>            <span class="hljs-built_in">this</span>.k = k;<br>            <span class="hljs-built_in">this</span>.v = v;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DoublyList</span> &#123;<br><br><br>        Node&lt;Integer, Integer&gt; head, tail;<br><br>        DoublyList() &#123;<br>            head = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>&lt;&gt;(-<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>);<br>            tail = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>&lt;&gt;(-<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>);<br>            head.next = tail;<br>            tail.pre = head;<br>        &#125;<br><br>        <span class="hljs-keyword">void</span> <span class="hljs-title function_">addLast</span><span class="hljs-params">(Node&lt;Integer, Integer&gt; node)</span> &#123;<br>            <span class="hljs-type">var</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> tail.pre;<br>            node.next = tail;<br>            tail.pre = node;<br>            node.pre = p;<br>            p.next = node;<br>        &#125;<br><br>        Node&lt;Integer, Integer&gt; <span class="hljs-title function_">removeFirst</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-type">var</span> <span class="hljs-variable">ret</span> <span class="hljs-operator">=</span> head.next;<br>            <span class="hljs-type">var</span> <span class="hljs-variable">nxt</span> <span class="hljs-operator">=</span> ret.next;<br>            nxt.pre = head;<br>            head.next = nxt;<br>            <span class="hljs-keyword">return</span> ret;<br>        &#125;<br><br>        <span class="hljs-keyword">void</span> <span class="hljs-title function_">remove</span><span class="hljs-params">(Node&lt;Integer, Integer&gt; node)</span> &#123;<br>            <span class="hljs-type">var</span> <span class="hljs-variable">pre</span> <span class="hljs-operator">=</span> node.pre;<br>            <span class="hljs-type">var</span> <span class="hljs-variable">nxt</span> <span class="hljs-operator">=</span> node.next;<br>            pre.next = nxt;<br>            nxt.pre = pre;<br>        &#125;<br><br>    &#125;<br><br><br>    Map&lt;Integer, Node&lt;Integer, Integer&gt;&gt; map;<br><br>    <span class="hljs-type">int</span> capacity;<br><br>    DoublyList doublyList;<br><br>    <span class="hljs-type">int</span> count;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">LRUCache</span><span class="hljs-params">(<span class="hljs-type">int</span> capacity)</span> &#123;<br>        map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        <span class="hljs-built_in">this</span>.capacity = capacity;<br>        doublyList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DoublyList</span>();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">get</span><span class="hljs-params">(<span class="hljs-type">int</span> key)</span> &#123;<br>        <span class="hljs-keyword">if</span> (!map.containsKey(key)) <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>        <span class="hljs-type">var</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> map.get(key);<br>        doublyList.remove(node);<br>        doublyList.addLast(node);<br>        <span class="hljs-keyword">return</span> node.v;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">put</span><span class="hljs-params">(<span class="hljs-type">int</span> key, <span class="hljs-type">int</span> value)</span> &#123;<br>        Node&lt;Integer, Integer&gt; newNode = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>&lt;&gt;(key, value);<br>        <span class="hljs-keyword">if</span> (map.containsKey(key)) &#123;<br>            <span class="hljs-type">var</span> <span class="hljs-variable">oldNode</span> <span class="hljs-operator">=</span> map.get(key);<br>            doublyList.remove(oldNode);<br>            doublyList.addLast(newNode);<br>            map.put(key, newNode);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">if</span> (count &lt; capacity) &#123;<br>                doublyList.addLast(newNode);<br>                map.put(key, newNode);<br>                count++;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-type">var</span> <span class="hljs-variable">obsolete</span> <span class="hljs-operator">=</span> doublyList.removeFirst();<br>                map.remove(obsolete.k);<br>                doublyList.addLast(newNode);<br>                map.put(key, newNode);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="LFU">LFU</h3><h4 id="LinkedHashSet-2">LinkedHashSet</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">LFUCache</span> &#123;<br><br><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span>&lt;K, V&gt; &#123;<br>        Node&lt;K, V&gt; next;<br>        Node&lt;K, V&gt; pre;<br><br>        K k;<br><br>        V v;<br><br>        <span class="hljs-type">int</span> freq;<br><br>        Node(K _k, V _v) &#123;<br>            k = _k;<br>            v = _v;<br>            freq = <span class="hljs-number">1</span>;<br>        &#125;<br><br>    &#125;<br><br>    Map&lt;Integer, Node&lt;Integer, Integer&gt;&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br><br>    Map&lt;Integer, LinkedHashSet&lt;Node&lt;Integer, Integer&gt;&gt;&gt; Freq = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br><br>    <span class="hljs-type">int</span> cap;<br><br>    <span class="hljs-type">int</span> cnt;<br><br>    <span class="hljs-type">int</span> minFreq;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">LFUCache</span><span class="hljs-params">(<span class="hljs-type">int</span> capacity)</span> &#123;<br>        cap = capacity;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">get</span><span class="hljs-params">(<span class="hljs-type">int</span> key)</span> &#123;<br>        <span class="hljs-keyword">if</span> (!map.containsKey(key)) <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>        flush(key);<br>        <span class="hljs-keyword">return</span> map.get(key).v;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">put</span><span class="hljs-params">(<span class="hljs-type">int</span> key, <span class="hljs-type">int</span> value)</span> &#123;<br>        <span class="hljs-keyword">if</span> (!map.containsKey(key)) &#123;<br>            Node&lt;Integer, Integer&gt; node = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>&lt;&gt;(key, value);<br>            <span class="hljs-keyword">if</span> (cnt &lt; cap) cnt++;<br>            <span class="hljs-keyword">else</span> removeOne();<br>            map.put(key, node);<br>            Freq.computeIfAbsent(<span class="hljs-number">1</span>, e -&gt; <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedHashSet</span>&lt;&gt;()).add(node);<br>            minFreq = <span class="hljs-number">1</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            Node&lt;Integer, Integer&gt; integerIntegerNode = map.get(key);<br>            integerIntegerNode.v = value;<br>            flush(key);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">flush</span><span class="hljs-params">(<span class="hljs-type">int</span> key)</span> &#123;<br>        <span class="hljs-type">var</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> map.get(key);<br>        <span class="hljs-type">var</span> <span class="hljs-variable">freq</span> <span class="hljs-operator">=</span> node.freq;<br>        <span class="hljs-type">var</span> <span class="hljs-variable">set</span> <span class="hljs-operator">=</span> Freq.get(freq);<br>        set.remove(node);<br>        <span class="hljs-keyword">if</span> (set.isEmpty() &amp;&amp; minFreq == freq) minFreq++;<br>        node.freq++;<br>        Freq.computeIfAbsent(node.freq, e -&gt; <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedHashSet</span>&lt;&gt;()).add(node);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">removeOne</span><span class="hljs-params">()</span> &#123;<br>        LinkedHashSet&lt;Node&lt;Integer, Integer&gt;&gt; nodes = Freq.get(minFreq);<br>        Node&lt;Integer, Integer&gt; next = nodes.iterator().next();<br>        nodes.remove(next);<br>        map.remove(next.k);<br>    &#125;<br><br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="DoublyList-2">DoublyList</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">LFUCache</span> &#123;<br><br><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span>&lt;K, V&gt; &#123;<br>        Node&lt;K, V&gt; next;<br>        Node&lt;K, V&gt; pre;<br>        K k;<br>        V v;<br>        <span class="hljs-type">int</span> freq;<br><br>        Node(K _k, V _v) &#123;<br>            k = _k;<br>            v = _v;<br>            freq = <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br><br><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DoublyList</span> &#123;<br><br>        Node&lt;Integer, Integer&gt; head, tail;<br><br>        DoublyList() &#123;<br>            head = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>&lt;&gt;(-<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>);<br>            tail = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>&lt;&gt;(-<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>);<br>            head.next = tail;<br>            tail.pre = head;<br>        &#125;<br><br>        <span class="hljs-type">boolean</span> <span class="hljs-title function_">isEmpty</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> head.next == tail;<br>        &#125;<br><br>        Node&lt;Integer, Integer&gt; <span class="hljs-title function_">removeFirst</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-type">var</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> head.next;<br>            <span class="hljs-type">var</span> <span class="hljs-variable">nNode</span> <span class="hljs-operator">=</span> node.next;<br>            head.next = nNode;<br>            nNode.pre = head;<br>            <span class="hljs-keyword">return</span> node;<br>        &#125;<br><br>        <span class="hljs-keyword">void</span> <span class="hljs-title function_">remove</span><span class="hljs-params">(Node&lt;Integer, Integer&gt; node)</span> &#123;<br>            <span class="hljs-type">var</span> <span class="hljs-variable">pNode</span> <span class="hljs-operator">=</span> node.pre;<br>            <span class="hljs-type">var</span> <span class="hljs-variable">nNode</span> <span class="hljs-operator">=</span> node.next;<br>            pNode.next = nNode;<br>            nNode.pre = pNode;<br>        &#125;<br><br>        <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(Node&lt;Integer, Integer&gt; node)</span> &#123;<br>            <span class="hljs-type">var</span> <span class="hljs-variable">lastNode</span> <span class="hljs-operator">=</span> tail.pre;<br>            lastNode.next = node;<br>            node.pre = lastNode;<br>            node.next = tail;<br>            tail.pre = node;<br>        &#125;<br>    &#125;<br><br><br>    Map&lt;Integer, Node&lt;Integer, Integer&gt;&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br><br>    Map&lt;Integer, DoublyList&gt; Freq = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br><br>    <span class="hljs-type">int</span> cap;<br><br>    <span class="hljs-type">int</span> cnt;<br><br>    <span class="hljs-type">int</span> minFreq;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">LFUCache</span><span class="hljs-params">(<span class="hljs-type">int</span> capacity)</span> &#123;<br>        cap = capacity;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">get</span><span class="hljs-params">(<span class="hljs-type">int</span> key)</span> &#123;<br>        <span class="hljs-keyword">if</span> (!map.containsKey(key)) <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>        flush(key);<br>        <span class="hljs-keyword">return</span> map.get(key).v;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">put</span><span class="hljs-params">(<span class="hljs-type">int</span> key, <span class="hljs-type">int</span> value)</span> &#123;<br>        <span class="hljs-keyword">if</span> (!map.containsKey(key)) &#123;<br>            Node&lt;Integer, Integer&gt; node = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>&lt;&gt;(key, value);<br>            <span class="hljs-keyword">if</span> (cnt &lt; cap) cnt++;<br>            <span class="hljs-keyword">else</span> removeOne();<br>            map.put(key, node);<br>            Freq.computeIfAbsent(<span class="hljs-number">1</span>, e -&gt; <span class="hljs-keyword">new</span> <span class="hljs-title class_">DoublyList</span>()).add(node);<br>            minFreq = <span class="hljs-number">1</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            map.get(key).v = value;<br>            flush(key);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">flush</span><span class="hljs-params">(<span class="hljs-type">int</span> key)</span> &#123;<br>        <span class="hljs-type">var</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> map.get(key);<br>        <span class="hljs-type">var</span> <span class="hljs-variable">f</span> <span class="hljs-operator">=</span> node.freq;<br>        <span class="hljs-type">var</span> <span class="hljs-variable">list</span> <span class="hljs-operator">=</span> Freq.get(f);<br>        list.remove(node);<br>        <span class="hljs-keyword">if</span> (list.isEmpty() &amp;&amp; f == minFreq) minFreq++;<br>        node.freq++;<br>        Freq.computeIfAbsent(node.freq, e -&gt; <span class="hljs-keyword">new</span> <span class="hljs-title class_">DoublyList</span>()).add(node);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">removeOne</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">var</span> <span class="hljs-variable">list</span> <span class="hljs-operator">=</span> Freq.get(minFreq);<br>        Node&lt;Integer, Integer&gt; node = list.removeFirst();<br>        map.remove(node.k);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>杂项</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计算机网络</title>
    <link href="/2023/09/25/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    <url>/2023/09/25/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</url>
    
    <content type="html"><![CDATA[<h1>计算机网络</h1><h3 id="七层-五层模型">七层/五层模型</h3><p>七层模型(OSI)为ISO标准指定的,五层模型通常是指TCP/IP五层模型。</p><p><img src="https://image.itbaima.cn/images/76/image-20230923102009275.png" style="zoom:80%;" ></img></p><table><thead><tr><th><strong>OSI</strong></th><th><strong>功能</strong></th><th><strong>协议</strong></th></tr></thead><tbody><tr><td>物理层</td><td>定义物理设备标准，完成比特流在物理设备上的传输</td><td></td></tr><tr><td>数据链路层</td><td>点对点之间可靠连接，差错控制，建立维持拆除,传输的是帧</td><td>ARQ,PPP,CSMA/CD</td></tr><tr><td>网络层</td><td>路由选择，网络地址划分，拥塞控制，网络互联,传输的是ip数据包</td><td>IP,ARP,OSPF,RIP,ICMP,BGP</td></tr><tr><td>传输层</td><td>提供面向连接或无连接的数据传输服务,端对端传输,传输的是数据段</td><td>TCP,UDP</td></tr><tr><td>会话层</td><td>建立维护终止会话</td><td></td></tr><tr><td>表示层</td><td>协商应用程序交互的数据格式</td><td></td></tr><tr><td>应用层</td><td>为网络应用提供协议支持和服务,传输的是报文</td><td>HTTP,DNS,SSH,FTP,DHCP</td></tr></tbody></table><h3 id="TCP连接与释放">TCP连接与释放</h3><h4 id="TCP连接时三次握手">TCP连接时三次握手</h4><p>三次握手（Three-way Handshake）其实就是指建立一个TCP连接时，需要客户端和服务器总共发送3个包。进行三次握手的主要作用就是为了确认双方的接收能力和发送能力是否正常、指定自己的初始化序列号为后面的可靠性传送做准备。实质上其实就是连接服务器指定端口，建立TCP连接，并同步连接双方的序列号和确认号，交换TCP窗口大小信息。</p><p>刚开始客户端处于 Closed 的状态，服务端处于 Listen 状态。<br>进行三次握手：</p><ul><li><p>第一次握手：客户端给服务端发一个 SYN 报文，并指明客户端的初始化序列号 ISN。此时客户端处于 <code>SYN_SENT</code> 状态。</p><p>首部的同步位SYN=1，初始序号seq=x，SYN=1的报文段不能携带数据，但要消耗掉一个序号。</p></li><li><p>第二次握手：服务器收到客户端的 SYN 报文之后，会以自己的 SYN 报文作为应答，并且也是指定了自己的初始化序列号 ISN(s)。同时会把客户端的 ISN + 1 作为ACK 的值，表示自己已经收到了客户端的 SYN，此时服务器处于 <code>SYN_RCVD</code> 的状态。在确认报文段中SYN=1，ACK=1，确认号ack=x+1，初始序号seq=y。</p></li><li><p>第三次握手：客户端收到 SYN 报文之后，会发送一个 ACK 报文，当然，也是一样把服务器的 ISN + 1 作为 ACK 的值，表示已经收到了服务端的 SYN 报文，此时客户端处于 ESTABLISHED 状态。服务器收到 ACK 报文之后，也处于 <code>ESTABLISHED</code> 状态，此时，双方已建立起了连接。确认报文段ACK=1，确认号ack=y+1，序号seq=x+1（初始为seq=x，第二个报文段所以要+1），ACK报文段可以携带数据，不携带数据则不消耗序号。</p></li></ul><p><img src="https://image.itbaima.cn/images/76/image-20230923116566644.png" style="zoom:80%;" ></img></p><ul><li><p>为什么要三次握手而不是两次?</p><p>第一次握手,客户端向服务端发送网络包,服务端可以得出结论:客户端发送正常,服务端接收正常；第二次握手,服务端发送网络包,客户端得出结论:服务端发送/接收正常,客户端发送/接收正常,但服务端并不能知道客户端接收是否正常,第三次握手,客户端向服务端发送网络包,服务端得出结论:客户端和服务端发送/接收都正常。</p><p>如果采用两次握手就会出现已经失效的连接.比如客户端向服务端发送一个请求连接,但因为网络波动导致此连接丢失,于是客户端重新发送一次请求连接,当客户端和服务端通信结束后,之前那个丢失的连接到达了服务端,如果只采用两次握手的话,那么服务端此时回应无效的连接,建立了一次无效的连接,耗费资源。</p></li><li><p>什么是半连接队列?</p><p>服务器第一次收到客户端的连接时，状态变为<code>SYN_RCVD</code>,此时双方还未建立连接,服务器会把此种连接的请求放到一个队列里,称为半连接状态,与之对应的是已经建立连接的全连接队列,但队列满了之后可能会有丢包.</p></li><li><p>ISN(Initial Sequence Number)是固定的吗？</p><p>三次握手的其中一个重要功能是客户端和服务端交换 ISN(Initial Sequence Number)，以便让对方知道接下来接收数据的时候如何按序列号组装数据。如果 ISN 是固定的，攻击者很容易猜出后续的确认号，因此 ISN 是动态生成的。</p></li><li><p>三次握手过程中可以携带数据吗？</p><p>第三次握手的时候，是可以携带数据的。但是，<strong>第一次、第二次握手不可以携带数据</strong>,为什么这样呢?大家可以想一个问题，假如第一次握手可以携带数据的话，如果有人要恶意攻击服务器，那他每次都在第一次握手中的 SYN 报文中放入大量的数据。因为攻击者根本就不理服务器的接收、发送能力是否正常，然后疯狂着重复发 SYN 报文的话，这会让服务器花费很多时间、内存空间来接收这些报文。也就是说，<strong>第一次握手不可以放数据，其中一个简单的原因就是会让服务器更加容易受到攻击了。而对于第三次的话，此时客户端已经处于 ESTABLISHED 状态。对于客户端来说，他已经建立起连接了，并且也已经知道服务器的接收、发送能力是正常的了，所以能携带数据也没啥毛病。</strong></p></li><li><p>SYN攻击是什么？</p><p>服务器端的资源分配是在二次握手时分配的，而客户端的资源是在完成三次握手时分配的，所以服务器容易受到SYN洪泛攻击。SYN攻击就是Client在短时间内伪造大量不存在的IP地址，并向Server不断地发送SYN包，Server则回复确认包，并等待Client确认，由于源地址不存在，因此Server需要不断重发直至超时，这些伪造的SYN包将长时间占用未连接队列，导致正常的SYN请求因为队列满而被丢弃，从而引起网络拥塞甚至系统瘫痪。SYN 攻击是一种典型的 DoS/DDoS 攻击。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">linux检测检测是否被syn攻击</span><br>netstat -n -p TCP | grep SYN_RECV<br></code></pre></td></tr></table></figure><p>常见的防御 SYN 攻击的方法有如下几种：</p><ul><li>缩短超时（SYN Timeout）时间</li><li>增加最大半连接数</li><li>过滤网关防护</li><li>SYN cookies技术</li></ul></li></ul><h4 id="TCP释放时四次挥手">TCP释放时四次挥手</h4><p>建立一个连接需要三次握手，而终止一个连接要经过四次挥手（也有将四次挥手叫做四次握手的）。这由TCP的<strong>半关闭</strong>（half-close）造成的。所谓的半关闭，其实就是TCP提供了连接的一端在结束它的发送后还能接收来自另一端数据的能力。TCP 连接的拆除需要发送四个包，因此称为四次挥手(Four-way handshake)，客户端或服务端均可主动发起挥手动作。刚开始双方都处于<code>ESTABLISHED</code> 状态，假如是客户端先发起关闭请求。四次挥手的过程如下：</p><ul><li>第一次挥手：客户端发送一个 FIN 报文，报文中会指定一个序列号。此时客户端处于 <code>FIN_WAIT1</code> 状态。<br>即发出<strong>连接释放报文段</strong>（FIN=1，序号seq=u），并停止再发送数据，主动关闭TCP连接，进入FIN_WAIT1（终止等待1）状态，等待服务端的确认。</li><li>第二次挥手：服务端收到 FIN 之后，会发送 ACK 报文，且把客户端的序列号值 +1 作为 ACK 报文的序列号值，表明已经收到客户端的报文了，此时服务端处于 CLOSE_WAIT 状态。<br>即服务端收到连接释放报文段后即发出确认报文段（ACK=1，确认号ack=u+1，序号seq=v），服务端进入CLOSE_WAIT（关闭等待）状态，此时的TCP处于半关闭状态，客户端到服务端的连接释放。客户端收到服务端的确认后，进入FIN_WAIT2（终止等待2）状态，等待服务端发出的连接释放报文段。</li><li>第三次挥手：如果服务端也想断开连接了，和客户端的第一次挥手一样，发给 FIN 报文，且指定一个序列号。此时服务端处于 LAST_ACK 的状态。<br>即服务端没有要向客户端发出的数据，服务端发出连接释放报文段（FIN=1，ACK=1，序号seq=w，确认号ack=u+1），服务端进入LAST_ACK（最后确认）状态，等待客户端的确认。</li><li>第四次挥手：客户端收到 FIN 之后，一样发送一个 ACK 报文作为应答，且把服务端的序列号值 +1 作为自己 ACK 报文的序列号值，此时客户端处于 TIME_WAIT 状态。需要过一阵子以确保服务端收到自己的 ACK 报文之后才会进入 CLOSED 状态，服务端收到 ACK 报文之后，就处于关闭连接了，处于 CLOSED 状态。<br>即客户端收到服务端的连接释放报文段后，对此发出确认报文段（ACK=1，seq=u+1，ack=w+1），客户端进入TIME_WAIT（时间等待）状态。此时TCP未释放掉，需要经过时间等待计时器设置的时间2MSL后，客户端才进入CLOSED状态。</li></ul><p><img src="https://image.itbaima.cn/images/76/image-20230923113999279.png" style="zoom:80%;" ></img></p><ul><li><p>为什么需要四次挥手?</p><p>因为当服务端收到客户端的SYN连接请求报文后，可以直接发送SYN+ACK报文。其中ACK报文是用来应答的，SYN报文是用来同步的。但是关闭连接时，当服务端收到FIN报文时，很可能并不会立即关闭SOCKET，所以只能先回复一个ACK报文，告诉客户端，“你发的FIN报文我收到了”。只有等到我服务端所有的报文都发送完了，我才能发送FIN报文，因此不能一起发送。故需要四次挥手。</p></li><li><p>2MSL等待状态</p><p>TIME_WAIT状态也成为2MSL等待状态。每个具体TCP实现必须选择一个报文段最大生存时间MSL（Maximum Segment Lifetime），它是任何报文段被丢弃前在网络内的最长时间。这个时间是有限的，因为TCP报文段以IP数据报在网络内传输，而IP数据报则有限制其生存时间的TTL字段。对一个具体实现所给定的MSL值，处理的原则是：当TCP执行一个主动关闭，并发回最后一个ACK，该连接必须在TIME_WAIT状态停留的时间为2倍的MSL。这样可让TCP再次发送最后的ACK以防这个ACK丢失（另一端超时并重发最后的FIN）。这种2MSL等待的另一个结果是这个TCP连接在2MSL等待期间，定义这个连接的插口（客户的IP地址和端口号，服务器的IP地址和端口号）不能再被使用。这个连接只能在2MSL结束后才能再被使用。</p></li><li><p>四次挥手释放连接时，等待2MSL的意义?</p><p>为了保证客户端发送的最后一个ACK报文段能够到达服务器。因为这个ACK有可能丢失，从而导致处在LAST-ACK状态的服务器收不到对FIN-ACK的确认报文。服务器会超时重传这个FIN-ACK，接着客户端再重传一次确认，重新启动时间等待计时器。最后客户端和服务器都能正常的关闭。假设客户端不等待2MSL，而是在发送完ACK之后直接释放关闭，一但这个ACK丢失的话，服务器就无法正常的进入关闭连接状态。</p><ul><li><p><strong>保证客户端发送的最后一个ACK报文段能够到达服务端</strong>。</p><p>这个ACK报文段有可能丢失，使得处于LAST-ACK状态的B收不到对已发送的FIN+ACK报文段的确认，服务端超时重传FIN+ACK报文段，而客户端能在2MSL时间内收到这个重传的FIN+ACK报文段，接着客户端重传一次确认，重新启动2MSL计时器，最后客户端和服务端都进入到CLOSED状态，若客户端在TIME-WAIT状态不等待一段时间，而是发送完ACK报文段后立即释放连接，则无法收到服务端重传的FIN+ACK报文段，所以不会再发送一次确认报文段，则服务端无法正常进入到CLOSED状态。</p></li><li><p><strong>防止“已失效的连接请求报文段”出现在本连接中</strong>。</p><p>客户端在发送完最后一个ACK报文段后，再经过2MSL，就可以使本连接持续的时间内所产生的所有报文段都从网络中消失，使下一个新的连接中不会出现这种旧的连接请求报文段。</p></li></ul></li><li><p>为什么TIME_WAIT状态需要经过2MSL才能返回到CLOSE状态？</p><p>理论上，四个报文都发送完毕，就可以直接进入CLOSE状态了，但是可能网络是不可靠的，有可能最后一个ACK丢失。所以<strong>TIME_WAIT状态就是用来重发可能丢失的ACK报文</strong>。</p></li><li><p><strong>TCP 协议如何保证可靠传输？</strong></p><p>(1）应用数据被分割成 TCP 认为最适合发送的数据块。<br>（2）TCP 给发送的每一个包进行编号，接收方对数据包进行排序，把有序数据传送给应用层。<br>（3）校验和： TCP 将保持它首部和数据的检验和。这是一个端到端的检验和，目的是检测数据在传输过程中的任何变化。如果收到段的检验和有差错，TCP 将丢弃这个报文段和不确认收到此报文段。<br>（4）TCP 的接收端会丢弃重复的数据。<br>（5）流量控制： TCP 连接的每一方都有固定大小的缓冲空间，TCP的接收端只允许发送端发送接收端缓冲区能接纳的数据。当接收方来不及处理发送方的数据，能提示发送方降低发送的速率，防止包丢失。TCP 使用的流量控制协议是可变大小的滑动窗口协议。 （TCP 利用滑动窗口实现流量控制）<br>（6）拥塞控制： 当网络拥塞时，减少数据的发送。<br>（7）停止等待协议 也是为了实现可靠传输的，它的基本原理就是每发完一个分组就停止发送，等待对方确认。在收到确认后再发下一个分组。 超时重传： 当 TCP 发出一个段后，它启动一个定时器，等待目的端确认收到这个报文段。如果不能及时收到一个确认，将重发这个报文段。</p></li><li><p><strong>TCP怎么解决拥塞控制？</strong></p><ol><li><p>慢开始</p><p>在TCP刚刚连接好并开始发送TCP报文段时，先令拥塞窗口cwnd = 1，即一个最大报文段长度MSS。每收到一个对新报文段的确认后，将cwnd 加1，即增大一个MSS。用这样的方法逐步增大发送方的拥塞窗口 cwnd，可使分组注入网络的速率更加合理。</p></li><li><p><strong>拥塞避免算法</strong></p><p>拥塞避免算法的做法如下：发送端的拥塞窗口cwnd每经过一个往返时延RTT就增加一个MSS的大小，而不是加倍，使cwnd按线性规律缓慢增长（即加法增大)，而当出现一次超时(网络拥塞)时，令慢开始门限ssthresh等于当前cwnd的一半（即乘法减小)。</p></li><li><p><strong>快重传</strong></p><p>快重传技术使用了冗余ACK来检测丢包的发生。同样，冗余ACK也用于网络拥塞的检测（丢了包当然意味着网络可能出现了拥塞)。快重传并非取消重传计时器，而是在某些情况下可更早地重传丢失的报文段。<strong>当发送方连续收到三个重复的ACK报文时，直接重传对方尚未收到的报文段，而不必等待那个报文段设置的重传计时器超时</strong>。</p></li><li><p><strong>快恢复</strong></p><p>快恢复算法的原理如下：发送端收到连续三个冗余ACK(即重复确认）时，执行“乘法减小”算法，把慢开始门限ssthresh设置为出现拥塞时发送方cwnd的一半。与慢开始（慢开始算法将拥塞窗口cwnd 设置为1)的不同之处是，它把cwnd 的值设置为慢开始门限ssthresh改变后的数值，然后开始执行拥塞避免算法(“加法增大”)，使拥塞窗口缓慢地线性增大。</p></li></ol></li><li><p><strong>粘包和拆包发生原因</strong>？<strong>粘包和拆包解决策略</strong>?</p><p>1、要发送的数据大于TCP发送缓冲区剩余空间大小，将会发生拆包；<br>2、要发送的数据小于TCP发送缓冲区的大小，TCP将多次写入缓冲区的数据一次发送出去，将会发生粘包；<br>3、待发送数据大于最大报文长度，TCP在传输前将进行拆包；<br>4、接收数据端的应用层没有及时读取接收缓冲区中的数据，将发生粘包；</p><p><strong>消息定长</strong>：发送端将每个数据包封装为固定长度（不够的可以通过补0填充），这样接收端每次从缓冲区中读取固定长度的数据，这就自然而然的把每个数据包拆分开来；</p><p><strong>设置消息边界</strong>：服务端从网络流中按消息边界分离出消息内容，比如在数据包末尾增加回车换行符进行分割；</p><p><strong>将消息分为消息头和消息体</strong>：消息头中包含表示消息总长度（或者消息体长度）的字段，消息体是要读取的内容；<br>更复杂的应用层协议</p></li></ul><h3 id="TCP-UDP">TCP/UDP</h3><ul><li><p>传输效率而言</p><p>TCP面向连接,通过三次握手先建立连接,四次挥手释放连接,UDP是无需连接的,发送数据之前不需要建立连接,因此UDP的传输效率较高。</p></li><li><p>可靠性而言</p><p>TCP是可靠的通信方式,通过TCP连接传送的数据,TCP通过超时重传、数据校验等方式来确保数据无差错,不丢失,不重复,按序到达，而UDP不保证可靠交付,可能会出现丢失、重复现象。</p></li><li><p>传输数据格式而言</p><p>TCP是面向字节流进行传输,而UDP是面向数据包进行传输</p></li><li><p>传输模式而言</p><p>TCP是点对点进行传输的,UDP可以一对一,一对多,多对多进行传输。</p></li><li><p>开销而言</p><p>TCP的首部为20个字节,UDP的首部为8个字节,TCP的开销较大。</p></li></ul><h3 id="HTTP">HTTP</h3><p>HTTP协议是超文本传输协议的缩写，是用于从万维网传输超文本到浏览器的传输协议。HTTP基于TCP/IP<a href="https://so.csdn.net/so/search?q=%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE&amp;spm=1001.2101.3001.7020">通信协议</a>来传递数据（HTML文件，图片文件、查询结果等）。它不涉及数据包（packet）传输，主要规定了客户端和服务器之间的通信格式，默认使用80端口。</p><ul><li><p>特点</p><ol><li><strong>无连接</strong>：无连接是指限制每次连接只处理一个请求。服务器处理完客户的请求，并收到客户的应答后，即断开连接。这种方式可以节省传输时间。</li><li><strong>无状态</strong>：HTTP协议自身不对请求和响应之间的通信状态进行保存，任何两次请求之间都没有依赖关系。（每次请求都是独立的，与前面的请求和后面的请求都没有直接联系。协议本身不保留之前一切的请求或响应报文的信息。）</li></ol></li><li><p>请求方法</p><ul><li><strong>GET</strong>: get是将请求放在URL中的，GET请求是可以缓存的，我们可以从浏览器历史记录中查找到GET请求，还可以把它收藏到书签中;且GET请求有长度限制；只能通过url进行编码；不安全，不能用来传递敏感信息。</li><li><strong>POST</strong>: 用于将数据发送到服务器以创建或更新资源。post请求将请求参数保存在request body中;POST请求永远不会被缓存，且对数据长度没有限制;我们无法从浏览器历史记录中查找到POST请求；支持多种编码格式；更安全，适合传递敏感信息。</li><li><strong>DELETE</strong>：用来删除指定的资源，它会删除目标资源的所有当前内容。（用于删除）</li><li><strong>PUT</strong>: 用于将数据发送到服务器以创建或更新资源，它可以用上传的内容替换目标资源中的所有当前内容。（用于更新）</li></ul></li><li><p>状态码</p><p>1XX——信息提示，服务器收到请求，需要请求者继续执行操作；</p><p>2XX——成功，操作被成功接收并处理；</p><p>3XX——重定位，需要进一步的操作以完成请求；</p><p>4XX——客户端错误，请求包含语法错误或无法完成请求；</p><p>5XX——服务器错误，服务器在处理请求的过程中发生了错误。</p><p>常见状态码：</p><p>100：继续，客户端应继请求；<br>200：请求成功；<br>301：资源（网页等）被永久转移到其他 URL；<br>302：暂时重定向；<br>403: Forbidden —禁止访问；<br>404：请求的资源（网页等）不存在；<br>500：内部服务器错误。</p></li><li><p>版本</p><ol><li><p><strong>http1.0</strong></p><p>HTTP1.0默认使用 <code>Connection:cloose</code>，浏览器每次请求都需要与服务器建立一个 TCP 连接，服务器处理完成后立即断开 TCP 连接（无连接），服务器不跟踪每个客户端也不记录过去的请求（无状态）。</p></li><li><p><strong>http1.1</strong></p><p>HTTP1.1默认使用 <code>Connection:keep-alive</code>（<strong>长连接</strong>），避免了连接建立和释放的开销；通过 Content-Length 字段来判断当前请求的数据是否已经全部接受。不允许同时存在两个并行的响应。</p><ul><li><p>http1.1的缺陷</p><p>高延迟，带来页面加载速度的降低。（网络延迟问题只要由于队头阻塞，导致宽带无法被充分利用）</p><p>无状态特性，带来巨大的Http头部。</p><p>明文传输，不安全。</p><p>不支持服务器推送消息。</p></li></ul></li><li><p><strong>http2.0</strong></p><ul><li><p><strong>HTTP2.0新特性</strong></p><p><strong>二进制传输</strong></p><p>http2.0将请求和响应数据分割为更小的帧，并且它们采用二进制编码(http1.0基于文本格式)。多个帧之间可以乱序发送，根据帧首部的流表示可以重新组装。</p><p><strong>Header压缩</strong></p><p>Http2.0开发了专门的“HPACK”算法，大大压缩了Header信息。</p><p><strong>多路复用</strong></p><p>http2.0中引入了多路复用技术，很好的解决了浏览器限制同一个域名下的请求数量的问题。</p><p><strong>服务端推送</strong></p><p>HTTP2.0在一定程度上改不了传统的“请求-应答”工作模式，服务器不再完全被动地响应请求，也可以新建“流”主动向客户端发送消息。</p></li><li><p><strong>http2.0缺陷</strong></p><p>TCP以及TCP+TLS建立连接的延迟（握手延迟）</p><p>TCP的<strong>队头阻塞</strong>没有彻底解决（http2.0中，多个请求是跑在一个TCP管道中的，一旦丢包，TCP就要等待重传（丢失的包等待重新传输确认），从而阻塞该TCP连接中的所有请求）</p></li></ul></li><li><p><strong>http3.0</strong></p><ul><li><p><strong>HTTP3.0新特性</strong></p><p>实现了类似<strong>TCP</strong>的流量控制，<strong>传输可靠</strong>性的功能。</p><p>实现了<strong>快速握手</strong>功能（QUIC基于UDP，UDP是面向无连接的，不需要握手和挥手，比TCP快）</p><p>集成了TLS<strong>加密</strong>功能</p><p><strong>多路复用</strong>，彻底解决TCP中队头阻塞的问题（单个“流”是有序的，可能会因为丢包而阻塞，但是其他流不会受到影响</p></li></ul></li></ol></li></ul><h3 id="HTTPS">HTTPS</h3><p>HTTPS 协议（Hyper Text Transfer Protocol Secure），是 HTTP 的加强安全版本。HTTPS 是基于 HTTP 的，也是用 TCP 作为底层协议，并额外使用 SSL/TLS 协议用作加密和安全认证。可以理解成HTTPS = HTTP + SSL/TLS。默认端口号是 443。</p><h4 id="工作流程">工作流程</h4><p><img src="https://image.itbaima.cn/images/76/image-2023092422134886.png"></img></p><ol><li>客户端请求 HTTPS 网址，然后连接到 server 的 443 端口 (HTTPS 默认端口，类似于 HTTP 的80端口)。</li><li>采用 HTTPS 协议的服务器必须要有一套数字 CA (Certification Authority)证书（证书是需要申请的，并由专门的数字证书认证机构(CA)通过非常严格的审核之后颁发的电子证书 ，当然了是要钱的，安全级别越高价格越贵）。颁发证书的同时会产生一个私钥和公钥。私钥由服务端自己保存，不可泄漏。公钥则是附带在证书的信息中，可以公开的。证书本身也附带一个证书电子签名，这个签名用来验证证书的完整性和真实性，可以防止证书被篡改。</li><li><strong>服务器响应客户端请求，将证书传递给客户端。</strong> 证书包含公钥和大量其他信息，比如证书颁发机构信息，公司信息和证书有效期等。（Chrome 浏览器点击地址栏的锁标志再点击证书就可以看到证书详细信息。）</li><li>客户端解析证书并对其进行验证。 如果证书不是可信机构颁布，或者证书中的域名与实际域名不一致，或者证书已经过期，就会向访问者显示一个警告，由其选择是否还要继续通信。<br>如果证书没有问题，客户端就会从服务器证书中取出服务器的公钥A。然后客户端还会生成一个随机码 KEY，并使用公钥A将其加密。</li><li><strong>客户端把加密后的随机码 KEY 发送给服务器，作为后面对称加密的密钥。</strong></li><li><strong>服务器在收到随机码 KEY 之后会使用私钥B将其解密。</strong> 经过以上这些步骤，客户端和服务器终于建立了安全连接，完美解决了对称加密的密钥泄露问题，接下来就可以用对称加密愉快地进行通信了。</li><li><strong>服务器使用密钥 (随机码 KEY)对数据进行对称加密并发送给客户端，客户端使用相同的密钥 (随机码 KEY)解密数据。</strong></li></ol><h4 id="HTTP与HTTPS的区别">HTTP与HTTPS的区别</h4><table><thead><tr><th></th><th><strong>HTTP</strong></th><th><strong>HTTPS</strong></th></tr></thead><tbody><tr><td>端口</td><td>80</td><td>443</td></tr><tr><td>URL前缀</td><td>http://</td><td>https://</td></tr><tr><td>安全性</td><td>无加密，安全性较差</td><td>有加密机制，安全性较高</td></tr><tr><td>资源消耗</td><td>较少</td><td>由于加密处理，资源消耗更多</td></tr><tr><td>响应速度</td><td>快</td><td>慢</td></tr><tr><td>是否需要证书</td><td>不需要</td><td>需要</td></tr><tr><td>协议</td><td>运行在TCP协议之上</td><td>运行在SSL协议之上，而SSL运行在TCP协议之上</td></tr></tbody></table><h3 id="Cookie和Session和Token">Cookie和Session和Token</h3><ul><li>Cookie可以存储在浏览器或者本地，Session只能存在服务器</li><li>session 能够存储任意的 java 对象，cookie 只能存储 String 类型的对象</li><li>Session比Cookie更具有安全性（Cookie有安全隐患，通过拦截或本地文件找得到你的cookie后可以进行攻击）</li><li>Session占用服务器性能，Session过多，增加服务器压力</li><li>单个Cookie保存的数据不能超过4K，很多浏览器都限制一个站点最多保存20个Cookie，Session是没有大小限制和服务器的内存大小有关。</li></ul><p>JWT</p><p>​JWT 由 3 部分构成:</p><p>​Header :描述 JWT 的元数据。定义了生成签名的算法以及 Token 的类型。</p><p>​Payload（负载）:用来存放实际需要传递的数据</p><p>​Signature（签名）：服务器通过<code>Payload</code>、<code>Header</code>和一个密钥(<code>secret</code>)使用 Header 里面指定的签名算法（默认是 HMAC SHA256）生成。</p><p>在基于 Token 进行身份验证的的应用程序中，服务器通过Payload、Header和一个密钥(secret)创建令牌（Token）并将 Token 发送给客户端，客户端将 Token 保存在 Cookie 或者 localStorage 里面，以后客户端发出的所有请求都会携带这个令牌。你可以把它放在 Cookie 里面自动发送，但是这样不能跨域，所以更好的做法是放在 HTTP Header 的 Authorization字段中：Authorization: Bearer Token。</p><h3 id="DNS">DNS</h3><p>DNS（Domain Names System），域名系统，是互联网一项服务，是进行域名和与之相对应的 IP 地址进行转换的服务器简单来讲，<code>DNS</code>相当于一个翻译官，负责将域名翻译成<code>ip</code>地址</p><ul><li>DNS查询过程<ol><li>首先搜索浏览器的 DNS 缓存，缓存中维护一张域名与 IP 地址的对应表</li><li>若没有命中，则继续搜索操作系统的 DNS 缓存</li><li>若仍然没有命中，则操作系统将域名发送至本地域名服务器，本地域名服务器采用递归查询自己的 DNS 缓存，查找成功则返回结果</li><li>若本地域名服务器的 DNS 缓存没有命中，则本地域名服务器向上级域名服务器进行迭代查询</li><li>本地域名服务器将得到的 IP 地址返回给操作系统，同时自己将 IP 地址缓存起来</li><li>操作系统将 IP 地址返回给浏览器，同时自己也将 IP 地址缓存起</li><li>至此，浏览器就得到了域名对应的 IP 地址，并将 IP 地址缓存起</li></ol></li><li>浏览器输入URL到页面返回详细过程<ol><li><strong>输入网址</strong> 输入要访问的网址，即URL</li><li><strong>缓存解析</strong> 浏览器获取URL后，先去缓存中查找资源，从浏览器缓存-系统缓存-路由器缓存中查看； 如果有就从缓存中显示界面，不再发送请求； 如果没有，则发送http请求；</li><li><strong>域名解析</strong> 发现缓存中没有资源，发送http请求； 在发送http请求之前，需要进行DNS解析(域名解析)； DNS解析：域名到IP地址的转换过程，域名的解析工作由DNS服务器完成，解析后可以获取域名相应的IP地址；</li><li><strong>tcp连接</strong> 三次握手在域名解析后，浏览器向服务器发起了http请求，tcp连接； 因为tcp协议时面向连接的，所以在传输数据前必须建立连接，即三次握手；tcp连接建立后，浏览器开始向服务器发送http请求报文</li><li><strong>收到请求</strong> 服务器收到浏览器发送的请求信息，返回响应</li><li><strong>页面渲染</strong> 浏览器收到服务器发送的响应，显示页面内容。</li></ol></li></ul><h3 id="OAUTH2">OAUTH2</h3><p>OAuth2.0介绍 OAuth（Open Authorization）是一个关于授权（authorization）的开放网络标准，允许用户授权第三方 应用访问他们存储在另外的服务提供者上的信息，而不需要将用户名和密码提供给第三方移动应用或分享他 们数据的所有内容。OAuth在全世界得到广泛应用，目前的版本是2.0版。</p><p>授权码模式:</p><p>一般有四个角色:客户端，服务端，第三方授权服务端，第三方资源服务器</p><p>1.当点击QQ登录的时候，客户端会向服务端(一般有个apply_code的接口发起请求)。</p><p>2.服务端会向客户端返回一个url,其中url的参数有response_type=code,因为是授权码模式,client_id=appId,就是自己提前已经申请好了的，redirect_uri=url重定向的url,state=state防止csrf攻击</p><p>3.客户端收到这个url后会跳转到这个url(访问授权服务器),然后屏幕上就会出现你是否同意登录xxx</p><p>4.如果选择了同意,那么客户端会被重定向到url,并且且附带一个授权码和之前传过去的state,然后客户端会将这个传给服务端，服务端通过授权码向认证服务器请求access_token，申请得到access_token后就可以向资源服务器申请用户信息资源。</p>]]></content>
    
    
    
    <tags>
      
      <tag>计网</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一道模拟题</title>
    <link href="/2023/09/24/%E4%B8%80%E9%81%93%E6%A8%A1%E6%8B%9F%E9%A2%98/"/>
    <url>/2023/09/24/%E4%B8%80%E9%81%93%E6%A8%A1%E6%8B%9F%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>给你一个字符串表达式 <code>s</code> ，请你实现一个基本计算器来计算并返回它的值。</p><p>注意:不允许使用任何将字符串作为数学表达式计算的内置函数，比如 <code>eval()</code> 。</p><p><strong>示例 1：</strong></p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs abnf">输入：s <span class="hljs-operator">=</span> <span class="hljs-string">&quot;1 + 1&quot;</span><br>输出：<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs abnf">输入：s <span class="hljs-operator">=</span> <span class="hljs-string">&quot; 2-1 + 2 &quot;</span><br>输出：<span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs subunit">输入：s = &quot;(1+(4<span class="hljs-string">+5</span><span class="hljs-string">+2</span>)<span class="hljs-string">-3</span>)+(6<span class="hljs-string">+8</span>)&quot;<br>输出：23<br></code></pre></td></tr></table></figure><p>此解法包含乘除,取模,幂</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    Map&lt;Character, Integer&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;()&#123;&#123;<br>        put(<span class="hljs-string">&#x27;-&#x27;</span>, <span class="hljs-number">1</span>);<br>        put(<span class="hljs-string">&#x27;+&#x27;</span>, <span class="hljs-number">1</span>);<br>        put(<span class="hljs-string">&#x27;*&#x27;</span>, <span class="hljs-number">2</span>);<br>        put(<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-number">2</span>);<br>        put(<span class="hljs-string">&#x27;%&#x27;</span>, <span class="hljs-number">2</span>);<br>        put(<span class="hljs-string">&#x27;^&#x27;</span>, <span class="hljs-number">3</span>);<br>    &#125;&#125;;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">calculate</span><span class="hljs-params">(String s)</span> &#123;<br>        s = s.replaceAll(<span class="hljs-string">&quot; &quot;</span>, <span class="hljs-string">&quot;&quot;</span>);<br>        <span class="hljs-type">char</span>[] cs = s.toCharArray();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> s.length();<br>        Deque&lt;Integer&gt; nums = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayDeque</span>&lt;&gt;();<br>        nums.addLast(<span class="hljs-number">0</span>);<br>        Deque&lt;Character&gt; ops = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayDeque</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>            <span class="hljs-type">char</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> cs[i];<br>            <span class="hljs-keyword">if</span> (c == <span class="hljs-string">&#x27;(&#x27;</span>) &#123;<br>                ops.addLast(c);<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (c == <span class="hljs-string">&#x27;)&#x27;</span>) &#123;<br>                <span class="hljs-keyword">while</span> (!ops.isEmpty()) &#123;<br>                    <span class="hljs-keyword">if</span> (ops.peekLast() != <span class="hljs-string">&#x27;(&#x27;</span>) &#123;<br>                        calc(nums, ops);<br>                    &#125; <span class="hljs-keyword">else</span> &#123;<br>                        ops.pollLast();<br>                        <span class="hljs-keyword">break</span>;<br>                    &#125;<br>                &#125;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">if</span> (isNumber(c)) &#123;<br>                    <span class="hljs-type">int</span> <span class="hljs-variable">u</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>                    <span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> i;<br>                    <span class="hljs-keyword">while</span> (j &lt; n &amp;&amp; isNumber(cs[j])) u = u * <span class="hljs-number">10</span> + (cs[j++] - <span class="hljs-string">&#x27;0&#x27;</span>);<br>                    nums.addLast(u);<br>                    i = j - <span class="hljs-number">1</span>;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-keyword">if</span> (i &gt; <span class="hljs-number">0</span> &amp;&amp; (cs[i - <span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;(&#x27;</span> || cs[i - <span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;+&#x27;</span> || cs[i - <span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;-&#x27;</span>)) &#123;<br>                        nums.addLast(<span class="hljs-number">0</span>);<br>                    &#125;<br>                    <span class="hljs-keyword">while</span> (!ops.isEmpty() &amp;&amp; ops.peekLast() != <span class="hljs-string">&#x27;(&#x27;</span>) &#123;<br>                        <span class="hljs-type">char</span> <span class="hljs-variable">prev</span> <span class="hljs-operator">=</span> ops.peekLast();<br>                        <span class="hljs-keyword">if</span> (map.get(prev) &gt;= map.get(c)) &#123;<br>                            calc(nums, ops);<br>                        &#125; <span class="hljs-keyword">else</span> &#123;<br>                            <span class="hljs-keyword">break</span>;<br>                        &#125;<br>                    &#125;<br>                    ops.addLast(c);<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">while</span> (!ops.isEmpty() &amp;&amp; ops.peekLast() != <span class="hljs-string">&#x27;(&#x27;</span>) calc(nums, ops);<br>        <span class="hljs-keyword">return</span> nums.peekLast();<br>    &#125;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">calc</span><span class="hljs-params">(Deque&lt;Integer&gt; nums, Deque&lt;Character&gt; ops)</span> &#123;<br>        <span class="hljs-keyword">if</span> (nums.isEmpty() || nums.size() &lt; <span class="hljs-number">2</span>) <span class="hljs-keyword">return</span>;<br>        <span class="hljs-keyword">if</span> (ops.isEmpty()) <span class="hljs-keyword">return</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> nums.pollLast(), a = nums.pollLast();<br>        <span class="hljs-type">char</span> <span class="hljs-variable">op</span> <span class="hljs-operator">=</span> ops.pollLast();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">ans</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span> (op == <span class="hljs-string">&#x27;+&#x27;</span>) &#123;<br>            ans = a + b;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (op == <span class="hljs-string">&#x27;-&#x27;</span>) &#123;<br>            ans = a - b;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (op == <span class="hljs-string">&#x27;*&#x27;</span>) &#123;<br>            ans = a * b;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (op == <span class="hljs-string">&#x27;/&#x27;</span>) &#123;<br>            ans = a / b;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (op == <span class="hljs-string">&#x27;^&#x27;</span>) &#123;<br>            ans = (<span class="hljs-type">int</span>)Math.pow(a, b);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (op == <span class="hljs-string">&#x27;%&#x27;</span>) &#123;<br>            ans = a % b;<br>        &#125;<br>        nums.addLast(ans);<br>    &#125;<br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">isNumber</span><span class="hljs-params">(<span class="hljs-type">char</span> c)</span> &#123;<br>        <span class="hljs-keyword">return</span> Character.isDigit(c);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>杂项</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一道综合题</title>
    <link href="/2023/09/23/%E4%B8%80%E9%81%93%E7%BB%BC%E5%90%88%E9%A2%98-md/"/>
    <url>/2023/09/23/%E4%B8%80%E9%81%93%E7%BB%BC%E5%90%88%E9%A2%98-md/</url>
    
    <content type="html"><![CDATA[<p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>有两个数组长度为</mtext><mi>n</mi><mtext>的数组</mtext><mi>a</mi><mtext>和</mtext><mi>b</mi><mo separator="true">,</mo><mtext>现在从</mtext><mi>a</mi><mtext>中任选一个数</mtext><mo separator="true">,</mo><mi>b</mi><mtext>中任选一个数</mtext><mo separator="true">,</mo><mtext>两数相乘</mtext><mo separator="true">,</mo><mtext>求第</mtext><mi>k</mi><mtext>小的数</mtext></mrow><annotation encoding="application/x-tex">有两个数组长度为n的数组a和b,现在从a中任选一个数,b中任选一个数,两数相乘,求第k小的数</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord cjk_fallback">有两个数组长度为</span><span class="mord mathnormal">n</span><span class="mord cjk_fallback">的数组</span><span class="mord mathnormal">a</span><span class="mord cjk_fallback">和</span><span class="mord mathnormal">b</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord cjk_fallback">现在从</span><span class="mord mathnormal">a</span><span class="mord cjk_fallback">中任选一个数</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">b</span><span class="mord cjk_fallback">中任选一个数</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord cjk_fallback">两数相乘</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord cjk_fallback">求第</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mord cjk_fallback">小的数</span></span></span></span></p><p>例: <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mo>=</mo><mo stretchy="false">[</mo><mn>1</mn><mo separator="true">,</mo><mn>2</mn><mo separator="true">,</mo><mn>3</mn><mo stretchy="false">]</mo><mo separator="true">,</mo><mi>b</mi><mo>=</mo><mo stretchy="false">[</mo><mn>2</mn><mo separator="true">,</mo><mn>3</mn><mo separator="true">,</mo><mn>4</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">a=[1, 2, 3], b = [2, 3, 4]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">3</span><span class="mclose">]</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">b</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">3</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">4</span><span class="mclose">]</span></span></span></span></p><p>第二小的为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>3</mn></mrow><annotation encoding="application/x-tex">3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">3</span></span></span></span></p><ul><li><p>当a, b值域为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><mn>0</mn><mo separator="true">,</mo><mn>1</mn><msup><mn>0</mn><mn>4</mn></msup><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[0, 10^4]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span></span></span></span></span><span class="mclose">]</span></span></span></span>时,<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>=</mo><mn>100</mn></mrow><annotation encoding="application/x-tex">n = 100</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">100</span></span></span></span>时</p></li><li><p>当a, b值域为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><mn>0</mn><mo separator="true">,</mo><mn>1</mn><msup><mn>0</mn><mn>4</mn></msup><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[0, 10^4]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span></span></span></span></span><span class="mclose">]</span></span></span></span>时, <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>=</mo><mn>5000</mn></mrow><annotation encoding="application/x-tex">n = 5000</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">5000</span></span></span></span>时</p></li><li><p>当a, b值域为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><mo>−</mo><mn>1</mn><msup><mn>0</mn><mn>8</mn></msup><mo separator="true">,</mo><mn>1</mn><msup><mn>0</mn><mn>8</mn></msup><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[-10^8, 10^8]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">−</span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">8</span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">8</span></span></span></span></span></span></span></span><span class="mclose">]</span></span></span></span>时, <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>=</mo><mn>1</mn><msup><mn>0</mn><mn>5</mn></msup></mrow><annotation encoding="application/x-tex">n = 10^5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span></span></span></span></span></span></span></span>时</p></li><li><p>当<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>=</mo><mn>2</mn><mo>∗</mo><mn>1</mn><msup><mn>0</mn><mn>6</mn></msup></mrow><annotation encoding="application/x-tex">n = 2 *10^6</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">6</span></span></span></span></span></span></span></span></span></span></span>时</p></li><li><p>对于第一种解法,n和值域都很小,显然可以使用暴力做:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">long</span> <span class="hljs-title function_">func</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums1, <span class="hljs-type">int</span>[] nums2, <span class="hljs-type">int</span> k)</span> &#123;<br>       <span class="hljs-keyword">return</span> Arrays.stream(nums1)<br>               .flatMap(a -&gt; Arrays.stream(nums2).map(b -&gt; a * b))<br>               .sorted().boxed().toList().get(k - <span class="hljs-number">1</span>);<br>   &#125;<br></code></pre></td></tr></table></figure></li><li><p>对于第二种情况而言,如果还采用第一种解法,先暴力匹配枚举,然后排序找到第k小,时间复杂度为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>n</mi><mn>2</mn></msup><mo>+</mo><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi></mrow><annotation encoding="application/x-tex">n^2 + log n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">n</span></span></span></span>,数量级已经超过<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><msup><mn>0</mn><mn>7</mn></msup></mrow><annotation encoding="application/x-tex">10^7</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">7</span></span></span></span></span></span></span></span></span></span></span>,不是一种很好的做法,如果我们能把时间复杂度控制在<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi></mrow><annotation encoding="application/x-tex">nlogn</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">n</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">n</span></span></span></span>就很棒了。事实上我们可以采用<a href="https://baike.baidu.com/item/%E5%A4%9A%E8%B7%AF%E5%BD%92%E5%B9%B6%E7%AE%97%E6%B3%95/22749882?fr=ge_ala">多路归并</a>算法,省去<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>n</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">n^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span>的匹配,时间复杂度为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi></mrow><annotation encoding="application/x-tex">klogn</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">n</span></span></span></span>(可以根据k的大小判断小根堆还是大根堆),但下面代码这种做法有一个前提条件必须值域为非负数,因为如果存在负数的话,按照从小到大的排序,但两个负数乘积却为正数,我们无法按照正常多路归并的算法执行，虽然对于这种情况也有处理方式，但太麻烦了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">long</span> <span class="hljs-title function_">func</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums1, <span class="hljs-type">int</span>[] nums2, <span class="hljs-type">long</span> k)</span> &#123;<br>    Arrays.sort(nums1);<br>    Arrays.sort(nums2);<br>    PriorityQueue&lt;<span class="hljs-type">int</span>[]&gt; heap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PriorityQueue</span>&lt;&gt;(Comparator.comparing(e -&gt; (nums1[e[<span class="hljs-number">0</span>]] * nums2[e[<span class="hljs-number">1</span>]])));<br>    <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> nums1.length;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        heap.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[] &#123;<span class="hljs-number">0</span>, i&#125;);<br>    &#125;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">ans</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; k; i++) &#123;<br>        <span class="hljs-type">var</span> <span class="hljs-variable">poll</span> <span class="hljs-operator">=</span> heap.poll();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> poll[<span class="hljs-number">0</span>], y = poll[<span class="hljs-number">1</span>];<br>        ans = nums1[x] * nums2[y];<br>        <span class="hljs-keyword">if</span> (x + <span class="hljs-number">1</span> &lt; n) heap.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[] &#123;x + <span class="hljs-number">1</span>, y&#125;);<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>然而对于第三种情况而言数组的长度达到了<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><msup><mn>0</mn><mn>5</mn></msup></mrow><annotation encoding="application/x-tex">10^5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span></span></span></span></span></span></span></span>,且值域达到<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><mo>−</mo><mn>1</mn><msup><mn>0</mn><mn>8</mn></msup><mo separator="true">,</mo><mn>1</mn><msup><mn>0</mn><mn>8</mn></msup><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[-10^8, 10^8]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">−</span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">8</span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">8</span></span></span></span></span></span></span></span><span class="mclose">]</span></span></span></span>,显然上面两种做法是不可取的(通常而言当计算出时间复杂度为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><msup><mn>0</mn><mn>8</mn></msup></mrow><annotation encoding="application/x-tex">10^8</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">8</span></span></span></span></span></span></span></span></span></span></span>以上的时候,基本就不是正解)，我们需要换一种方式，对于前两种解法我们都是考虑数组长度和k的关系,当这种思路已经无法再继续优化的时候,我们可以尝试换种思路,对于这道题而言,我们就剩没考虑值域了,事实上我们可以从值域出发,直接算出第k个值为多少,当然,一个一个枚举的做法显然也是行不通的,仔细研究题目我们就会发现可以通过<a href="https://oiwiki.org/basic/binary/">二分查找</a>(必须掌握)找到第k个值,那么该怎样check呢?显然check的时间复杂度不能为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>n</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">n^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span>,我们再仔细研究题目,因为check的时候是要判断有多少个数大于或小于二分所枚举的x,因此我们还可以使用二分,枚举第一个数组的数,二分查找查找第二个数组有多少个符合的数，因为存在负数,这里的二分要分不同情况。时间复杂度<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>U</mi></mrow><annotation encoding="application/x-tex">nlog n logU</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">n</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">n</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.10903em;">gU</span></span></span></span></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><br>    <span class="hljs-type">int</span>[] nums1, nums2;<br><br>    <span class="hljs-type">long</span> k;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">long</span> <span class="hljs-title function_">fun</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums1, <span class="hljs-type">int</span>[] nums2, <span class="hljs-type">long</span> k)</span> &#123;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">l</span> <span class="hljs-operator">=</span> (<span class="hljs-type">long</span>) -<span class="hljs-number">1e18</span>, r = (<span class="hljs-type">long</span>) <span class="hljs-number">1e18</span>;<br>        <span class="hljs-built_in">this</span>.nums1 = nums1;<br>        <span class="hljs-built_in">this</span>.nums2 = nums2;<br>        <span class="hljs-built_in">this</span>.k = k;<br>        Arrays.sort(nums1);<br>        Arrays.sort(nums2);<br>        <span class="hljs-keyword">while</span> (l &lt; r) &#123;<br>            <span class="hljs-type">long</span> <span class="hljs-variable">mid</span> <span class="hljs-operator">=</span> l + r &gt;&gt; <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span> (check(mid)) &#123;<br>                r = mid;<br>            &#125; <span class="hljs-keyword">else</span> l = mid + <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> l;<br>    &#125;<br><br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">check</span><span class="hljs-params">(<span class="hljs-type">long</span> x)</span> &#123;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">cnt</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; nums1.length; i++) &#123;<br>            <span class="hljs-keyword">if</span> (nums1[i] &lt; <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">if</span> ((<span class="hljs-type">long</span>) nums1[i] * nums2[<span class="hljs-number">0</span>] &lt;= x) &#123;<br>                    cnt += nums2.length;<br>                    <span class="hljs-keyword">continue</span>;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    cnt += check1(nums1[i], x);<br>                &#125;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nums1[i] &gt; <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">if</span> ((<span class="hljs-type">long</span>) nums1[i] * nums2[nums2.length - <span class="hljs-number">1</span>] &lt;= x) &#123;<br>                    cnt += nums2.length;<br>                    <span class="hljs-keyword">continue</span>;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    cnt += check2(nums1[i], x);<br>                &#125;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">if</span> (x &gt;= <span class="hljs-number">0</span>) cnt += nums2.length;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> cnt &gt;= k;<br>    &#125;<br><br><br>    <span class="hljs-type">int</span> <span class="hljs-title function_">check1</span><span class="hljs-params">(<span class="hljs-type">int</span> v, <span class="hljs-type">long</span> x)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">l</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, r = nums2.length - <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span> (l &lt; r) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">mid</span> <span class="hljs-operator">=</span> l + r &gt;&gt; <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span> ((<span class="hljs-type">long</span>) nums2[mid] * v &lt;= x) r = mid;<br>            <span class="hljs-keyword">else</span> l = mid + <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> ((<span class="hljs-type">long</span>) nums2[l] * v &lt;= x) &#123;<br>            <span class="hljs-keyword">return</span> nums2.length - l;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br><br><br>    <span class="hljs-type">int</span> <span class="hljs-title function_">check2</span><span class="hljs-params">(<span class="hljs-type">int</span> v, <span class="hljs-type">long</span> x)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">l</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, r = nums2.length - <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span> (l &lt; r) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">mid</span> <span class="hljs-operator">=</span> l + r + <span class="hljs-number">1</span> &gt;&gt; <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span> ((<span class="hljs-type">long</span>) nums2[mid] * v &lt;= x) l = mid;<br>            <span class="hljs-keyword">else</span> r = mid - <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> ((<span class="hljs-type">long</span>) nums2[l] * v &lt;= x) &#123;<br>            <span class="hljs-keyword">return</span> l + <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>最后一种需要用一种非常难的算法,不做解释,希望掌握前三种情况的解法,对于不同的范围,我们需要深刻理解题目本质，掌握基础算法，合理分析复杂度，写出一个完美的代码.</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>杂项</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>牛客练习赛#115</title>
    <link href="/2023/09/08/%E7%89%9B%E5%AE%A2%E7%BB%83%E4%B9%A0%E8%B5%9B-115/"/>
    <url>/2023/09/08/%E7%89%9B%E5%AE%A2%E7%BB%83%E4%B9%A0%E8%B5%9B-115/</url>
    
    <content type="html"><![CDATA[<h1>牛客练习赛#115</h1><h3 id="A">A</h3><p><a href="https://ac.nowcoder.com/acm/contest/64819/A">题目链接</a></p><p>首先统计出每个数的个数cnt[i]，显然只有最大数才可以当作山峰,那么对于每一个数而言,它会有[0, cnt[i]]个自己放在山峰左边,随之山峰右边的数也会确定，共(1 + cnt[i])种情况。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">T</span> <span class="hljs-operator">=</span> in.nextInt();<br><span class="hljs-type">long</span> <span class="hljs-variable">mod</span> <span class="hljs-operator">=</span> <span class="hljs-number">998244353</span>;<br><span class="hljs-keyword">void</span> <span class="hljs-title function_">solve</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">while</span> (T-- &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> in.nextInt();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">max</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>;<br>        Map&lt;Integer, Integer&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> in.nextInt();<br>            map.merge(key, <span class="hljs-number">1</span>, Integer::sum);<br>            max = Math.max(max, key);<br>        &#125;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">ans</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (Map.Entry&lt;Integer, Integer&gt; e : map.entrySet()) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> e.getKey(), v = e.getValue();<br>            <span class="hljs-keyword">if</span> (key == max) <span class="hljs-keyword">continue</span>;<br>            ans = ans * (v + <span class="hljs-number">1</span>) % mod;<br>        &#125;<br>        out.println(ans);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="B">B</h3><p><a href="https://ac.nowcoder.com/acm/contest/64819/B">题目链接</a></p><p>如果对于l到r的长度不断二分,大于0的次数如果大于等于count的,那么必定存在,反之必不存在,对于x而言最少的操作就是1次,两边都具有单调性,那么可以设mid = (l + r) / 2，那么ans一定位于[l, mid]或[mid + 1, r]之间,对两段区间二分即可找到答案.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">T</span> <span class="hljs-operator">=</span> in.nextInt();<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">solve</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">while</span> (T-- &gt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">l</span> <span class="hljs-operator">=</span> in.nextInt(), r = in.nextInt(), c = in.nextInt();<br>            <span class="hljs-type">int</span> <span class="hljs-variable">ll</span> <span class="hljs-operator">=</span> l, rr = r;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">cnt</span> <span class="hljs-operator">=</span> (r - l + <span class="hljs-number">1</span>);<br>            <span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">while</span> (cnt &gt; <span class="hljs-number">0</span>) &#123;<br>                k++;<br>                cnt /= <span class="hljs-number">2</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (k &lt; c) &#123;<br>                out.println(-<span class="hljs-number">1</span>);<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">lx</span> <span class="hljs-operator">=</span> ll, rx = (ll + rr) / <span class="hljs-number">2</span>;<br>            <span class="hljs-keyword">while</span> (lx &lt; rx) &#123;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">mmid</span> <span class="hljs-operator">=</span> lx + rx + <span class="hljs-number">1</span> &gt;&gt; <span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">if</span> (f(ll, rr, mmid) &lt;= c) lx = mmid;<br>                <span class="hljs-keyword">else</span> rx = mmid - <span class="hljs-number">1</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (f(ll, rr, rx) == c) out.println(rx);<br>            <span class="hljs-keyword">else</span> &#123;<br>                lx = (ll + rr) / <span class="hljs-number">2</span>;<br>                rx = rr;<br>                <span class="hljs-keyword">while</span> (lx &lt; rx) &#123;<br>                    <span class="hljs-type">int</span> <span class="hljs-variable">mmid</span> <span class="hljs-operator">=</span> lx + rx + <span class="hljs-number">1</span> &gt;&gt; <span class="hljs-number">1</span>;<br>                    <span class="hljs-keyword">if</span> (f(ll, rr, mmid) &lt;= c) lx = mmid;<br>                    <span class="hljs-keyword">else</span> rx = mmid - <span class="hljs-number">1</span>;<br>                &#125;<br>                out.println(rx);<br>            &#125;<br>        &#125;<br>    &#125;<br><br><br>    <span class="hljs-type">int</span> <span class="hljs-title function_">f</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> x)</span> &#123; <span class="hljs-comment">// l &lt;= x &lt;= r</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">cnt</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (l &lt;= r) &#123;<br>            cnt++;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">mid</span> <span class="hljs-operator">=</span> (l + r) / <span class="hljs-number">2</span>;<br>            <span class="hljs-keyword">if</span> (mid == x) <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">if</span> (mid &lt; x) l = mid + <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">else</span> r = mid - <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> cnt;<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="C">C</h3><p><a href="https://ac.nowcoder.com/acm/contest/64819/C">题目链接</a></p><p>可以证明,倾斜度一定存在于两个相邻的数之间(不会证明),使用TreeSet维护相邻两个数的绝对值差值即可,需要维护相对值差值diff.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">void</span> <span class="hljs-title function_">solve</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> in.nextInt(), q = in.nextInt();<br>    <span class="hljs-type">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        arr[i] = in.nextInt();<br>    &#125;<br>    <span class="hljs-type">int</span>[] diff = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n];<br>    TreeMap&lt;Integer, Integer&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeMap</span>&lt;&gt;(Comparator.comparing(e -&gt; -e));<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n - <span class="hljs-number">1</span>; i++) &#123;<br>        diff[i] = arr[i] - arr[i + <span class="hljs-number">1</span>];<br>        map.merge(Math.abs(diff[i]), <span class="hljs-number">1</span>, Integer::sum);<br>    &#125;<br>    out.println(map.firstKey());<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; q; i++) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">l</span> <span class="hljs-operator">=</span> in.nextInt(), r = in.nextInt(), va = in.nextInt();<br>        l -= <span class="hljs-number">1</span>;<br>        r -= <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (l &gt; <span class="hljs-number">0</span>) &#123;<br>            map.computeIfPresent(Math.abs(diff[l - <span class="hljs-number">1</span>]), (k, v) -&gt; v &gt; <span class="hljs-number">1</span> ? v - <span class="hljs-number">1</span> : <span class="hljs-literal">null</span>);<br>            diff[l - <span class="hljs-number">1</span>] -= va;<br>            map.merge(Math.abs(diff[l - <span class="hljs-number">1</span>]), <span class="hljs-number">1</span>, Integer::sum);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (r &lt; n - <span class="hljs-number">1</span>) &#123;<br>            map.computeIfPresent(Math.abs(diff[r]), (k, v) -&gt; v &gt; <span class="hljs-number">1</span> ? v - <span class="hljs-number">1</span> : <span class="hljs-literal">null</span>);<br>            diff[r] += va;<br>            map.merge(Math.abs(diff[r]), <span class="hljs-number">1</span>, Integer::sum);<br>        &#125;<br>        out.println(map.firstKey());<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>nowcoder</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>异步同步化</title>
    <link href="/2023/09/06/%E5%BC%82%E6%AD%A5%E5%90%8C%E6%AD%A5%E5%8C%96/"/>
    <url>/2023/09/06/%E5%BC%82%E6%AD%A5%E5%90%8C%E6%AD%A5%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h1>异步同步化</h1><h3 id="ES6前">ES6前</h3><h4 id="回调地狱">回调地狱</h4><p>当出现请求之间相互依赖时,就往往出现这种<code>回调地狱</code>,维护起来非常难受</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$.<span class="hljs-title function_">ajax</span>(<br>    &#123;<br>        <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;https://ku.qingnian8.com/dataApi/news/navlist.php&#x27;</span>,<br>        <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;GET&#x27;</span>,<br>        <span class="hljs-attr">success</span>: <span class="hljs-function"><span class="hljs-params">resp</span> =&gt;</span> &#123;<br>            <span class="hljs-keyword">let</span> id = resp[<span class="hljs-number">0</span>].<span class="hljs-property">id</span><br>            $.<span class="hljs-title function_">ajax</span>(<br>                &#123;<br>                    <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;https://ku.qingnian8.com/dataApi/news/newslist.php&#x27;</span>,<br>                    <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;GET&#x27;</span>,<br>                    <span class="hljs-attr">data</span>: &#123;<br>                        <span class="hljs-attr">cid</span>: id<br>                    &#125;,<br>                    <span class="hljs-attr">success</span>: <span class="hljs-function"><span class="hljs-params">resp</span> =&gt;</span> &#123;<br>                        <span class="hljs-keyword">let</span> id = resp[<span class="hljs-number">0</span>].<span class="hljs-property">id</span><br>                        $.<span class="hljs-title function_">ajax</span>(&#123;<br>                            <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;https://ku.qingnian8.com/dataApi/news/comment.php&#x27;</span>,<br>                            <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;GET&#x27;</span>,<br>                            <span class="hljs-attr">data</span>: &#123;<br>                                <span class="hljs-attr">aid</span>: id<br>                            &#125;,<br>                            <span class="hljs-attr">success</span>: <span class="hljs-function"><span class="hljs-params">resp</span> =&gt;</span> &#123;<br>                                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(resp)<br>                            &#125;<br>                        &#125;)<br>                    &#125;<br>                &#125;<br>            )<br>        &#125;<br>    &#125;<br>)<br></code></pre></td></tr></table></figure><h4 id="封装回调">封装回调</h4><p>封装回调本质上和写在一起都是一样的, 只不过看起来比较清晰</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">getNav</span> = (<span class="hljs-params">callback: (res: <span class="hljs-built_in">any</span>) =&gt; <span class="hljs-built_in">void</span></span>) =&gt; &#123;<br>    $.<span class="hljs-title function_">ajax</span>(&#123;<br>        <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;https://ku.qingnian8.com/dataApi/news/navlist.php&#x27;</span>,<br>        <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;GET&#x27;</span>,<br>        <span class="hljs-attr">success</span>: <span class="hljs-function"><span class="hljs-params">resp</span> =&gt;</span> &#123;<br>            <span class="hljs-title function_">callback</span>(resp)<br>        &#125;<br>    &#125;)<br>&#125;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">getArticle</span> = (<span class="hljs-params">callBack: (res: <span class="hljs-built_in">any</span>) =&gt; <span class="hljs-built_in">void</span>, id: <span class="hljs-built_in">number</span></span>) =&gt; &#123;<br>    $.<span class="hljs-title function_">ajax</span>(&#123;<br>        <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;https://ku.qingnian8.com/dataApi/news/newslist.php&#x27;</span>,<br>        <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;GET&#x27;</span>,<br>        <span class="hljs-attr">data</span>: &#123;<br>            <span class="hljs-attr">cid</span>: id<br>        &#125;,<br>        <span class="hljs-attr">success</span>: <span class="hljs-function"><span class="hljs-params">resp</span> =&gt;</span> &#123;<br>            <span class="hljs-title function_">callBack</span>(resp)<br>        &#125;<br>    &#125;)<br>&#125;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">getComment</span> = (<span class="hljs-params">callBack: (res: <span class="hljs-built_in">any</span>) =&gt; <span class="hljs-built_in">void</span>, id: <span class="hljs-built_in">number</span></span>) =&gt; &#123;<br>    $.<span class="hljs-title function_">ajax</span>(&#123;<br>        <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;https://ku.qingnian8.com/dataApi/news/comment.php&#x27;</span>,<br>        <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;GET&#x27;</span>,<br>        <span class="hljs-attr">data</span>: &#123;<br>            <span class="hljs-attr">aid</span>: id<br>        &#125;,<br>        <span class="hljs-attr">success</span>: <span class="hljs-function"><span class="hljs-params">resp</span> =&gt;</span> &#123;<br>            <span class="hljs-title function_">callBack</span>(resp)<br>        &#125;<br>    &#125;)<br>&#125;<br><br><span class="hljs-comment">//  主体</span><br><span class="hljs-title function_">getNav</span>(<br>    <span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>        <span class="hljs-keyword">let</span> id = res[<span class="hljs-number">0</span>].<span class="hljs-property">id</span><br>        <span class="hljs-title function_">getArticle</span>(<span class="hljs-function"><span class="hljs-params">res1</span> =&gt;</span> &#123;<br>            <span class="hljs-keyword">let</span> id = res1[<span class="hljs-number">0</span>].<span class="hljs-property">id</span><br>            <span class="hljs-title function_">getComment</span>(<span class="hljs-function"><span class="hljs-params">res2</span> =&gt;</span> &#123;<br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res2)<br>            &#125;, id)<br>        &#125;, id)<br>    &#125;<br>)<br></code></pre></td></tr></table></figure><h3 id="ES6后">ES6后</h3><h4 id="Promise">Promise</h4><blockquote><p>promise是解决异步的方法，本质上是一个构造函数，可以用它实例化一个对象。对象身上有resolve、reject、all，原型上有then、catch方法。promise对象有三种状态：pending（初识状态/进行中）、resolved或fulfilled（成功）、rejected（失败）</p><ol><li>pending。它的意思是 “待定的，将发生的”，相当于是一个初始状态。创建Promise对象时，且没有调用resolve或者是reject方法，相当于是初始状态。这个初始状态会随着你调用resolve，或者是reject函数而切换到另一种状态。</li><li>resolved。表示解决了，就是说这个承诺实现了。 要实现从pending到resolved的转变，需要在 创建Promise对象时，在函数体中调用了resolve方法。</li><li>rejected。拒绝，失败。表示这个承诺没有做到，失败了。要实现从pending到rejected的转换，只需要在创建Promise对象时，调用reject函数。</li></ol></blockquote><p><img src="https://image.itbaima.net/images/76/image-20230906178138839.png" alt="promise.png"></p><p>使用Promise包起来后,再链式调用,就很优雅了</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">const</span> getNav = (): <span class="hljs-title class_">Promise</span>&lt;<span class="hljs-built_in">any</span>&gt; =&gt; &#123;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>        $.<span class="hljs-title function_">ajax</span>(&#123;<br>            <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;https://ku.qingnian8.com/dataApi/news/navlist.php&#x27;</span>,<br>            <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;GET&#x27;</span>,<br>            <span class="hljs-attr">success</span>: <span class="hljs-function"><span class="hljs-params">resp</span> =&gt;</span> &#123;<br>                <span class="hljs-title function_">resolve</span>(resp)<br>            &#125;,<br>            <span class="hljs-attr">error</span>: <span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123;<br>                <span class="hljs-title function_">reject</span>(err)<br>            &#125;<br>        &#125;)<br>    &#125;)<br>&#125;<br><br><span class="hljs-keyword">const</span> getArticle = (<span class="hljs-attr">id</span>: <span class="hljs-built_in">number</span>): <span class="hljs-title class_">Promise</span>&lt;<span class="hljs-built_in">any</span>&gt; =&gt; &#123;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>        $.<span class="hljs-title function_">ajax</span>(&#123;<br>            <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;https://ku.qingnian8.com/dataApi/news/newslist.php&#x27;</span>,<br>            <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;GET&#x27;</span>,<br>            <span class="hljs-attr">data</span>: &#123;<br>                <span class="hljs-attr">cid</span>: id<br>            &#125;,<br>            <span class="hljs-attr">success</span>: <span class="hljs-function"><span class="hljs-params">resp</span> =&gt;</span> &#123;<br>                <span class="hljs-title function_">resolve</span>(resp)<br>            &#125;,<br>            <span class="hljs-attr">error</span>: <span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123;<br>                <span class="hljs-title function_">reject</span>(err)<br>            &#125;<br>        &#125;)<br>    &#125;)<br><br><br>&#125;<br><br><span class="hljs-keyword">const</span> getComment = (<span class="hljs-attr">id</span>: <span class="hljs-built_in">number</span>): <span class="hljs-title class_">Promise</span>&lt;<span class="hljs-built_in">any</span>&gt; =&gt; &#123;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>        $.<span class="hljs-title function_">ajax</span>(&#123;<br>            <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;https://ku.qingnian8.com/dataApi/news/comment.php&#x27;</span>,<br>            <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;GET&#x27;</span>,<br>            <span class="hljs-attr">data</span>: &#123;<br>                <span class="hljs-attr">aid</span>: id<br>            &#125;,<br>            <span class="hljs-attr">success</span>: <span class="hljs-function"><span class="hljs-params">resp</span> =&gt;</span> &#123;<br>                <span class="hljs-title function_">resolve</span>(resp)<br>            &#125;,<br>            <span class="hljs-attr">error</span>: <span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123;<br>                <span class="hljs-title function_">reject</span>(err)<br>            &#125;<br>        &#125;)<br>    &#125;)<br><br>&#125;<br><br><span class="hljs-comment">//  Promise的链式调用</span><br><span class="hljs-title function_">getNav</span>().<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>    <span class="hljs-keyword">let</span> id = res[<span class="hljs-number">0</span>].<span class="hljs-property">id</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">getArticle</span>(id)<br>&#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">getComment</span>(res[<span class="hljs-number">0</span>].<span class="hljs-property">id</span>)<br>&#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res)<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="ES7">ES7</h3><h4 id="await-async-ES7的新规范，异步处理同步化">await / async ES7的新规范，异步处理同步化</h4><p>这两个命令是成对出现的，如果使用await没有在函数中使用async命令，那就会报错，如果直接使用async没有使用await不会报错，只是返回的函数是个promise，可以，但是没有意义，所以这两个一起使用才会发挥出它们本身重要的作用。所谓异步同步化感觉就是将一些需要异步执行的任务放在一起让他们同步。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">onload</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params"></span>) =&gt; &#123;<br>    <span class="hljs-keyword">let</span> res, id<br>    res = <span class="hljs-keyword">await</span> <span class="hljs-title function_">getNav</span>()<br>    id = res[<span class="hljs-number">0</span>].<span class="hljs-property">id</span><br>    res = <span class="hljs-keyword">await</span> <span class="hljs-title function_">getArticle</span>(id)<br>    id = res[<span class="hljs-number">0</span>].<span class="hljs-property">id</span><br>    res = <span class="hljs-keyword">await</span> <span class="hljs-title function_">getComment</span>(id)<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res)<br>&#125;<br><br><span class="hljs-title function_">onload</span>()<br></code></pre></td></tr></table></figure><p>使用axios请求时已经封装好了Promise,更方便</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">const</span> getNav = (): <span class="hljs-title class_">Promise</span>&lt;<span class="hljs-built_in">any</span>&gt; =&gt; &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;https://ku.qingnian8.com/dataApi/news/navlist.php&#x27;</span>)<br>&#125;<br><span class="hljs-keyword">const</span> getArticle = (<span class="hljs-attr">id</span>: <span class="hljs-built_in">number</span>): <span class="hljs-title class_">Promise</span>&lt;<span class="hljs-built_in">any</span>&gt; =&gt; &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;https://ku.qingnian8.com/dataApi/news/newslist.php&#x27;</span>, &#123;<span class="hljs-attr">cid</span>: id&#125;)<br>&#125;<br><span class="hljs-keyword">const</span> getComment = (<span class="hljs-attr">id</span>: <span class="hljs-built_in">number</span>): <span class="hljs-title class_">Promise</span>&lt;<span class="hljs-built_in">any</span>&gt; =&gt; &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;https://ku.qingnian8.com/dataApi/news/comment.php&#x27;</span>, &#123;<span class="hljs-attr">aid</span>: id&#125;)<br>&#125;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">onload</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params"></span>) =&gt; &#123;<br>    <span class="hljs-keyword">let</span> res, id<br>    res = <span class="hljs-keyword">await</span> <span class="hljs-title function_">getNav</span>()<br>    id = res[<span class="hljs-number">0</span>].<span class="hljs-property">id</span><br>    res = <span class="hljs-keyword">await</span> <span class="hljs-title function_">getArticle</span>(id)<br>    id = res[<span class="hljs-number">0</span>].<span class="hljs-property">id</span><br>    res = <span class="hljs-keyword">await</span> <span class="hljs-title function_">getComment</span>(id)<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res)<br>&#125;<br><br><span class="hljs-title function_">onload</span>()<br></code></pre></td></tr></table></figure><p>封装的axios</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> <span class="hljs-keyword">type</span> &#123;<span class="hljs-title class_">AxiosRequestConfig</span>, <span class="hljs-title class_">Method</span>&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;axios&#x27;</span><br><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;axios&quot;</span>;<br><br><br><span class="hljs-keyword">const</span> service = axios.<span class="hljs-title function_">create</span>(&#123;<br>    <span class="hljs-attr">baseURL</span>: <span class="hljs-string">&#x27;https://ku.qingnian8.com&#x27;</span>,<br>    <span class="hljs-attr">timeout</span>: <span class="hljs-number">5000</span><br>&#125;)<br><br><span class="hljs-comment">//  处理响应拦截器</span><br>service.<span class="hljs-property">interceptors</span>.<span class="hljs-property">response</span>.<span class="hljs-title function_">use</span>(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> response.<span class="hljs-property">data</span>)<br><br><br><span class="hljs-comment">//  axios中的ts认为data是有的,但是响应拦截器实际已经去掉了</span><br><br><span class="hljs-keyword">type</span> <span class="hljs-title class_">Data</span>&lt;T&gt; = &#123;<br>    <span class="hljs-attr">code</span>: <span class="hljs-built_in">number</span><br>    <span class="hljs-attr">message</span>: <span class="hljs-built_in">string</span><br>    <span class="hljs-attr">data</span>: T<br>&#125;<br><br><span class="hljs-keyword">const</span> request = &lt;T&gt;<span class="hljs-function">(<span class="hljs-params">url: <span class="hljs-built_in">string</span>, method: Method, submitData?: <span class="hljs-built_in">object</span>, config?: AxiosRequestConfig</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> service.<span class="hljs-property">request</span>&lt;T, <span class="hljs-title class_">Data</span>&lt;T&gt;&gt;(&#123;<br>        url,<br>        method,<br>        [method.<span class="hljs-title function_">toLowerCase</span>() === <span class="hljs-string">&#x27;get&#x27;</span> ? <span class="hljs-string">&quot;params&quot;</span> : <span class="hljs-string">&quot;data&quot;</span>]: submitData,<br>        ...config<br>    &#125;)<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">get</span> = (<span class="hljs-params">url: <span class="hljs-built_in">string</span>, submitData?: <span class="hljs-built_in">object</span>, config?: AxiosRequestConfig</span>) =&gt; &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">request</span>(url, <span class="hljs-string">&#x27;get&#x27;</span>, submitData, config)<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">post</span> = (<span class="hljs-params">url: <span class="hljs-built_in">string</span>, submitData?: <span class="hljs-built_in">object</span>, config?: AxiosRequestConfig</span>) =&gt; &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">request</span>(url, <span class="hljs-string">&#x27;post&#x27;</span>, submitData, config)<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> request<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Promise</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据结构与算法</title>
    <link href="/2023/03/07/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    <url>/2023/03/07/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1>数据结构与算法</h1><h3 id="二分技巧">二分技巧</h3><blockquote><p><code>mid取法</code></p></blockquote><p><strong>mid = l + (r - l) / 2 或 l + r &gt;&gt; 1 配合 l 或 r = mid + 1使用</strong></p><p><strong>mid = r - (r - l) / 2 或 l + r + 1 &gt;&gt; 1 配合 l 或 r = mid - 1使用</strong></p><blockquote><p><code>边界处理（取 l = 0, r = n - 1 的情况下）</code></p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yacas">若数组符合 [... Y targetL target targetR   X ...   ]//数组升序，target均相等,if (check()) 根据题意来写<br>1.此时如果要得到target的右边X的坐标则用 mid = l + (r - l) / 2 <br>2.与1相对的 求Y使用 mid = r - (r - l) / 2<br>3.求targetL使用mid = l + (r - l) / 2 <br>4.求targetR使用mid = r - (r - l) / 2<br>5.若target只有一个随便用<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> n, k;<br>    <span class="hljs-type">int</span>[] arr;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">solve</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        n = in.nextInt();<br>        k = in.nextInt();<br>        arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i++) arr[i] = in.nextInt();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; k; i++) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> in.nextInt();<br>            out.println(binarySearchL(t) + <span class="hljs-string">&quot; &quot;</span> + binarySearchR(t));<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-type">int</span> <span class="hljs-title function_">binarySearchL</span><span class="hljs-params">(<span class="hljs-type">int</span> k)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">l</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, r = n - <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span> (l &lt; r) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">mid</span> <span class="hljs-operator">=</span> l + (r - l) / <span class="hljs-number">2</span>;<br>            <span class="hljs-keyword">if</span> (arr[mid] &lt; k) l = mid + <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">else</span> r = mid;<br>        &#125;<br>        <span class="hljs-keyword">return</span> arr[l] == k ? l : -<span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-type">int</span> <span class="hljs-title function_">binarySearchR</span><span class="hljs-params">(<span class="hljs-type">int</span> k)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">l</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, r = n - <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span> (l &lt; r) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">mid</span> <span class="hljs-operator">=</span> r - (r - l) / <span class="hljs-number">2</span>;<br>            <span class="hljs-keyword">if</span> (arr[mid] &lt;= k) l = mid;<br>            <span class="hljs-keyword">else</span> r = mid - <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> arr[l] == k ? l : -<span class="hljs-number">1</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><h4 id="浮点数二分">浮点数二分</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">double</span> x;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">solve</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        x = in.nextDouble();<br>        <span class="hljs-type">double</span> <span class="hljs-variable">e</span> <span class="hljs-operator">=</span> <span class="hljs-number">1e-8</span>;<span class="hljs-comment">//低于精度2位</span><br>        <span class="hljs-type">double</span> <span class="hljs-variable">l</span> <span class="hljs-operator">=</span> -<span class="hljs-number">100</span>, r = <span class="hljs-number">100</span>;<br>        <span class="hljs-keyword">while</span> (r - l &gt; e) &#123;<br>            <span class="hljs-type">double</span> <span class="hljs-variable">mid</span> <span class="hljs-operator">=</span> (l + r) / <span class="hljs-number">2</span>;<br>            <span class="hljs-keyword">if</span> (check(mid)) r = mid;<span class="hljs-comment">//将等于当作大于</span><br>            <span class="hljs-keyword">else</span> l = mid;<br>        &#125;<br>        out.printf(<span class="hljs-string">&quot;%.6f&quot;</span>, l);<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="三分">三分</h3><h4 id="凸函数">凸函数</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">while</span>(r - l &gt; eps) &#123;<br>        <span class="hljs-type">double</span> <span class="hljs-variable">mid</span> <span class="hljs-operator">=</span> (l + r) / <span class="hljs-number">2</span>;<br>        <span class="hljs-type">double</span> <span class="hljs-variable">mmid</span> <span class="hljs-operator">=</span> (mid + r) / <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">if</span>(check(mid) &gt; check(mmid) ) r = mmid;<br>        <span class="hljs-keyword">else</span> l = mid;<br>    &#125;<br><span class="hljs-comment">// 模板洛谷P3382</span><br></code></pre></td></tr></table></figure><h4 id="凹函数">凹函数</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-keyword">while</span>(l &lt; r - <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">mid</span> <span class="hljs-operator">=</span> (l + r) / <span class="hljs-number">2</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">mmid</span> <span class="hljs-operator">=</span> (mid + r) / <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">if</span>(check(mid) &gt; check(mmid)) l = mid;<br>        <span class="hljs-keyword">else</span> r = mmid;<br>    &#125;<br><span class="hljs-comment">// 模板acw4177</span><br></code></pre></td></tr></table></figure><h3 id="回溯">回溯</h3><img src="https://ykexc-1314584214.cos.ap-nanjing.myqcloud.com/image-20220721211914942.png" alt="image-20220721211914942" style="zoom:80%;" /><h3 id="双向BFS">双向BFS</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java">d1、d2 为两个方向的队列<br>m1、m2 为两个方向的哈希表，记录每个节点距离起点的<br>    <br><span class="hljs-comment">// 只有两个队列都不空，才有必要继续往下搜索</span><br><span class="hljs-comment">// 如果其中一个队列空了，说明从某个方向搜到底都搜不到该方向的目标节点</span><br><span class="hljs-keyword">while</span>(!d1.isEmpty() &amp;&amp; !d2.isEmpty()) &#123;<br>    <span class="hljs-keyword">if</span> (d1.size() &lt; d2.size()) &#123;<br>        update(d1, m1, m2);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        update(d2, m2, m1);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// update 为将当前队列 d 中包含的元素取出，进行「一次完整扩展」的逻辑（按层拓展）</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(Deque d, Map cur, Map other)</span> &#123;&#125;<br></code></pre></td></tr></table></figure><h3 id="并查集">并查集</h3><ul><li><p>一维</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">UnionFind</span>&#123;<br>    <span class="hljs-type">int</span>[]arr;<br>    <span class="hljs-type">int</span>[]rank;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">UnionFind</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span>&#123;<br>        arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n];<br>        rank = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>            arr[i] = i;<br>            rank[i] = <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">find</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span>&#123;<br>        <span class="hljs-keyword">if</span> (n == arr[n])&#123;<br>            <span class="hljs-keyword">return</span> n;<br>        &#125;<br>        <span class="hljs-keyword">return</span> arr[n] = find(arr[n]);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">union</span><span class="hljs-params">(<span class="hljs-type">int</span> x , <span class="hljs-type">int</span> y)</span>&#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">xx</span> <span class="hljs-operator">=</span> find(arr[x]);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">yy</span> <span class="hljs-operator">=</span> find(arr[y]);<br>        <span class="hljs-keyword">if</span> (xx != yy)&#123;<br>            <span class="hljs-keyword">if</span> (rank[xx] &lt; rank[yy])&#123;<br>                arr[xx] = yy;<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (rank[xx] &gt; rank[yy])&#123;<br>                arr[yy] = xx;<br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                arr[xx] = yy;<br>                rank[yy] ++;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li><li><p>二维</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">UnionFind</span> &#123;<br>    <span class="hljs-type">int</span> m, n;<br>    <span class="hljs-type">int</span>[][][] root;<br>    <span class="hljs-type">int</span>[][] size;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">UnionFind</span><span class="hljs-params">(<span class="hljs-type">int</span> m, <span class="hljs-type">int</span> n)</span> &#123;<br>        <span class="hljs-built_in">this</span>.m = m;<br>        <span class="hljs-built_in">this</span>.n = n;<br>        <span class="hljs-built_in">this</span>.root = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[m][n][<span class="hljs-number">2</span>];<br>        <span class="hljs-built_in">this</span>.size = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[m][n];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; m; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; n; j++) &#123;<br>                root[i][j][<span class="hljs-number">0</span>] = i;<br>                root[i][j][<span class="hljs-number">1</span>] = j;<br>                size[i][j] = <span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] find(<span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j) &#123;<br>        <span class="hljs-type">int</span>[] rootArr = root[i][j];<br>        <span class="hljs-type">int</span> <span class="hljs-variable">ri</span> <span class="hljs-operator">=</span> rootArr[<span class="hljs-number">0</span>], rj = rootArr[<span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">if</span> (ri == i &amp;&amp; rj == j) &#123;<br>            <span class="hljs-keyword">return</span> rootArr;<br>        &#125;<br>        <span class="hljs-keyword">return</span> find(ri, rj);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">union</span><span class="hljs-params">(<span class="hljs-type">int</span> i1, <span class="hljs-type">int</span> j1, <span class="hljs-type">int</span> i2, <span class="hljs-type">int</span> j2)</span> &#123;<br>        <span class="hljs-type">int</span>[] rootArr1 = find(i1, j1);<br>        <span class="hljs-type">int</span>[] rootArr2 = find(i2, j2);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">ri1</span> <span class="hljs-operator">=</span> rootArr1[<span class="hljs-number">0</span>], rj1 = rootArr1[<span class="hljs-number">1</span>];<br>        <span class="hljs-type">int</span> <span class="hljs-variable">ri2</span> <span class="hljs-operator">=</span> rootArr2[<span class="hljs-number">0</span>], rj2 = rootArr2[<span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">if</span> (ri1 != ri2 || rj1 != rj2) &#123;<br>            <span class="hljs-keyword">if</span> (size[ri1][rj1] &gt;= size[ri2][rj2]) &#123;<br>                root[ri2][rj2][<span class="hljs-number">0</span>] = ri1;<br>                root[ri2][rj2][<span class="hljs-number">1</span>] = rj1;<br>                size[ri1][rj1] += size[ri2][rj2];<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                root[ri1][rj1][<span class="hljs-number">0</span>] = ri2;<br>                root[ri1][rj1][<span class="hljs-number">1</span>] = rj2;<br>                size[ri2][rj2] += size[ri1][rj1];<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li></ul><h3 id="GCD">GCD</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">gcd</span><span class="hljs-params">(<span class="hljs-type">int</span> a , <span class="hljs-type">int</span> b)</span>&#123;<br>        <span class="hljs-keyword">return</span> a == <span class="hljs-number">0</span> ? b : gcd(b % a , a);<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="EXGCD">EXGCD</h3><blockquote><p>可以解决线性同余问题</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-title function_">exGcd</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b, <span class="hljs-type">int</span>[] x, <span class="hljs-type">int</span>[] y)</span> &#123;<br>        <span class="hljs-keyword">if</span> (b == <span class="hljs-number">0</span>) &#123;<br>            x[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>            y[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">return</span> a;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> exGcd(b, Math.floorMod(a, b), y, x);<br>            y[<span class="hljs-number">0</span>] -= a / b * x[<span class="hljs-number">0</span>];<br>            <span class="hljs-keyword">return</span> d;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="线性筛">线性筛</h3><blockquote><p>如果一个数的质因数的数量确定了,那么这个数也就确定了</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">N</span> <span class="hljs-operator">=</span> <span class="hljs-number">1000010</span>;<br>    <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> cnt;<br>    <span class="hljs-keyword">static</span> <span class="hljs-type">int</span>[] pr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[N];<br>    <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span>[] st = <span class="hljs-keyword">new</span> <span class="hljs-title class_">boolean</span>[N];<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">find</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>; i &lt;= n; i++) &#123;<br>            <span class="hljs-keyword">if</span> (!st[i]) pr[cnt++] = i;<span class="hljs-comment">//将没有被标记的点加入到pr数组中去，也就是质数</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; pr[j] &lt;= n / i; j++) &#123;<span class="hljs-comment">//从小到大遍历质数</span><br>                st[pr[j] * i] = <span class="hljs-literal">true</span>; <span class="hljs-comment">//每一次让pr[j]*i标记</span><br>                <span class="hljs-keyword">if</span> (i % pr[j] == <span class="hljs-number">0</span>) <span class="hljs-keyword">break</span>;<br>                <span class="hljs-comment">//只要pi % pr[j] == 0说明他是pr[j]*i的最小质因数了,然后结束循环，</span><br>                <span class="hljs-comment">//如果不break循环的话就会进行pr[j+1]*i晒掉，因为pr[j+1]*i的最小质因数</span><br>                <span class="hljs-comment">//不是pr[j+1],所以会导致重复删除，这也是线性筛的优点所在</span><br>                <span class="hljs-comment">//例如：st[2*4=8]标记之后，如果你不在下面判断if(4%2==0)break掉</span><br>                <span class="hljs-comment">//就会继续pr[(j+1)]*i== st[3*4=12],3不是12的最小质因数，所以这样也是</span><br>                <span class="hljs-comment">//会导致重复删除，执行到i=6时候，st[2*6=12]会再次标记，这样也就在此导致重复了</span><br><br>                <span class="hljs-comment">//i % pr[j] != 0 说明pr[j]永远是pr[j]*i的最小质因数</span><br>                <span class="hljs-comment">//因为pr[j]的最小质因数是本身pr[j]，然后pr[j]*i是pr[j]的倍数</span><br>                <span class="hljs-comment">//所以pr[j]*i的最小质因数也是pr[j]，永远都是，pr[j+1]*i的时候也是</span><br>            &#125;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="欧拉函数">欧拉函数</h3><blockquote><p>$\phi(N)=N(1-1/p_1)(1-1/p_2)…   $$p1,p2…\text为N的质因子$</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">phi</span><span class="hljs-params">(a <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">int</span> &#123;<br>res := a<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">2</span>; i &lt;= a/i; i++ &#123;<br><span class="hljs-keyword">if</span> a%i == <span class="hljs-number">0</span> &#123;<br>res = res / i * (i - <span class="hljs-number">1</span>)<br><span class="hljs-keyword">for</span> a%i == <span class="hljs-number">0</span> &#123;<br>a /= i<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span> a != <span class="hljs-number">1</span> &#123;<br>res = res / a * (a - <span class="hljs-number">1</span>)<br>&#125;<br><span class="hljs-keyword">return</span> res<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//线性筛求欧拉函数</span><br><span class="hljs-type">long</span> <span class="hljs-title function_">getEulers</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br>    euler[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>; i &lt;= n; i++) &#123;<br>        <span class="hljs-keyword">if</span> (!vis[i]) &#123;<br>            primes[cnt++] = i;<br>            euler[i] = i - <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; primes[j] &lt;= n / i; j++) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> i * primes[j];<br>            vis[t] = <span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">if</span> (i % primes[j] == <span class="hljs-number">0</span>) &#123;<br>                euler[t] = euler[i] * primes[j];<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            euler[t] = euler[i] * (primes[j] - <span class="hljs-number">1</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-type">long</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>        res += euler[i];<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="卡特兰数">卡特兰数</h3><blockquote><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>C</mi><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow></msub><mo>=</mo><mn>2</mn><msub><mi>C</mi><mi>n</mi></msub><mo stretchy="false">(</mo><mn>2</mn><mi>n</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo><mtext> </mtext><mi mathvariant="normal">/</mi><mo stretchy="false">(</mo><mi>n</mi><mo>+</mo><mn>2</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">C_{n+1} = 2C_n(2n + 1)\ /(n + 2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8917em;vertical-align:-0.2083em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord">2</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace"> </span><span class="mord">/</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mclose">)</span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>h</mi><mi>n</mi></msub><mo>=</mo><msubsup><mi>C</mi><mrow><mn>2</mn><mi>n</mi></mrow><mi>n</mi></msubsup><mo>−</mo><msubsup><mi>C</mi><mrow><mn>2</mn><mi>n</mi></mrow><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msubsup><mo>=</mo><msubsup><mi>C</mi><mrow><mn>2</mn><mi>n</mi></mrow><mi>n</mi></msubsup><mi mathvariant="normal">/</mi><mo stretchy="false">(</mo><mi>n</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">h_n = C_{2n}^n - C_{2n}^{n-1} = C_{2n}^n/(n+1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.9314em;vertical-align:-0.2481em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-2.4519em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mathnormal mtight">n</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2481em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.1205em;vertical-align:-0.2663em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8542em;"><span style="top:-2.4337em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mathnormal mtight">n</span></span></span></span><span style="top:-3.1031em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2663em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-2.4519em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mathnormal mtight">n</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2481em;"><span></span></span></span></span></span></span><span class="mord">/</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">catalan</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br>        <span class="hljs-comment">//用 long 类型防止计算过程中的溢出</span><br>        <span class="hljs-type">long</span> <span class="hljs-variable">C</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; ++i) &#123;<br>            C = C * <span class="hljs-number">2</span> * (<span class="hljs-number">2L</span> * i + <span class="hljs-number">1</span>) / (i + <span class="hljs-number">2</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> (<span class="hljs-type">int</span>) C;<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="快速幂">快速幂</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">long</span> <span class="hljs-title function_">qmi</span><span class="hljs-params">(<span class="hljs-type">long</span> a, <span class="hljs-type">long</span> k, <span class="hljs-type">long</span> m)</span> &#123;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">ans</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span> (k != <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">if</span> ((k &amp; <span class="hljs-number">1</span>) == <span class="hljs-number">1</span>) &#123;<br>                ans = ans * a % m;<br>            &#125;<br>            k &gt;&gt;= <span class="hljs-number">1</span>;<br>            a = a * a % m;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="矩阵乘法">矩阵乘法</h3><blockquote><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>矩阵</mtext><mi>A</mi><mo stretchy="false">(</mo><mi>n</mi><mo>×</mo><mi>m</mi><mo stretchy="false">)</mo><mtext>乘</mtext><mi>B</mi><mo stretchy="false">(</mo><mi>m</mi><mo>×</mo><mi>j</mi><mo stretchy="false">)</mo><mtext>结果得到</mtext><mi>n</mi><mo>×</mo><mi>j</mi><mtext>的矩阵</mtext><mo separator="true">,</mo><mtext>时间复杂度为</mtext><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo>×</mo><mi>m</mi><mo>×</mo><mi>j</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">矩阵A(n\times m)乘B(m\times j)结果得到n\times j的矩阵,时间复杂度为O(n\times m\times j)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord cjk_fallback">矩阵</span><span class="mord mathnormal">A</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">m</span><span class="mclose">)</span><span class="mord cjk_fallback">乘</span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mopen">(</span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mclose">)</span><span class="mord cjk_fallback">结果得到</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mord cjk_fallback">的矩阵</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord cjk_fallback">时间复杂度为</span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mclose">)</span></span></span></span></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">long</span>[][] cal(<span class="hljs-type">long</span>[][] A, <span class="hljs-type">long</span>[][] B) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> A.length, m = A[<span class="hljs-number">0</span>].length, k = B[<span class="hljs-number">0</span>].length;<br>        <span class="hljs-type">long</span>[][] ans = <span class="hljs-keyword">new</span> <span class="hljs-title class_">long</span>[n][k];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">l</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; l &lt; k; l++) &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; o &lt; m; o++) &#123;<br>                    ans[i][l] += A[i][o] * B[o][l];<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="快速乘">快速乘</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">long</span> <span class="hljs-title function_">mul</span><span class="hljs-params">(<span class="hljs-type">long</span> a, <span class="hljs-type">long</span> k)</span> &#123;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">ans</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (k &gt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">if</span> ((k &amp; <span class="hljs-number">1</span>) == <span class="hljs-number">1</span>) ans += a;<br>            k &gt;&gt;= <span class="hljs-number">1</span>;<br>            a += a;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="快速选择">快速选择</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-title function_">qSelect</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> k)</span> &#123;<br>        <span class="hljs-keyword">if</span> (l == r) <span class="hljs-keyword">return</span> nums[k];<br>        <span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> nums[l + r &gt;&gt; <span class="hljs-number">1</span>], i = l - <span class="hljs-number">1</span>, j = r + <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span> (i &lt; j) &#123;<br>            <span class="hljs-keyword">do</span> i++; <span class="hljs-keyword">while</span> (nums[i] &lt; x);<br>            <span class="hljs-keyword">do</span> j--; <span class="hljs-keyword">while</span> (nums[j] &gt; x);<br>            <span class="hljs-keyword">if</span> (i &lt; j) &#123;<br>                nums[i] ^= nums[j];<br>                nums[j] ^= nums[i];<br>                nums[i] ^= nums[j];<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (k &lt;= j) <span class="hljs-keyword">return</span> qSelect(nums, l, j, k);<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> qSelect(nums, j + <span class="hljs-number">1</span>, r, k);<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="二进制枚举">二进制枚举</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">6173</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">maximumRows</span><span class="hljs-params">(<span class="hljs-type">int</span>[][] mat, <span class="hljs-type">int</span> cols)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> mat.length, m = mat[<span class="hljs-number">0</span>].length;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">ans</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span>[] rowState = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; m; j++) &#123;<br>                <span class="hljs-keyword">if</span> (mat[i][j] == <span class="hljs-number">1</span>) rowState[i] |= <span class="hljs-number">1</span> &lt;&lt; j;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1</span> &lt;&lt; m; i++) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">cnt</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; m; j++) &#123;<br>                cnt += i &gt;&gt; j &amp; <span class="hljs-number">1</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (cnt != cols) <span class="hljs-keyword">continue</span>;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; n; j++) &#123;<br>                <span class="hljs-keyword">if</span> ((rowState[j] &amp; i) == rowState[j]) t++;<br>            &#125;<br>            ans = Math.max(ans, t);<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="多路归并">多路归并</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//丑数</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getUglyNumber</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br>        <span class="hljs-type">int</span>[] ans = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n + <span class="hljs-number">1</span>];<br>        ans[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">i2</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>, i3 = <span class="hljs-number">1</span>, i5 = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>; i &lt;= n; i++) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> ans[i2] * <span class="hljs-number">2</span>, b = ans[i3] * <span class="hljs-number">3</span>, c = ans[i5] * <span class="hljs-number">5</span>;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">min</span> <span class="hljs-operator">=</span> Math.min(a, Math.min(b, c));<br>            <span class="hljs-keyword">if</span> (min == a) i2++;<br>            <span class="hljs-keyword">if</span> (min == b) i3++;<br>            <span class="hljs-keyword">if</span> (min == c) i5++;<br>            ans[i] = min;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans[n];<br>    &#125;<br>&#125;<br><span class="hljs-comment">//LC373</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="hljs-title function_">kSmallestPairs</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums1, <span class="hljs-type">int</span>[] nums2, <span class="hljs-type">int</span> k)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> nums1.length, m = nums2.length;<br>        List&lt;List&lt;Integer&gt;&gt; ans = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        PriorityQueue&lt;<span class="hljs-type">int</span>[]&gt; q = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PriorityQueue</span>&lt;&gt;(Comparator.comparingInt(a -&gt; (nums1[a[<span class="hljs-number">0</span>]] + nums2[a[<span class="hljs-number">1</span>]])));<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; Math.min(n, k); i++) q.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;i, <span class="hljs-number">0</span>&#125;);<br>        <span class="hljs-keyword">while</span> (ans.size() &lt; k &amp;&amp; !q.isEmpty()) &#123;<br>            <span class="hljs-type">int</span>[] poll = q.poll();<br>            <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> poll[<span class="hljs-number">0</span>], b = poll[<span class="hljs-number">1</span>];<br>            ans.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;()&#123;&#123;<br>                add(nums1[a]);<br>                add(nums2[b]);<br>            &#125;&#125;);<br>            <span class="hljs-keyword">if</span> (b + <span class="hljs-number">1</span> &lt; m) q.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;a, b + <span class="hljs-number">1</span>&#125;);<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Trie">Trie</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Trie</span> &#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TrieNode</span> &#123;<br>        <span class="hljs-type">boolean</span> isEnd;<br>        TrieNode[] trieNodes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TrieNode</span>[<span class="hljs-number">26</span>];<br>    &#125;<br><br>    TrieNode root;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Trie</span><span class="hljs-params">()</span> &#123;<br>        root = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TrieNode</span>();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(String word)</span> &#123;<br>        <span class="hljs-type">TrieNode</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.root;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; word.length(); i++) &#123;<br>            <span class="hljs-keyword">if</span> (temp.trieNodes[word.charAt(i) - <span class="hljs-string">&#x27;a&#x27;</span>] == <span class="hljs-literal">null</span>) &#123;<br>                temp.trieNodes[word.charAt(i) - <span class="hljs-string">&#x27;a&#x27;</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TrieNode</span>();<br>            &#125;<br>            temp = temp.trieNodes[word.charAt(i) - <span class="hljs-string">&#x27;a&#x27;</span>];<br>        &#125;<br>        temp.isEnd = <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">search</span><span class="hljs-params">(String word)</span> &#123;<br>        <span class="hljs-type">TrieNode</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.root;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; word.length(); i++) &#123;<br>            <span class="hljs-keyword">if</span> (temp.trieNodes[word.charAt(i) - <span class="hljs-string">&#x27;a&#x27;</span>] == <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>            temp = temp.trieNodes[word.charAt(i) - <span class="hljs-string">&#x27;a&#x27;</span>];<br>        &#125;<br>        <span class="hljs-keyword">return</span> temp.isEnd;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">startsWith</span><span class="hljs-params">(String prefix)</span> &#123;<br>        <span class="hljs-type">TrieNode</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.root;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; prefix.length(); i++) &#123;<br>            <span class="hljs-keyword">if</span> (temp.trieNodes[prefix.charAt(i) - <span class="hljs-string">&#x27;a&#x27;</span>] == <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>            temp = temp.trieNodes[prefix.charAt(i) - <span class="hljs-string">&#x27;a&#x27;</span>];<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="01背包">01背包</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.*;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[]args)</span>&#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> sc.nextInt();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">v</span> <span class="hljs-operator">=</span> sc.nextInt();<br>        <span class="hljs-type">int</span> []dp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[v + <span class="hljs-number">1</span>];<br>        <span class="hljs-type">int</span> []m = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[c];<br>        <span class="hljs-type">int</span> []vv = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[c];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;i &lt; c;i++)&#123;<br>            m[i] = sc.nextInt();<br>            vv[i] = sc.nextInt();<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;i &lt; c;i++)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> v;j &gt;= m[i];j--)&#123;<br>                dp[j] = Math.max(dp[j],dp[j - m[i]] + vv[i]);<br>            &#125;<br>        &#125;<br>        System.out.println(dp[v]);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="完全背包">完全背包</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.*;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[]args)</span>&#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> sc.nextInt();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">v</span> <span class="hljs-operator">=</span> sc.nextInt();<br>        <span class="hljs-type">int</span> []dp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[v + <span class="hljs-number">1</span>];<br>        <span class="hljs-type">int</span> []m = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[c];<br>        <span class="hljs-type">int</span> []vv = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[c];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;i &lt; c;i++)&#123;<br>            m[i] = sc.nextInt();<br>            vv[i] = sc.nextInt();<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;i &lt; c;i++)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> m[i];j &lt;=v;j++)&#123;<br>                dp[j] = Math.max(dp[j],dp[j - m[i]] + vv[i]);<br>            &#125;<br>        &#125;<br>        System.out.println(dp[v]);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="多重背包（二进制优化）">多重背包（二进制优化）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> sc.nextInt();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">vv</span> <span class="hljs-operator">=</span> sc.nextInt();<br>        <span class="hljs-type">int</span>[] v = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">100000</span>];<br>        <span class="hljs-type">int</span>[] m = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">100000</span>];<br>        <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">v1</span> <span class="hljs-operator">=</span> sc.nextInt();<br>            <span class="hljs-type">int</span> <span class="hljs-variable">va</span> <span class="hljs-operator">=</span> sc.nextInt();<br>            <span class="hljs-type">int</span> <span class="hljs-variable">cn</span> <span class="hljs-operator">=</span> sc.nextInt();<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;j &lt; cn ; j&lt;&lt;=<span class="hljs-number">1</span>) &#123;<br>                v[num] = j*v1;<br>                m[num++] = j*va;<br>                cn -= j;<br>            &#125;<br>            <span class="hljs-keyword">if</span> ( cn!= <span class="hljs-number">0</span>)&#123;<br>                v[num] = cn*v1;<br>                m[num ++] = cn*va;<br>            &#125;<br>        &#125;<br>        <span class="hljs-type">int</span>[] dp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[vv + <span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; num; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> vv; k &gt;= v[i]; k--) &#123;<br>                dp[k] = Math.max(dp[k],dp[k - v[i]] + m[i]);<br>            &#125;<br>        &#125;<br>        System.out.println(dp[vv]);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="混合背包">混合背包</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.*;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[]args)</span>&#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> sc.nextInt();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">v</span> <span class="hljs-operator">=</span> sc.nextInt();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span>[]dp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[v + <span class="hljs-number">1</span>];<br>        <span class="hljs-type">int</span> []vv = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">1000000</span>];<br>        <span class="hljs-type">int</span> []va = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">1000000</span>];<br>        <span class="hljs-type">int</span> []t = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">1000000</span>];<br>        <span class="hljs-keyword">for</span>( <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i ++ )&#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> sc.nextInt();<br>            <span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> sc.nextInt();<br>            <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> sc.nextInt();<br>            <span class="hljs-keyword">if</span>(c == -<span class="hljs-number">1</span>)&#123;<br>                vv[num] = a;<br>                va[num] = b;<br>                t[num++] = <span class="hljs-number">1</span>;<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(c == <span class="hljs-number">0</span>)&#123;<br>                vv[num] = a;<br>                va[num] = b;<br>                t[num++] = <span class="hljs-number">0</span>;<br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; j &lt;= c; j &lt;&lt;= <span class="hljs-number">1</span>)&#123;<br>                vv[num] = a*j;<br>                va[num] = b*j;<br>                t[num++] = <span class="hljs-number">1</span>;<br>                c -= j;<br>                &#125;<br>                <span class="hljs-keyword">if</span>(c != <span class="hljs-number">0</span>)&#123;<br>                vv[num] = c*a;<br>                va[num] = c*b;<br>                t[num++] = <span class="hljs-number">1</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; num; i ++ )&#123;<br>            <span class="hljs-keyword">if</span>(t[i] == <span class="hljs-number">1</span>)&#123;<br>                <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> v; j &gt;= vv[i]; j --)&#123;<br>                    dp[j] = Math.max(dp[j],dp[j - vv[i]] + va[i]);<br>                &#125;<br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> vv[i]; j &lt;= v; j ++ )&#123;<br>                    dp[j] = Math.max(dp[j],dp[j - vv[i]] + va[i]);<br>                &#125;<br>            &#125;<br>        &#125;<br>        System.out.println(dp[v]);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="多维费用背包">多维费用背包</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.*;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[]args)</span>&#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> sc.nextInt();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">vv</span> <span class="hljs-operator">=</span> sc.nextInt();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">mm</span> <span class="hljs-operator">=</span> sc.nextInt();<br>        <span class="hljs-type">int</span>[]v = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n];<br>        <span class="hljs-type">int</span>[]m = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n];<br>        <span class="hljs-type">int</span>[]va = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i ++ )&#123;<br>            v[i] = sc.nextInt();<br>            m[i] = sc.nextInt();<br>            va[i] = sc.nextInt();<br>        &#125;<br>        <span class="hljs-type">int</span>[][]dp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[vv + <span class="hljs-number">1</span>][mm + <span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i ++ )&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> vv; j &gt;= v[i]; j -- )&#123;<br>                <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> mm; k &gt;= m[i]; k -- )&#123;<br>                    dp[j][k] = Math.max(dp[j][k],dp[j - v[i]][k - m[i]] + va[i]);<br>                &#125;<br>            &#125;<br>        &#125;<br>        System.out.println(dp[vv][mm]);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="分组背包">分组背包</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.*;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[]args)</span>&#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> sc.nextInt();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">v</span> <span class="hljs-operator">=</span> sc.nextInt();<br>        <span class="hljs-type">int</span>[] vv = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">102</span>];<br>        <span class="hljs-type">int</span>[] mm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">102</span>];<br>        <span class="hljs-type">int</span> []dp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[v + <span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i ++ )&#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> sc.nextInt();<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; c; j ++)&#123;<br>                vv[j] = sc.nextInt();<br>                mm[j] = sc.nextInt();<br>            &#125;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">z</span> <span class="hljs-operator">=</span> v; z &gt;= <span class="hljs-number">0</span>; z -- )&#123;<span class="hljs-comment">//这里加强理解</span><br>                <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; x &lt; c; x ++ )&#123;<br>                    <span class="hljs-keyword">if</span>(z &gt;= vv[x]) &#123;<br>                        dp[z] = Math.max(dp[z],dp[z - vv[x]] + mm[x]);<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>        System.out.println(dp[v]);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="求方案数背包">求方案数背包</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] arg)</span>&#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">N</span> <span class="hljs-operator">=</span> sc.nextInt();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">C</span> <span class="hljs-operator">=</span> sc.nextInt();<br>        <span class="hljs-type">int</span>[] dp1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[C + <span class="hljs-number">1</span>]; <span class="hljs-comment">// dp1[i][j] 表示面对前i个物品，当前容量为j时的最大价值</span><br>        <span class="hljs-type">int</span>[] dp2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[C + <span class="hljs-number">1</span>]; <span class="hljs-comment">// dp2[i][j] 表示面对前i个物品，当前容量为j最大价值的方案数</span><br>        Arrays.fill(dp2, <span class="hljs-number">1</span>);        <span class="hljs-comment">// 就算一个也不拿，也是一种方案</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; N; i++)&#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">vi</span> <span class="hljs-operator">=</span> sc.nextInt();  <span class="hljs-comment">// 体积</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">wi</span> <span class="hljs-operator">=</span> sc.nextInt();  <span class="hljs-comment">// 价值</span><br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> C; j &gt;= vi;  j--)&#123;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">get</span> <span class="hljs-operator">=</span> dp1[j - vi] + wi;<br>                <span class="hljs-keyword">if</span>(get == dp1[j])&#123;<br>                    dp2[j] += dp2[j - vi];<br>                &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(dp1[j] &lt; get)&#123;<br>                    dp1[j] = get;<br>                    dp2[j] = dp2[j - vi];<br>                &#125;<br>                dp2[j] %= <span class="hljs-number">1000000007</span>;<br>            &#125;<br>        &#125;<br>        System.out.println(dp2[C]);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="树状数组">树状数组</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">BIT</span> &#123;<br>    <span class="hljs-type">int</span>[] tree;<br><br>    BIT(<span class="hljs-type">int</span>[] arr) &#123;<br>        tree = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[arr.length + <span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>            <span class="hljs-built_in">this</span>.add(i + <span class="hljs-number">1</span>, arr[i]);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-type">int</span> <span class="hljs-title function_">lowBit</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br>        <span class="hljs-keyword">return</span> n &amp; -n;<br>    &#125;<br><br>    <span class="hljs-type">int</span> <span class="hljs-title function_">query</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (x &gt; <span class="hljs-number">0</span>) &#123;<br>            sum += tree[x];<br>            x -= lowBit(x);<br>        &#125;<br>        <span class="hljs-keyword">return</span> sum;<br>    &#125;<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> v)</span> &#123;<br>        <span class="hljs-keyword">while</span> (x &lt; tree.length) &#123;<br>            tree[x] += v;<br>            x += lowBit(x);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[][] bit = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">250</span>][<span class="hljs-number">250</span>];<br><br>   <span class="hljs-type">int</span> <span class="hljs-title function_">lowBit</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span> &#123;<br>       <span class="hljs-keyword">return</span> a &amp; -a;<br>   &#125;<br><br>   <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-type">int</span> x1, <span class="hljs-type">int</span> y1, <span class="hljs-type">int</span> v)</span> &#123;<br>       <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> x1; i &lt; bit.length; i += lowBit(i)) &#123;<br>           <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> y1; j &lt; bit.length; j += lowBit(j)) &#123;<br>               bit[i][j] += v;<br>           &#125;<br>       &#125;<br>   &#125;<br><br>   <span class="hljs-type">int</span> <span class="hljs-title function_">query</span><span class="hljs-params">(<span class="hljs-type">int</span> x1, <span class="hljs-type">int</span> y1)</span> &#123;<br>       <span class="hljs-type">int</span> <span class="hljs-variable">ans</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>       <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> x1; i &gt; <span class="hljs-number">0</span>; i -= lowBit(i)) &#123;<br>           <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> y1; j &gt; <span class="hljs-number">0</span>; j -= lowBit(j)) &#123;<br>               ans += bit[i][j];<br>           &#125;<br>       &#125;<br>       <span class="hljs-keyword">return</span> ans;<br>   &#125;<br></code></pre></td></tr></table></figure><h3 id="线段树">线段树</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SegTree</span> &#123;<br>        <span class="hljs-type">int</span>[] nums;<br>        <span class="hljs-type">long</span>[] sum;<br><br>        <span class="hljs-type">int</span>[] flip;<br><br>        SegTree(<span class="hljs-type">int</span>[] _nums) &#123;<br>            <span class="hljs-built_in">this</span>.nums = _nums;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> nums.length;<br>            sum = <span class="hljs-keyword">new</span> <span class="hljs-title class_">long</span>[n * <span class="hljs-number">4</span>];<br>            flip = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n * <span class="hljs-number">4</span>];<br>        &#125;<br><br>        <span class="hljs-keyword">void</span> <span class="hljs-title function_">pushDown</span><span class="hljs-params">(<span class="hljs-type">int</span> o, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span> &#123;<br>            <span class="hljs-keyword">if</span> (flip[o] != <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">mid</span> <span class="hljs-operator">=</span> (l + r) / <span class="hljs-number">2</span>;<br>                sum[o * <span class="hljs-number">2</span>] += (<span class="hljs-type">long</span>) flip[o] * (mid - l + <span class="hljs-number">1</span>);<br>                flip[o * <span class="hljs-number">2</span>] += flip[o];<br>                sum[o * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>] += (<span class="hljs-type">long</span>) flip[o] * (r - mid);<br>                flip[o * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>] += flip[o];<br>                flip[o] = <span class="hljs-number">0</span>;<br>            &#125;<br>        &#125;<br><br><br>        <span class="hljs-keyword">void</span> <span class="hljs-title function_">pushUp</span><span class="hljs-params">(<span class="hljs-type">int</span> o)</span> &#123;<br>            sum[o] = sum[o * <span class="hljs-number">2</span>] + sum[o * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>];<br>        &#125;<br><br>        <span class="hljs-keyword">void</span> <span class="hljs-title function_">build</span><span class="hljs-params">(<span class="hljs-type">int</span> o, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span> &#123;<br>            <span class="hljs-keyword">if</span> (l == r) &#123;<br>                sum[o] = nums[l - <span class="hljs-number">1</span>];<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">mid</span> <span class="hljs-operator">=</span> (l + r) / <span class="hljs-number">2</span>;<br>            build(o * <span class="hljs-number">2</span>, l, mid);<br>            build(o * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>, mid + <span class="hljs-number">1</span>, r);<br>            pushUp(o);<br>        &#125;<br><br><br>        <span class="hljs-keyword">void</span> <span class="hljs-title function_">upDate</span><span class="hljs-params">(<span class="hljs-type">int</span> o, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> p, <span class="hljs-type">int</span> v)</span> &#123;<br>            <span class="hljs-keyword">if</span> (l == p &amp;&amp; r == p) &#123;<br>                sum[o] += v;<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">mid</span> <span class="hljs-operator">=</span> (l + r) / <span class="hljs-number">2</span>;<br>            <span class="hljs-keyword">if</span> (mid &gt;= p) upDate(o * <span class="hljs-number">2</span>, l, mid, p, v);<br>            <span class="hljs-keyword">else</span> upDate(o * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>, mid + <span class="hljs-number">1</span>, r, p, v);<br>            pushUp(o);<br>        &#125;<br><br>        <span class="hljs-keyword">void</span> <span class="hljs-title function_">upDate</span><span class="hljs-params">(<span class="hljs-type">int</span> o, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> L, <span class="hljs-type">int</span> R, <span class="hljs-type">int</span> v)</span> &#123;<br>            <span class="hljs-keyword">if</span> (l &gt;= L &amp;&amp; r &lt;= R) &#123;<br>                sum[o] += (<span class="hljs-type">long</span>) (r - l + <span class="hljs-number">1</span>) * v;<br>                flip[o] += v;<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>            pushDown(o, l, r);<br>            <span class="hljs-type">int</span> <span class="hljs-variable">mid</span> <span class="hljs-operator">=</span> (l + r) / <span class="hljs-number">2</span>;<br>            <span class="hljs-keyword">if</span> (mid &gt;= L) upDate(o * <span class="hljs-number">2</span>, l, mid, L, R, v);<br>            <span class="hljs-keyword">if</span> (mid &lt; R) upDate(o * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>, mid + <span class="hljs-number">1</span>, r, L, R, v);<br>            pushUp(o);<br>        &#125;<br><br>        <span class="hljs-type">long</span> <span class="hljs-title function_">query</span><span class="hljs-params">(<span class="hljs-type">int</span> o, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> L, <span class="hljs-type">int</span> R)</span> &#123;<br>            <span class="hljs-keyword">if</span> (l &gt;= L &amp;&amp; r &lt;= R) &#123;<br>                <span class="hljs-keyword">return</span> sum[o];<br>            &#125;<br>            pushDown(o, l, r);<br>            <span class="hljs-type">long</span> <span class="hljs-variable">ans</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">mid</span> <span class="hljs-operator">=</span> (l + r) / <span class="hljs-number">2</span>;<br>            <span class="hljs-keyword">if</span> (mid &gt;= L) ans += query(o * <span class="hljs-number">2</span>, l, mid, L, R);<br>            <span class="hljs-keyword">if</span> (mid &lt; R) ans += query(o * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>, mid + <span class="hljs-number">1</span>, r, L, R);<br>            <span class="hljs-keyword">return</span> ans;<br>        &#125;<br><br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="线段树-动态开点">线段树(动态开点)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SegTreeByDynamic</span> &#123;<br>        <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span> &#123;<br>            Node ls, rs;<br>            <span class="hljs-type">int</span> val, flip;<br>        &#125;<br><br>        <span class="hljs-type">Node</span> <span class="hljs-variable">root</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>();<br><br>        <span class="hljs-keyword">void</span> <span class="hljs-title function_">upDate</span><span class="hljs-params">(Node r, <span class="hljs-type">int</span> le, <span class="hljs-type">int</span> ri, <span class="hljs-type">int</span> L, <span class="hljs-type">int</span> R, <span class="hljs-type">int</span> v)</span> &#123;<br>            <span class="hljs-keyword">if</span> (le &gt;= L &amp;&amp; ri &lt;= R) &#123;<br>                r.val = v;<br>                r.flip = v;<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>            pushDown(r);<br>            <span class="hljs-type">int</span> <span class="hljs-variable">mid</span> <span class="hljs-operator">=</span> (le + ri) / <span class="hljs-number">2</span>;<br>            <span class="hljs-keyword">if</span> (mid &gt;= L) upDate(r.ls, le, mid, L, R, v);<br>            <span class="hljs-keyword">if</span> (mid &lt; R) upDate(r.rs, mid + <span class="hljs-number">1</span>, ri, L, R, v);<br>            pushUp(r);<br>        &#125;<br><br><br>        <span class="hljs-type">int</span> <span class="hljs-title function_">query</span><span class="hljs-params">(Node r, <span class="hljs-type">int</span> le, <span class="hljs-type">int</span> ri, <span class="hljs-type">int</span> L, <span class="hljs-type">int</span> R)</span> &#123;<br>            <span class="hljs-keyword">if</span> (le &gt;= L &amp;&amp; ri &lt;= R) &#123;<br>                <span class="hljs-keyword">return</span> r.val;<br>            &#125;<br>            pushDown(r);<br>            <span class="hljs-type">int</span> <span class="hljs-variable">mid</span> <span class="hljs-operator">=</span> (le + ri) / <span class="hljs-number">2</span>;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">ans</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">if</span> (mid &gt;= L) ans = Math.max(ans, query(r.ls, le, mid, L, R));<br>            <span class="hljs-keyword">if</span> (mid &lt; R) ans = Math.max(ans, query(r.rs, mid + <span class="hljs-number">1</span>, ri, L, R));<br>            <span class="hljs-keyword">return</span> ans;<br>        &#125;<br><br>        <span class="hljs-keyword">void</span> <span class="hljs-title function_">pushDown</span><span class="hljs-params">(Node node)</span> &#123;<br>            <span class="hljs-keyword">if</span> (node.ls == <span class="hljs-literal">null</span>) node.ls = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>();<br>            <span class="hljs-keyword">if</span> (node.rs == <span class="hljs-literal">null</span>) node.rs = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>();<br>            <span class="hljs-keyword">if</span> (node.flip == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span>;<br>            node.ls.val = node.ls.flip = node.flip;<br>            node.rs.val = node.rs.flip = node.flip;<br>            node.flip = <span class="hljs-number">0</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">void</span> <span class="hljs-title function_">pushUp</span><span class="hljs-params">(Node r)</span> &#123;<br>            r.val = Math.max(r.ls.val, r.rs.val);<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="后缀数组">后缀数组</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.*;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SuffixArray</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String[] suffixes;<span class="hljs-comment">//后缀数组</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> N;<span class="hljs-comment">//字符串和数组的长度</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">SuffixArray</span><span class="hljs-params">(String s)</span> &#123;<br>        N = s.length();<br>        suffixes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[N];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; N; i++) &#123;<br>            suffixes[i] = s.substring(i);<br>        &#125;<br>        Arrays.sort(suffixes);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 数组长度|字符串长度</span><br><span class="hljs-comment">     **/</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">length</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> N;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> i 后缀数组索引</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 后缀字符串</span><br><span class="hljs-comment">     */</span><br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">select</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span> &#123;<br>        <span class="hljs-keyword">return</span> suffixes[i];<br>    &#125;<br><br>    <span class="hljs-comment">/***</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> i</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> selcet(i)的索引</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">index</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span> &#123;<br>        <span class="hljs-keyword">return</span> N - suffixes[i].length();<br>    &#125;<br><br>    <span class="hljs-comment">/***</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span>小于键key的后缀数量</span><br><span class="hljs-comment">     */</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">rank</span><span class="hljs-params">(String key)</span> &#123;<br>        <span class="hljs-comment">//二分查找</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">left</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, right = N - <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span> (left &lt;= right) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">mid</span> <span class="hljs-operator">=</span> (left + right) &gt;&gt; <span class="hljs-number">1</span>;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">cmp</span> <span class="hljs-operator">=</span> key.compareTo(suffixes[mid]);<br>            <span class="hljs-keyword">if</span> (cmp &lt; <span class="hljs-number">0</span>) &#123;<br>                right = mid - <span class="hljs-number">1</span>;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (cmp &gt; <span class="hljs-number">0</span>) &#123;<br>                left = mid + <span class="hljs-number">1</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">return</span> mid;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> left;<br>    &#125;<br><br>    <span class="hljs-comment">/***</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> s</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> t</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span>两个字符串的最长公共前缀</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">lcp</span><span class="hljs-params">(String s, String t)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">N</span> <span class="hljs-operator">=</span> Math.min(s.length(), t.length());<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; N; i++) &#123;<br>            <span class="hljs-keyword">if</span> (s.charAt(i) != t.charAt(i)) <span class="hljs-keyword">return</span> i;<br>        &#125;<br>        <span class="hljs-keyword">return</span> N;<br>    &#125;<br><br>    <span class="hljs-comment">/***</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> i</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 后缀数组相邻元素suffixes[i]与suffixes[i-1]的最长公共前缀</span><br><span class="hljs-comment">     */</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">lcp</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span> &#123;<br>        <span class="hljs-keyword">return</span> lcp(suffixes[i], suffixes[i - <span class="hljs-number">1</span>]);<br>    &#125;<br><br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="单调栈-单调队列">单调栈/单调队列</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//单调栈（leetcode907）</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">mod</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>) <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">sumSubarrayMins</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr)</span> &#123;<br>        <span class="hljs-type">var</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[arr.length];<br>        <span class="hljs-type">var</span> <span class="hljs-variable">l</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[arr.length];<br>        Arrays.fill(l, -<span class="hljs-number">1</span>);<br>        Arrays.fill(r, arr.length);<br>        <span class="hljs-type">var</span> <span class="hljs-variable">stack</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayDeque</span>&lt;Integer&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>            <span class="hljs-keyword">while</span> (!stack.isEmpty() &amp;&amp; arr[stack.peekLast()] &gt;= arr[i]) &#123;<br>                r[stack.pollLast()] = i;<br>            &#125;<br>            stack.addLast(i);<br>        &#125;<br>        stack.clear();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> arr.length - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>            <span class="hljs-keyword">while</span> (!stack.isEmpty() &amp;&amp; arr[stack.peekLast()] &gt; arr[i]) &#123;<br>                l[stack.pollLast()] = i;<br>            &#125;<br>            stack.addLast(i);<br>        &#125;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">ans</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>            ans += (i - l[i]) *<span class="hljs-number">1L</span>* (r[i] - i) * arr[i] % mod;<br>            ans %= mod;<br>        &#125;<br>        <span class="hljs-keyword">return</span> (<span class="hljs-type">int</span>)ans;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//单调栈(LC1124)另一种思路，求最长</span><br>func <span class="hljs-title function_">longestWPI</span><span class="hljs-params">(hours []<span class="hljs-type">int</span>)</span> (ans <span class="hljs-type">int</span>) &#123;<br>    n := len(hours)<br>    sum := make([]<span class="hljs-type">int</span>, n+<span class="hljs-number">1</span>)<br>    stk := []<span class="hljs-type">int</span>&#123;<span class="hljs-number">0</span>&#125;<br>    <span class="hljs-keyword">for</span> i, v := range hours &#123;<br>        <span class="hljs-keyword">if</span> v &gt; <span class="hljs-number">8</span> &#123;<br>            sum[i+<span class="hljs-number">1</span>]++<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            sum[i+<span class="hljs-number">1</span>]--<br>        &#125;<br>        sum[i+<span class="hljs-number">1</span>] += sum[i]<br>        <span class="hljs-keyword">if</span> sum[i+<span class="hljs-number">1</span>] &lt; sum[stk[len(stk)-<span class="hljs-number">1</span>]] &#123;<br>            stk = append(stk, i+<span class="hljs-number">1</span>)<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span> i := n; i &gt;= <span class="hljs-number">1</span>; i-- &#123;<br>        <span class="hljs-keyword">for</span> <span class="hljs-title function_">len</span><span class="hljs-params">(stk)</span> != <span class="hljs-number">0</span> &amp;&amp; sum[i] &gt; sum[stk[len(stk)-<span class="hljs-number">1</span>]] &#123;<br>            ans = max(ans, i-stk[len(stk)-<span class="hljs-number">1</span>])<br>            stk = stk[<span class="hljs-number">0</span>:len(stk)-<span class="hljs-number">1</span>]<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span><br>&#125;<br><br>func <span class="hljs-title function_">max</span><span class="hljs-params">(a, b <span class="hljs-type">int</span>)</span> <span class="hljs-type">int</span> &#123; <span class="hljs-keyword">if</span> b &gt; a &#123; <span class="hljs-keyword">return</span> b &#125;; <span class="hljs-keyword">return</span> a &#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//单调队列（leetcode239）</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] maxSlidingWindow(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> k) &#123;<br>        <span class="hljs-type">var</span> <span class="hljs-variable">deque</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayDeque</span>&lt;Integer&gt;();<br>        <span class="hljs-type">var</span> <span class="hljs-variable">ans</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[nums.length - k + <span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">var</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; nums.length; i++) &#123;<br>            <span class="hljs-keyword">if</span> (!deque.isEmpty() &amp;&amp; deque.peekFirst() &lt;= i - k) deque.pollFirst();<br>            <span class="hljs-keyword">while</span> (!deque.isEmpty() &amp;&amp; nums[deque.peekLast()] &lt; nums[i]) deque.pollLast();<br>            deque.addLast(i);<br>            <span class="hljs-keyword">if</span> (i &gt;= k - <span class="hljs-number">1</span>) ans[i - k + <span class="hljs-number">1</span>] = nums[deque.peekFirst()];<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">//二维单调队列 LC2373</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">largestLocal</span><span class="hljs-params">(grid [][]<span class="hljs-type">int</span>)</span></span> [][]<span class="hljs-type">int</span> &#123;<br>n, m := <span class="hljs-built_in">len</span>(grid), <span class="hljs-built_in">len</span>(grid[<span class="hljs-number">0</span>])<br>f := <span class="hljs-built_in">make</span>([][]<span class="hljs-type">int</span>, n)<br><span class="hljs-keyword">for</span> i := <span class="hljs-keyword">range</span> f &#123;<br>f[i] = <span class="hljs-built_in">make</span>([]<span class="hljs-type">int</span>, m)<br>&#125;<br><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; n; i++ &#123;<br><span class="hljs-keyword">var</span> q []<span class="hljs-type">int</span><br><span class="hljs-keyword">for</span> j := <span class="hljs-number">0</span>; j &lt; m; j++ &#123;<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(q) != <span class="hljs-number">0</span> &amp;&amp; j-q[<span class="hljs-number">0</span>] &gt;= <span class="hljs-number">3</span> &#123;<br>q = q[<span class="hljs-number">1</span>:]<br>&#125;<br><span class="hljs-keyword">for</span> <span class="hljs-built_in">len</span>(q) != <span class="hljs-number">0</span> &amp;&amp; grid[i][q[<span class="hljs-built_in">len</span>(q)<span class="hljs-number">-1</span>]] &lt; grid[i][j] &#123;<br>q = q[:<span class="hljs-built_in">len</span>(q)<span class="hljs-number">-1</span>]<br>&#125;<br>q = <span class="hljs-built_in">append</span>(q, j)<br><span class="hljs-keyword">if</span> j &gt;= <span class="hljs-number">2</span> &#123;<br>f[i][j] = grid[i][q[<span class="hljs-number">0</span>]]<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; m; i++ &#123;<br><span class="hljs-keyword">var</span> q []<span class="hljs-type">int</span><br><span class="hljs-keyword">for</span> j := <span class="hljs-number">0</span>; j &lt; n; j++ &#123;<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(q) != <span class="hljs-number">0</span> &amp;&amp; j-q[<span class="hljs-number">0</span>] &gt;= <span class="hljs-number">3</span> &#123;<br>q = q[<span class="hljs-number">1</span>:]<br>&#125;<br><span class="hljs-keyword">for</span> <span class="hljs-built_in">len</span>(q) != <span class="hljs-number">0</span> &amp;&amp; f[q[<span class="hljs-built_in">len</span>(q)<span class="hljs-number">-1</span>]][i] &lt; f[j][i] &#123;<br>q = q[:<span class="hljs-built_in">len</span>(q)<span class="hljs-number">-1</span>]<br>&#125;<br>q = <span class="hljs-built_in">append</span>(q, j)<br><span class="hljs-keyword">if</span> j &gt;= <span class="hljs-number">2</span> &#123;<br>grid[j][i] = f[q[<span class="hljs-number">0</span>]][i]<br>&#125;<br>&#125;<br>&#125;<br>ans := <span class="hljs-built_in">make</span>([][]<span class="hljs-type">int</span>, n<span class="hljs-number">-2</span>)<br><span class="hljs-keyword">for</span> i := <span class="hljs-keyword">range</span> ans &#123;<br>ans[i] = <span class="hljs-built_in">make</span>([]<span class="hljs-type">int</span>, m<span class="hljs-number">-2</span>)<br>&#125;<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">2</span>; i &lt; n; i++ &#123;<br><span class="hljs-keyword">for</span> j := <span class="hljs-number">2</span>; j &lt; m; j++ &#123;<br>ans[i<span class="hljs-number">-2</span>][j<span class="hljs-number">-2</span>] = grid[i][j]<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> ans<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="数位DP">数位DP</h3><img src="https://ykexc-1314584214.cos.ap-nanjing.myqcloud.com/image-20221018105851801.png" alt="image-20221018105851801" style="zoom:80%;" /><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java">数位DP经典模板<br><span class="hljs-type">int</span> <span class="hljs-title function_">f</span><span class="hljs-params">(<span class="hljs-type">int</span> i, <span class="hljs-type">int</span> cnt, <span class="hljs-type">boolean</span> isLimit, <span class="hljs-type">boolean</span> isNum, <span class="hljs-type">int</span> k)</span> &#123;<br>        <span class="hljs-keyword">if</span> (i == s.length) <span class="hljs-keyword">return</span> cnt;<br>        <span class="hljs-keyword">if</span> (!isLimit &amp;&amp; dp[i][cnt] &gt;= <span class="hljs-number">0</span> &amp;&amp; isNum) <span class="hljs-keyword">return</span> dp[i][cnt];<br>        <span class="hljs-type">int</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span> (!isNum) res += f(i + <span class="hljs-number">1</span>, cnt, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, k);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">up</span> <span class="hljs-operator">=</span> isLimit ? s[i] - <span class="hljs-string">&#x27;0&#x27;</span> : <span class="hljs-number">9</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> isNum ? <span class="hljs-number">0</span> : <span class="hljs-number">1</span>; j &lt;= up; j++) &#123;<br>            res += f(i + <span class="hljs-number">1</span>, cnt + (j == k ? <span class="hljs-number">1</span> : <span class="hljs-number">0</span>), isLimit &amp;&amp; j == up, <span class="hljs-literal">true</span>, k);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (!isLimit &amp;&amp; isNum) dp[i][cnt] = res;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br><br><br><span class="hljs-comment">//leetcode902、233、600、1012</span><br></code></pre></td></tr></table></figure><h3 id="区间dp">区间dp</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//戳气球</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">maxCoins</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br>        <span class="hljs-type">var</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> nums.length;<br>        <span class="hljs-type">var</span> <span class="hljs-variable">nums1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n + <span class="hljs-number">2</span>];<br>        System.arraycopy(nums, <span class="hljs-number">0</span>, nums1, <span class="hljs-number">1</span>, n);<br>        nums1[<span class="hljs-number">0</span>] = nums1[n + <span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>        <span class="hljs-type">var</span> <span class="hljs-variable">dp</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n + <span class="hljs-number">2</span>][n + <span class="hljs-number">2</span>];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">var</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> n; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">var</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> i + <span class="hljs-number">1</span>; j &lt;= n + <span class="hljs-number">1</span>; j++) &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">var</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> i + <span class="hljs-number">1</span>; k &lt; j; k++) &#123;<br>                    dp[i][j] = Math.max(dp[i][j], dp[i][k] + dp[k][j] + nums1[i] * nums1[j] * nums1[k]);<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> dp[<span class="hljs-number">0</span>][n + <span class="hljs-number">1</span>];<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="状压dp">状压dp</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//参加考试的最大学生数</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">maxStudents</span><span class="hljs-params">(<span class="hljs-type">char</span>[][] seats)</span> &#123;<br>        <span class="hljs-type">int</span>[] valid = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[seats.length];<br>        <span class="hljs-type">int</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> seats.length;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> seats[<span class="hljs-number">0</span>].length;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; m; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; n; j++) &#123;<br>                valid[i] &lt;&lt;= <span class="hljs-number">1</span>;<br>                valid[i] |= (seats[i][j] == <span class="hljs-string">&#x27;.&#x27;</span> ? <span class="hljs-number">1</span> : <span class="hljs-number">0</span>);<br>            &#125;<br>        &#125;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">ans</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span>[][] dp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[m][<span class="hljs-number">1</span> &lt;&lt; n];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; m; i++) Arrays.fill(dp[i], -<span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; m; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">1</span> &lt;&lt; n; j++) &#123;<br>                <span class="hljs-keyword">if</span> ((j &amp; valid[i]) == j &amp;&amp; (j &amp; j &lt;&lt; <span class="hljs-number">1</span>) == <span class="hljs-number">0</span>) &#123;<br>                    <span class="hljs-keyword">if</span> (i == <span class="hljs-number">0</span>) dp[i][j] = Integer.bitCount(j);<br>                    <span class="hljs-keyword">else</span> &#123;<br>                        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; k &lt; <span class="hljs-number">1</span> &lt;&lt; n; k++) &#123;<br>                            <span class="hljs-keyword">if</span> (dp[i - <span class="hljs-number">1</span>][k] != -<span class="hljs-number">1</span> &amp;&amp; (j &amp; k &gt;&gt; <span class="hljs-number">1</span>) == <span class="hljs-number">0</span> &amp;&amp; (k &amp; j &gt;&gt; <span class="hljs-number">1</span>) == <span class="hljs-number">0</span>) dp[i][j] = Math.max(dp[i][j], dp[i - <span class="hljs-number">1</span>][k] + Integer.bitCount(j));<br>                        &#125;<br>                    &#125;<br>                &#125;<br>                ans = Math.max(dp[i][j], ans);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//lc526</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">countArrangement2</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br>        <span class="hljs-type">var</span> <span class="hljs-variable">mask</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span> &lt;&lt; n;<br>        <span class="hljs-type">var</span> <span class="hljs-variable">dp</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n + <span class="hljs-number">1</span>][mask];<br>        dp[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; mask; j++) &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; k &lt;= n; k++) &#123;<br>                    <span class="hljs-keyword">if</span> ((j &gt;&gt; (k - <span class="hljs-number">1</span>) &amp; <span class="hljs-number">1</span>) == <span class="hljs-number">0</span>) <span class="hljs-keyword">continue</span>;<br>                    <span class="hljs-keyword">if</span> (k % i != <span class="hljs-number">0</span> &amp;&amp; i % k != <span class="hljs-number">0</span>) <span class="hljs-keyword">continue</span>;<br>                    dp[i][j] += dp[i - <span class="hljs-number">1</span>][j &amp; ~(<span class="hljs-number">1</span> &lt;&lt; k - <span class="hljs-number">1</span>)];<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> dp[n][mask - <span class="hljs-number">1</span>];<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="拓扑排序">拓扑排序</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//lc 课程表</span><br>List&lt;Integer&gt;[] edges;<br>    <span class="hljs-type">int</span>[] visited;<br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">valid</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">canFinish</span><span class="hljs-params">(<span class="hljs-type">int</span> numCourses, <span class="hljs-type">int</span>[][] prerequisites)</span> &#123;<br>        edges = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>[numCourses];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; numCourses; ++i) edges[i] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        visited = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[numCourses];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span>[] info : prerequisites) &#123;<br>            edges[info[<span class="hljs-number">1</span>]].add(info[<span class="hljs-number">0</span>]);<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; numCourses &amp;&amp; valid; ++i) &#123;<br>            <span class="hljs-keyword">if</span> (visited[i] == <span class="hljs-number">0</span>) &#123;<br>                dfs(i);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> valid;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> u)</span> &#123;<br>        visited[u] = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> v: edges[u]) &#123;<br>            <span class="hljs-keyword">if</span> (visited[v] == <span class="hljs-number">0</span>) dfs(v);<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (visited[v] == <span class="hljs-number">1</span>) &#123;<br>                valid = <span class="hljs-literal">false</span>;<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>        &#125;<br>        visited[u] = <span class="hljs-number">2</span>;<br>    &#125;<br><span class="hljs-comment">//课程表二</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] findOrder(<span class="hljs-type">int</span> numCourses, <span class="hljs-type">int</span>[][] prerequisites) &#123;<br>        List&lt;Integer&gt;[] map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">List</span>[numCourses];<br>        <span class="hljs-type">var</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[numCourses];<br>        <span class="hljs-type">var</span> <span class="hljs-variable">ans</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Integer&gt;();<br>        <span class="hljs-type">var</span> <span class="hljs-variable">queue</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayDeque</span>&lt;Integer&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; numCourses; i++) map[i] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Integer&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span>[] prerequisite : prerequisites) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> prerequisite[<span class="hljs-number">0</span>], y = prerequisite[<span class="hljs-number">1</span>];<br>            r[x]++;<br>            map[y].add(x);<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; numCourses; i++) <span class="hljs-keyword">if</span> (r[i] == <span class="hljs-number">0</span>) queue.addLast(i);<br>        <span class="hljs-keyword">while</span> (!queue.isEmpty()) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> queue.pollFirst();<br>            <span class="hljs-keyword">if</span> (r[t] == <span class="hljs-number">0</span>) ans.add(t);<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i : map[t]) &#123;<br>                r[i]--;<br>                <span class="hljs-keyword">if</span> (r[i] == <span class="hljs-number">0</span>)<br>                queue.addLast(i);<br>            &#125;<br>        &#125;<br>        <span class="hljs-type">int</span>[] ints = ans.stream().mapToInt(a -&gt; a).toArray();<br>        <span class="hljs-keyword">return</span> ans.size() == numCourses ? ints : <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;&#125;;<br>    &#125;<br><br><span class="hljs-comment">//深搜</span><br>List&lt;Integer&gt; ans = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] findOrder(<span class="hljs-type">int</span> numCourses, <span class="hljs-type">int</span>[][] prerequisites) &#123;<br>        List&lt;Integer&gt;[] map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">List</span>[numCourses];<br>        <span class="hljs-type">var</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[numCourses];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; numCourses; i++) map[i] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Integer&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span>[] prerequisite : prerequisites) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> prerequisite[<span class="hljs-number">0</span>], y = prerequisite[<span class="hljs-number">1</span>];<br>            r[x]++;<br>            map[y].add(x);<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; numCourses; i++) <span class="hljs-keyword">if</span> (r[i] == <span class="hljs-number">0</span>) dfs(i, map, r);<br>        System.out.println(ans.size());<br>        <span class="hljs-type">int</span>[] ints = ans.stream().mapToInt(a -&gt; a).toArray();<br>        <span class="hljs-keyword">return</span> ans.size() == numCourses ? ints : <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;&#125;;<br>    &#125;<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> i, List&lt;Integer&gt;[] map, <span class="hljs-type">int</span>[] r)</span> &#123;<br>        ans.add(i);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> x : map[i]) &#123;<br>            <span class="hljs-keyword">if</span> (--r[x] == <span class="hljs-number">0</span>) &#123;<br>                dfs(x, map, r);<br>                r[x]++;<br>            &#125;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><blockquote><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>无向图</mtext><mi>t</mi><mi>o</mi><mi>p</mi><mi>S</mi><mi>o</mi><mi>r</mi><mi>t</mi></mrow><annotation encoding="application/x-tex">无向图topSort</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord cjk_fallback">无向图</span><span class="mord mathnormal">t</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.05764em;">pS</span><span class="mord mathnormal" style="margin-right:0.02778em;">or</span><span class="mord mathnormal">t</span></span></span></span></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//LC收集树中金币</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">collectTheCoins</span><span class="hljs-params">(<span class="hljs-type">int</span>[] coins, <span class="hljs-type">int</span>[][] edges)</span> &#123;<br>        <span class="hljs-type">var</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> coins.length;<br>        List&lt;Integer&gt;[] g = <span class="hljs-keyword">new</span> <span class="hljs-title class_">List</span>[n];<br>        Arrays.setAll(g, e -&gt; <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;());<br>        <span class="hljs-type">var</span> <span class="hljs-variable">deg</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> edge : edges) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> edge[<span class="hljs-number">0</span>], y = edge[<span class="hljs-number">1</span>];<br>            g[x].add(y);<br>            g[y].add(x);<br>            deg[x]++;<br>            deg[y]++;<br>        &#125;<br>        <span class="hljs-comment">//先topSort一遍去除没用的节点</span><br>        <span class="hljs-type">var</span> <span class="hljs-variable">queue</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayDeque</span>&lt;Integer&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i++)<br>            <span class="hljs-keyword">if</span> (deg[i] == <span class="hljs-number">1</span> &amp;&amp; coins[i] == <span class="hljs-number">0</span>)<br>                queue.addLast(i);  <span class="hljs-comment">//因为是无向图所以从入度为1开始</span><br>        <span class="hljs-keyword">while</span> (!queue.isEmpty()) &#123;<br>            <span class="hljs-type">var</span> <span class="hljs-variable">poll</span> <span class="hljs-operator">=</span> queue.pollFirst();<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> x : g[poll]) &#123;<br>                <span class="hljs-keyword">if</span> (--deg[x] == <span class="hljs-number">1</span> &amp;&amp; coins[x] == <span class="hljs-number">0</span>) &#123;<br>                    queue.addLast(x);<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//再次拓扑排序,剥掉外面的两层</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i++)<br>            <span class="hljs-keyword">if</span> (deg[i] == <span class="hljs-number">1</span> &amp;&amp; coins[i] == <span class="hljs-number">1</span>) queue.addLast(i);<br>        <span class="hljs-keyword">if</span> (queue.size() &lt;= <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">var</span> <span class="hljs-variable">time</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n];  <span class="hljs-comment">//根据时间戳判断位于第几层</span><br>        <span class="hljs-keyword">while</span> (!queue.isEmpty()) &#123;<br>            <span class="hljs-type">var</span> <span class="hljs-variable">poll</span> <span class="hljs-operator">=</span> queue.pollFirst();<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> x : g[poll]) &#123;<br>                <span class="hljs-keyword">if</span> (--deg[x] == <span class="hljs-number">1</span>) &#123;<br>                    queue.addLast(x);<br>                    time[x] = time[poll] + <span class="hljs-number">1</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-type">var</span> <span class="hljs-variable">ans</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> e : edges) ans += time[e[<span class="hljs-number">0</span>]] &gt;= <span class="hljs-number">2</span> &amp;&amp; time[e[<span class="hljs-number">1</span>]] &gt;= <span class="hljs-number">2</span> ? <span class="hljs-number">2</span> : <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="数组模拟静态链表">数组模拟静态链表</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">N</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>) <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>;<span class="hljs-comment">//数据规模</span><br><span class="hljs-keyword">static</span> <span class="hljs-type">int</span> head;<span class="hljs-comment">//头结点下标</span><br><span class="hljs-keyword">static</span> <span class="hljs-type">int</span> idx;<span class="hljs-comment">//表示存储当前结点已经使用结点的下一个结点</span><br><span class="hljs-keyword">static</span> <span class="hljs-type">int</span>[] e = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[N];<span class="hljs-comment">//结点的值</span><br><span class="hljs-keyword">static</span> <span class="hljs-type">int</span>[] ne = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[N];<span class="hljs-comment">//结点的下一个结点</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 初始化</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span> <span class="hljs-params">()</span> &#123;<br>head = -<span class="hljs-number">1</span>;<span class="hljs-comment">//没有头结点</span><br>idx = <span class="hljs-number">0</span>;<span class="hljs-comment">//没有存入数据</span><br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 向头部插入val</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> val</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addToHead</span><span class="hljs-params">(<span class="hljs-type">int</span> val)</span> &#123;<br>e[idx] = val;<br>ne[idx] = head;<br>head = idx;<br>idx++;<br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 向k的下标的后添加一个元素</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> k</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> val</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-type">int</span> k, <span class="hljs-type">int</span> val)</span> &#123;<br>e[idx] = val;   <span class="hljs-comment">// 赋值</span><br>       ne[idx] = head; <span class="hljs-comment">// 插入之前头结点的前面</span><br>       head = idx;     <span class="hljs-comment">// 更新头结点信息</span><br>       idx++;          <span class="hljs-comment">// idx向右移动</span><br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 删除下标为k的下一个元素</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> k</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">remove</span><span class="hljs-params">(<span class="hljs-type">int</span> k)</span> &#123;<br>ne[k] = ne[ne[k]];<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="树形dp">树形dp</h3><blockquote><p>lc6294等等</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//树的直径</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><br>    <span class="hljs-type">int</span>[] e, ne, h;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">idx</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">ans</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, index = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">N</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>) <span class="hljs-number">1e4</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">treeDiameter</span><span class="hljs-params">(<span class="hljs-type">int</span>[][] edges)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> edges.length;<br>        e = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">2</span> * N + <span class="hljs-number">10</span>];<br>        ne = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">2</span> * N + <span class="hljs-number">10</span>];<br>        h = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">2</span> * N + <span class="hljs-number">10</span>];<br>        Arrays.fill(h, -<span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> edge : edges) &#123;<br>            add(edge[<span class="hljs-number">0</span>], edge[<span class="hljs-number">1</span>]);<br>            add(edge[<span class="hljs-number">1</span>], edge[<span class="hljs-number">0</span>]);<br>        &#125;<br>        dfs(<span class="hljs-number">0</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br>        dfs(index, -<span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> u, <span class="hljs-type">int</span> p, <span class="hljs-type">int</span> sum)</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> h[u]; i != -<span class="hljs-number">1</span>; i = ne[i]) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">ver</span> <span class="hljs-operator">=</span> e[i];<br>            <span class="hljs-keyword">if</span> (ver == p) <span class="hljs-keyword">continue</span>;<br>            dfs(ver, u, sum + <span class="hljs-number">1</span>);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (sum &gt; ans) &#123;<br>            ans = sum;<br>            index = u;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> &#123;<br>        e[idx] = b;<br>        ne[idx] = h[a];<br>        h[a] = idx++;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="dijkstra">dijkstra</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">networkDelayTime</span><span class="hljs-params">(<span class="hljs-type">int</span>[][] times, <span class="hljs-type">int</span> n, <span class="hljs-type">int</span> k)</span> &#123;<br>        <span class="hljs-type">var</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n + <span class="hljs-number">1</span>][n + <span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">var</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= n; i++)<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">var</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; j &lt;= n; j++)<br>                len[i][j] = i == j ? <span class="hljs-number">0</span> : <span class="hljs-number">0x3f3f3f3f</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> time : times) len[time[<span class="hljs-number">0</span>]][time[<span class="hljs-number">1</span>]] = time[<span class="hljs-number">2</span>];<br>        <span class="hljs-type">var</span> <span class="hljs-variable">w</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n + <span class="hljs-number">1</span>];<br>        Arrays.fill(w, <span class="hljs-number">0x3f3f3f3f</span>);<br>        w[k] = <span class="hljs-number">0</span>;<br>        <span class="hljs-type">var</span> <span class="hljs-variable">via</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">boolean</span>[n + <span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">var</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>            <span class="hljs-type">var</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">var</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; j &lt;= n; j++) &#123;<br>                <span class="hljs-keyword">if</span> (!via[j] &amp;&amp; (t == -<span class="hljs-number">1</span> || w[j] &lt; w[t])) t = j;<br>            &#125;<br>            via[t] = <span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">var</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; j &lt;= n; j++) &#123;<br>                w[j] = Math.min(w[j], w[t] + len[t][j]);<br>            &#125;<br>        &#125;<br>        <span class="hljs-type">var</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">var</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>            res = Math.max(res, w[i]);<br>        &#125;<br>        <span class="hljs-keyword">return</span> res &gt;= <span class="hljs-number">0x3f3f3f3f</span> ? -<span class="hljs-number">1</span> : res;<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="dijktra优化">dijktra优化</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, m = <span class="hljs-number">0</span>, N = <span class="hljs-number">1000010</span>;<br>    <span class="hljs-keyword">static</span> PriorityQueue&lt;<span class="hljs-type">int</span>[]&gt; q = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PriorityQueue</span>&lt;&gt;((a, b) -&gt; &#123;<br>        <span class="hljs-keyword">return</span> a[<span class="hljs-number">1</span>] - b[<span class="hljs-number">1</span>];<br>    &#125;);<span class="hljs-comment">//堆</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-type">int</span>[] dist = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[N];<span class="hljs-comment">//距离数组</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span>[] f = <span class="hljs-keyword">new</span> <span class="hljs-title class_">boolean</span>[N];<span class="hljs-comment">//标记数组</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-type">int</span>[] h = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[N], ne = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[N], e = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[N], w = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[N];<span class="hljs-comment">//邻接表</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">idx</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><br>    <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">Dijkstra</span><span class="hljs-params">()</span> &#123;<span class="hljs-comment">//类似广搜的过程</span><br>        Arrays.fill(dist, <span class="hljs-number">0x3f3f3f3f</span>);<br>        dist[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<span class="hljs-comment">//初始化第一个点到自身的距离</span><br>        q.offer(<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">1</span>, <span class="hljs-number">0</span>&#125;);<br>        <span class="hljs-keyword">while</span> (q.size() != <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-type">int</span>[] a = q.poll();<br>            <span class="hljs-type">int</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> a[<span class="hljs-number">0</span>], distance = a[<span class="hljs-number">1</span>];<br>            <span class="hljs-keyword">if</span> (f[t]) <span class="hljs-keyword">continue</span>;<br>            f[t] = <span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> h[t]; i != -<span class="hljs-number">1</span>; i = ne[i]) &#123;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> e[i];<br>                <span class="hljs-keyword">if</span> (dist[j] &gt; distance + w[i]) &#123;<br>                    dist[j] = distance + w[i];<br>                    q.offer(<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;j, dist[j]&#125;);<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (dist[n] != <span class="hljs-number">0x3f3f3f3f</span>) <span class="hljs-keyword">return</span> dist[n];<br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b, <span class="hljs-type">int</span> c)</span> &#123;<br>        e[idx] = b;<br>        w[idx] = c;<br>        ne[idx] = h[a];<br>        h[a] = idx++;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">buf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(System.in));<br>        String[] params = buf.readLine().split(<span class="hljs-string">&quot; &quot;</span>);<br>        n = Integer.parseInt(params[<span class="hljs-number">0</span>]);<br>        m = Integer.parseInt(params[<span class="hljs-number">1</span>]);<br>        Arrays.fill(h, -<span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= m; ++i) &#123;<br>            String[] info = buf.readLine().split(<span class="hljs-string">&quot; &quot;</span>);<br>            <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> Integer.parseInt(info[<span class="hljs-number">0</span>]);<br>            <span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> Integer.parseInt(info[<span class="hljs-number">1</span>]);<br>            <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> Integer.parseInt(info[<span class="hljs-number">2</span>]);<br>            add(a, b, c);<br>        &#125;<br>        System.out.print(Dijkstra());<br><br>    &#125;<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">*使用list数组存储</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">solve</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> in.nextInt();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> in.nextInt();<br>        List&lt;<span class="hljs-type">int</span>[]&gt;[] map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">List</span>[n + <span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt;= n; i++) &#123;<br>            map[i] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; m; i++) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> in.nextInt(), b = in.nextInt(), v = in.nextInt();<br>            map[a].add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[] &#123;b, v&#125;);<br>        &#125;<br>        <span class="hljs-type">int</span>[] va = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n + <span class="hljs-number">1</span>];<br>        <span class="hljs-type">boolean</span>[] vis = <span class="hljs-keyword">new</span> <span class="hljs-title class_">boolean</span>[n + <span class="hljs-number">1</span>];<br>        Arrays.fill(va, <span class="hljs-number">0x3f3f3f3f</span>);<br>        va[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>        PriorityQueue&lt;<span class="hljs-type">int</span>[]&gt; queue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PriorityQueue</span>&lt;&gt;((a, b) -&gt; a[<span class="hljs-number">1</span>] - b[<span class="hljs-number">1</span>]);<br>        queue.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[] &#123;<span class="hljs-number">1</span>, <span class="hljs-number">0</span>&#125;);<br>        <span class="hljs-keyword">while</span>(!queue.isEmpty()) &#123;<br>            <span class="hljs-type">int</span>[] temp = queue.poll();<br>            <span class="hljs-type">int</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> temp[<span class="hljs-number">0</span>], v = temp[<span class="hljs-number">1</span>];<br>            <span class="hljs-keyword">if</span> (vis[p]) <span class="hljs-keyword">continue</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span>[] lis : map[p]) &#123;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">pp</span> <span class="hljs-operator">=</span> lis[<span class="hljs-number">0</span>], vv = lis[<span class="hljs-number">1</span>];<br>                <span class="hljs-keyword">if</span> (va[pp] &gt; vv + v) &#123;<br>                    va[pp] = vv + v;<br>                    queue.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[] &#123;pp, va[pp]&#125;);<br>                &#125;<br>            &#125;<br>            vis[p] = <span class="hljs-literal">true</span>;  <span class="hljs-comment">//注意vis的的位置，因为有重边，就不能加一个vis一个</span><br>        &#125;<br>        out.println(va[n] == <span class="hljs-number">0x3f3f3f3f</span> ? -<span class="hljs-number">1</span> : va[n]);<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="bellmanford">bellmanford</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">void</span> <span class="hljs-title function_">bellmanFord</span><span class="hljs-params">()</span> &#123;<span class="hljs-comment">//用edges存边权, last作拷贝，防止串联</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; k; i++) &#123;<br>            System.arraycopy(dist, <span class="hljs-number">0</span>, last, <span class="hljs-number">0</span>, n + <span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; m; j++) &#123;<br>                <span class="hljs-type">Edge</span> <span class="hljs-variable">e</span> <span class="hljs-operator">=</span> edges[j];<br>                dist[e.b] = Math.min(dist[e.b], last[e.a] + e.v);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (dist[n] &gt;= <span class="hljs-number">0x3f3f3f3f</span> / <span class="hljs-number">2</span>) out.println(<span class="hljs-string">&quot;impossible&quot;</span>);<br>        <span class="hljs-keyword">else</span> out.println(dist[n]);<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="spfa">spfa</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-title function_">spfa</span><span class="hljs-params">()</span> &#123;<br>        ArrayDeque&lt;Integer&gt; queue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayDeque</span>&lt;&gt;();<br>        dist[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>        vis[<span class="hljs-number">1</span>] = <span class="hljs-literal">true</span>;<br>        queue.addLast(<span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">while</span> (!queue.isEmpty()) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">poll</span> <span class="hljs-operator">=</span> queue.pollFirst();<br>            vis[poll] = <span class="hljs-literal">false</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span>[] e : lists[poll]) &#123;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> e[<span class="hljs-number">0</span>], d = e[<span class="hljs-number">1</span>];<br>                <span class="hljs-keyword">if</span> (dist[p] &gt; d + dist[poll]) &#123;<br>                    dist[p] = d + dist[poll];<br>                    <span class="hljs-keyword">if</span> (!vis[p]) &#123;<br>                        queue.addLast(p);<br>                        vis[p] = <span class="hljs-literal">true</span>;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> dist[n];<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="floyd">floyd</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">void</span> <span class="hljs-title function_">floyd</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; k &lt;= n; k++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; j &lt;= n; j++) &#123;<br>                    d[i][j] = Math.min(d[i][j], d[i][k] + d[k][j]);<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="01BFS">01BFS</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//LC1263</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><br><br>    <span class="hljs-type">int</span> n, m;<br>    <span class="hljs-type">char</span>[][] grid;<br>    <span class="hljs-type">boolean</span>[][] vis;<br>    <span class="hljs-type">int</span>[][] dirs = &#123;&#123;<span class="hljs-number">0</span>, <span class="hljs-number">1</span>&#125;, &#123;<span class="hljs-number">0</span>, -<span class="hljs-number">1</span>&#125;, &#123;<span class="hljs-number">1</span>, <span class="hljs-number">0</span>&#125;, &#123;-<span class="hljs-number">1</span>, <span class="hljs-number">0</span>&#125;&#125;;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">minPushBox</span><span class="hljs-params">(<span class="hljs-type">char</span>[][] grid)</span> &#123;<br>        <span class="hljs-built_in">this</span>.grid = grid;<br>        n = grid.length;<br>        m = grid[<span class="hljs-number">0</span>].length;<br>        vis = <span class="hljs-keyword">new</span> <span class="hljs-title class_">boolean</span>[n * m][n * m];<br>        <span class="hljs-type">int</span> <span class="hljs-variable">sx</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>, sy = -<span class="hljs-number">1</span>, bx = -<span class="hljs-number">1</span>, by = -<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; m; j++) &#123;<br>                <span class="hljs-keyword">if</span> (grid[i][j] == <span class="hljs-string">&#x27;S&#x27;</span>) &#123;<br>                    sx = i;<br>                    sy = j;<br>                &#125;<br>                <span class="hljs-keyword">if</span> (grid[i][j] == <span class="hljs-string">&#x27;B&#x27;</span>) &#123;<br>                    bx = i;<br>                    by = j;<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        Deque&lt;<span class="hljs-type">int</span>[]&gt; deque = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayDeque</span>&lt;&gt;();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">sP</span> <span class="hljs-operator">=</span> cal(sx, sy), sB = cal(bx, by);<br>        deque.addLast(<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;sP, sB, <span class="hljs-number">0</span>&#125;);<br>        vis[sP][sB] = <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">while</span> (!deque.isEmpty()) &#123;<br>            <span class="hljs-type">int</span>[] poll = deque.pollFirst();<br>            <span class="hljs-type">int</span>[] person = deCal(poll[<span class="hljs-number">0</span>]), box = deCal(poll[<span class="hljs-number">1</span>]);<br>            <span class="hljs-type">int</span> <span class="hljs-variable">psx</span> <span class="hljs-operator">=</span> person[<span class="hljs-number">0</span>], psy = person[<span class="hljs-number">1</span>], bsx = box[<span class="hljs-number">0</span>], bsy = box[<span class="hljs-number">1</span>], d = poll[<span class="hljs-number">2</span>];<br>            <span class="hljs-keyword">if</span> (grid[bsx][bsy] == <span class="hljs-string">&#x27;T&#x27;</span>) <span class="hljs-keyword">return</span> d;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> dir : dirs) &#123;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">psxX</span> <span class="hljs-operator">=</span> psx + dir[<span class="hljs-number">0</span>], psyY = psy + dir[<span class="hljs-number">1</span>];<br>                <span class="hljs-keyword">if</span> (bsx == psxX &amp;&amp; bsy == psyY) &#123;<br>                    <span class="hljs-type">int</span> <span class="hljs-variable">bsxX</span> <span class="hljs-operator">=</span> bsx + dir[<span class="hljs-number">0</span>], bsyY = bsy + dir[<span class="hljs-number">1</span>];<br>                    <span class="hljs-keyword">if</span> (!checkValid(psxX, psyY, bsxX, bsyY)) <span class="hljs-keyword">continue</span>;<br>                    <span class="hljs-type">int</span> <span class="hljs-variable">P</span> <span class="hljs-operator">=</span> cal(psxX, psyY), B = cal(bsxX, bsyY);<br>                    vis[P][B] = <span class="hljs-literal">true</span>;<br>                    deque.addLast(<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;P, B, d + <span class="hljs-number">1</span>&#125;);<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-keyword">if</span> (!checkValid(psxX, psyY, bsx, bsy)) <span class="hljs-keyword">continue</span>;<br>                    <span class="hljs-type">int</span> <span class="hljs-variable">P</span> <span class="hljs-operator">=</span> cal(psxX, psyY), B = poll[<span class="hljs-number">1</span>];<br>                    vis[P][B] = <span class="hljs-literal">true</span>;<br>                    deque.addFirst(<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;P, B, d&#125;);<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-type">int</span> <span class="hljs-title function_">cal</span><span class="hljs-params">(<span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j)</span> &#123;<br>        <span class="hljs-keyword">return</span> i * m + j;<br>    &#125;<br><br>    <span class="hljs-type">int</span>[] deCal(<span class="hljs-type">int</span> v) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;v / m, v % m&#125;;<br>    &#125;<br><br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">checkValid</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y, <span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j)</span> &#123;<br>        <span class="hljs-keyword">return</span> x &gt;= <span class="hljs-number">0</span> &amp;&amp; x &lt; n &amp;&amp; y &gt;= <span class="hljs-number">0</span> &amp;&amp; y &lt; m &amp;&amp; i &gt;= <span class="hljs-number">0</span> &amp;&amp; i &lt; n &amp;&amp; j &gt;= <span class="hljs-number">0</span> &amp;&amp; j &lt; m &amp;&amp; grid[i][j] != <span class="hljs-string">&#x27;#&#x27;</span> &amp;&amp; !vis[cal(x, y)][cal(i, j)] &amp;&amp; grid[x][y] != <span class="hljs-string">&#x27;#&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="最小生成树-Kruskal">最小生成树(Kruskal)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> leetcode;<br><br><span class="hljs-keyword">import</span> java.util.PriorityQueue;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 最小生成树</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LeetCode1584</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *Kruskal</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">minCostConnectPoints</span><span class="hljs-params">(<span class="hljs-type">int</span>[][] points)</span> &#123;<br>        <span class="hljs-type">var</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> points.length;<br>        <span class="hljs-type">var</span> <span class="hljs-variable">heap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PriorityQueue</span>&lt;Edge&gt;((e1, e2) -&gt; e1.cost - e2.cost);<br>        <span class="hljs-type">UnionFind</span> <span class="hljs-variable">unionFind</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnionFind</span>(n);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">var</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">var</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> i + <span class="hljs-number">1</span>; j &lt; n; j++) &#123;<br>                <span class="hljs-type">var</span> <span class="hljs-variable">e1</span> <span class="hljs-operator">=</span> points[i];<br>                <span class="hljs-type">var</span> <span class="hljs-variable">e2</span> <span class="hljs-operator">=</span> points[j];<br>                <span class="hljs-type">int</span> <span class="hljs-variable">cost</span> <span class="hljs-operator">=</span> Math.abs(e1[<span class="hljs-number">0</span>] - e2[<span class="hljs-number">0</span>]) + Math.abs(e1[<span class="hljs-number">1</span>] - e2[<span class="hljs-number">1</span>]);<br>                <span class="hljs-type">Edge</span> <span class="hljs-variable">edge</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Edge</span>(i, j, cost);<br>                heap.add(edge);<br>            &#125;<br>        &#125;<br>        <span class="hljs-type">var</span> <span class="hljs-variable">ans</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">var</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (!heap.isEmpty()) &#123;<br>            <span class="hljs-type">Edge</span> <span class="hljs-variable">poll</span> <span class="hljs-operator">=</span> heap.poll();<br>            <span class="hljs-type">var</span> <span class="hljs-variable">point1</span> <span class="hljs-operator">=</span> poll.point1;<br>            <span class="hljs-type">var</span> <span class="hljs-variable">point2</span> <span class="hljs-operator">=</span> poll.point2;<br>            <span class="hljs-type">var</span> <span class="hljs-variable">cost</span> <span class="hljs-operator">=</span> poll.cost;<br>            <span class="hljs-keyword">if</span> (!unionFind.check(point2, point1)) &#123;<br>                ans += cost;<br>                unionFind.union(point1, point2);<br>                k++;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (k == n - <span class="hljs-number">1</span>) <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br><br><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UnionFind</span> &#123;<br>        <span class="hljs-type">int</span>[] union;<br>        <span class="hljs-type">int</span>[] rank;<br>        <span class="hljs-type">int</span> size;<br><br>        UnionFind(<span class="hljs-type">int</span> size) &#123;<br>            <span class="hljs-built_in">this</span>.size = size;<br>            union = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[size];<br>            rank = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[size];<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; size; i++) &#123;<br>                union[i] = i;<br>                rank[i] = i;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-type">int</span> <span class="hljs-title function_">find</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span> &#123;<br>            <span class="hljs-keyword">if</span> (i == union[i]) <span class="hljs-keyword">return</span> i;<br>            <span class="hljs-keyword">return</span> union[i] = find(union[i]);<br>        &#125;<br><br>        <span class="hljs-type">boolean</span> <span class="hljs-title function_">check</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> &#123;<br>            <span class="hljs-keyword">return</span> find(a) == find(b);<br>        &#125;<br><br>        <span class="hljs-keyword">void</span> <span class="hljs-title function_">union</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">aa</span> <span class="hljs-operator">=</span> find(a);<br>            <span class="hljs-type">int</span> <span class="hljs-variable">bb</span> <span class="hljs-operator">=</span> find(b);<br>            <span class="hljs-keyword">if</span> (aa != bb) &#123;<br>                <span class="hljs-keyword">if</span> (rank[aa] &lt; rank[bb]) &#123;<br>                    union[aa] = bb;<br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (rank[aa] &gt; rank[bb]) &#123;<br>                    union[bb] = aa;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    union[aa] = bb;<br>                    rank[bb]++;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Edge</span> &#123;<br>        <span class="hljs-type">int</span> point1;<br>        <span class="hljs-type">int</span> point2;<br>        <span class="hljs-type">int</span> cost;<br><br>        Edge(<span class="hljs-type">int</span> point1, <span class="hljs-type">int</span> point2, <span class="hljs-type">int</span> cost) &#123;<br>            <span class="hljs-built_in">this</span>.point1 = point1;<br>            <span class="hljs-built_in">this</span>.point2 = point2;<br>            <span class="hljs-built_in">this</span>.cost = cost;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="最小生成树-Prim">最小生成树(Prim)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">minCostConnectPoints2</span><span class="hljs-params">(<span class="hljs-type">int</span>[][] points)</span> &#123;<br>        <span class="hljs-type">var</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> points.length;<br>        <span class="hljs-type">var</span> <span class="hljs-variable">vis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">boolean</span>[n];<br>        <span class="hljs-type">var</span> <span class="hljs-variable">heap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PriorityQueue</span>&lt;Edge&gt;(Comparator.comparingInt(a -&gt; a.cost));<br>        <span class="hljs-type">var</span> <span class="hljs-variable">ans</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">var</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> n - <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">var</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; n; i++) &#123;<br>            <span class="hljs-type">var</span> <span class="hljs-variable">p0</span> <span class="hljs-operator">=</span> points[<span class="hljs-number">0</span>];<br>            <span class="hljs-type">var</span> <span class="hljs-variable">pi</span> <span class="hljs-operator">=</span> points[i];<br>            <span class="hljs-type">var</span> <span class="hljs-variable">distance</span> <span class="hljs-operator">=</span> Math.abs(p0[<span class="hljs-number">0</span>] - pi[<span class="hljs-number">0</span>]) + Math.abs(p0[<span class="hljs-number">1</span>] - pi[<span class="hljs-number">1</span>]);<br>            heap.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Edge</span>(<span class="hljs-number">0</span>, i, distance));<br>        &#125;<br>        vis[<span class="hljs-number">0</span>] = <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">while</span> (!heap.isEmpty()) &#123;<br>            <span class="hljs-type">Edge</span> <span class="hljs-variable">edge</span> <span class="hljs-operator">=</span> heap.poll();<br>            <span class="hljs-type">int</span> <span class="hljs-variable">point2</span> <span class="hljs-operator">=</span> edge.point2;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">cost</span> <span class="hljs-operator">=</span> edge.cost;<br>            <span class="hljs-keyword">if</span> (!vis[point2]) &#123;<br>                ans += cost;<br>                size--;<br>                vis[point2] = <span class="hljs-literal">true</span>;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>                    <span class="hljs-keyword">if</span> (!vis[i]) &#123;<br>                        <span class="hljs-type">var</span> <span class="hljs-variable">distance</span> <span class="hljs-operator">=</span> Math.abs(points[point2][<span class="hljs-number">0</span>] - points[i][<span class="hljs-number">0</span>]) + Math.abs(points[point2][<span class="hljs-number">1</span>] - points[i][<span class="hljs-number">1</span>]);<br>                        heap.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Edge</span>(point2, i, distance));<br>                    &#125;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (size == <span class="hljs-number">0</span>) <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="匈牙利算法">匈牙利算法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;Integer&gt;[] lists;<br><span class="hljs-type">boolean</span>[] vis;<br>Integer[] match;<br><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">solve</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> in.nextInt(), m = in.nextInt(), k = in.nextInt();<br>    lists = <span class="hljs-keyword">new</span> <span class="hljs-title class_">List</span>[n + <span class="hljs-number">1</span>];<br>    vis = <span class="hljs-keyword">new</span> <span class="hljs-title class_">boolean</span>[m + <span class="hljs-number">1</span>];<br>    match = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>[m + <span class="hljs-number">1</span>];<br>    Arrays.setAll(lists, e -&gt; <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;());<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; k; i++) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> in.nextInt(), b = in.nextInt();<br>        lists[a].add(b);<br>    &#125;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">ans</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>        Arrays.fill(vis, <span class="hljs-literal">false</span>);<br>        <span class="hljs-keyword">if</span> (find(i)) ans++;<br>    &#125;<br>    out.println(ans);<br>&#125;<br><br><span class="hljs-type">boolean</span> <span class="hljs-title function_">find</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> y : lists[x]) &#123;<br>        <span class="hljs-keyword">if</span> (!vis[y]) &#123;<br>            vis[y] = <span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">if</span> (match[y] == <span class="hljs-literal">null</span> || find(match[y])) &#123;<br>                match[y] = x;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="LCA">LCA</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">N</span> <span class="hljs-operator">=</span> in.nextInt(), M = in.nextInt(), S = in.nextInt();<br><br>    <span class="hljs-type">int</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> <span class="hljs-number">32</span> - Integer.numberOfLeadingZeros(N);<br>    List&lt;Integer&gt;[] lists;<br>    <span class="hljs-type">int</span>[][] f;<br><br>    <span class="hljs-type">int</span>[] depth;<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">solve</span><span class="hljs-params">()</span> &#123;<br>        lists = <span class="hljs-keyword">new</span> <span class="hljs-title class_">List</span>[N + <span class="hljs-number">1</span>];<br>        Arrays.setAll(lists, e -&gt; <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;());<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; N - <span class="hljs-number">1</span>; i++) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> in.nextInt(), b = in.nextInt();<br>            lists[a].add(b);<br>            lists[b].add(a);<br>        &#125;<br>        f = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[N + <span class="hljs-number">1</span>][m];<br>        depth = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[N + <span class="hljs-number">1</span>];<br>        dfs(S, -<span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; m - <span class="hljs-number">1</span>; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; j &lt;= N; j++) &#123;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">fa</span> <span class="hljs-operator">=</span> f[j][i];<br>                f[j][i + <span class="hljs-number">1</span>] = fa &lt; <span class="hljs-number">0</span> ? -<span class="hljs-number">1</span> : f[fa][i];<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">while</span> (M-- &gt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> in.nextInt(), b = in.nextInt();<br>            <span class="hljs-keyword">if</span> (depth[a] &gt; depth[b]) &#123;<br>                a ^= b;<br>                b ^= a;<br>                a ^= b;<br>            &#125;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> depth[b] - depth[a];<br>            <span class="hljs-type">int</span> <span class="hljs-variable">curB</span> <span class="hljs-operator">=</span> getKthAncestor(b, k);<br>            <span class="hljs-keyword">if</span> (curB == a) &#123;<br>                out.println(a);<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> m - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">pa</span> <span class="hljs-operator">=</span> f[a][i], pb = f[curB][i];<br>                <span class="hljs-keyword">if</span> (pa != pb) &#123;<br>                    a = pa;<br>                    curB = pb;<br>                &#125;<br>            &#125;<br>            out.println(f[a][<span class="hljs-number">0</span>]);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> cur, <span class="hljs-type">int</span> fa)</span> &#123;<br>        f[cur][<span class="hljs-number">0</span>] = fa;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> e : lists[cur]) &#123;<br>            <span class="hljs-keyword">if</span> (e == fa) <span class="hljs-keyword">continue</span>;<br>            depth[e] = depth[cur] + <span class="hljs-number">1</span>;<br>            dfs(e, cur);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-type">int</span> <span class="hljs-title function_">getKthAncestor</span><span class="hljs-params">(<span class="hljs-type">int</span> node, <span class="hljs-type">int</span> k)</span> &#123;<br>        <span class="hljs-keyword">for</span> (; k &gt; <span class="hljs-number">0</span>; k &amp;= k - <span class="hljs-number">1</span>) &#123;<br>            node = f[node][Integer.numberOfTrailingZeros(k)];<br>        &#125;<br>        <span class="hljs-keyword">return</span> node;<br>    &#125;<br><span class="hljs-comment">//模板https://www.luogu.com.cn/problem/P3379</span><br><span class="hljs-comment">//https://leetcode.cn/problems/maximize-value-of-function-in-a-ball-passing-game/description/</span><br></code></pre></td></tr></table></figure><h3 id="内向基环树找环-最值">内向基环树找环(最值)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//  LC2360 利用时间戳进行处理O(n), 通解还是拓扑排序</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">longestCycle</span><span class="hljs-params">(<span class="hljs-type">int</span>[] edges)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> edges.length, ans = -<span class="hljs-number">1</span>;<br>        <span class="hljs-type">var</span> <span class="hljs-variable">time</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, clock = <span class="hljs-number">1</span>; i &lt; n; ++i) &#123;<br>            <span class="hljs-keyword">if</span> (time[i] &gt; <span class="hljs-number">0</span>) <span class="hljs-keyword">continue</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> i, startTime = clock; x &gt;= <span class="hljs-number">0</span>; x = edges[x]) &#123;<br>                <span class="hljs-keyword">if</span> (time[x] &gt; <span class="hljs-number">0</span>) &#123; <span class="hljs-comment">// 重复访问</span><br>                    <span class="hljs-keyword">if</span> (time[x] &gt;= startTime) <span class="hljs-comment">// 找到了一个新的环</span><br>                        ans = Math.max(ans, clock - time[x]);<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>                time[x] = clock++;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="最短环">最短环</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">findShortestCycle</span><span class="hljs-params">(<span class="hljs-type">int</span> n, <span class="hljs-type">int</span>[][] edges)</span> &#123;  <span class="hljs-comment">//删掉一条边,再判断是否连通</span><br>        <span class="hljs-meta">@SuppressWarnings(&quot;unchecked&quot;)</span><br>        List&lt;Integer&gt;[] g = <span class="hljs-keyword">new</span> <span class="hljs-title class_">List</span>[n];<br>        Arrays.setAll(g, e -&gt; <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;());<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> edge : edges) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> edge[<span class="hljs-number">0</span>], y = edge[<span class="hljs-number">1</span>];<br>            g[x].add(y);<br>            g[y].add(x);<br>        &#125;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">ans</span> <span class="hljs-operator">=</span> <span class="hljs-number">0x3f3f3f3f</span>;<br>        <span class="hljs-type">int</span>[] dist = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n];<br>        Deque&lt;Integer&gt; queue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayDeque</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> edge : edges) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> edge[<span class="hljs-number">0</span>], b = edge[<span class="hljs-number">1</span>];<br>            Arrays.fill(dist, <span class="hljs-number">0x3f3f3f3f</span>);<br>            dist[a] = <span class="hljs-number">0</span>;<br>            queue.addLast(a);<br>            <span class="hljs-keyword">while</span> (!queue.isEmpty()) &#123;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">poll</span> <span class="hljs-operator">=</span> queue.pollFirst();<br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> e : g[poll]) &#123;<br>                    <span class="hljs-keyword">if</span> (e == b &amp;&amp; poll == a) <span class="hljs-keyword">continue</span>;  <span class="hljs-comment">//不遍历它就等于删</span><br>                    <span class="hljs-keyword">if</span> (dist[e] &gt; dist[poll] + <span class="hljs-number">1</span>) &#123;<br>                        dist[e] = dist[poll] + <span class="hljs-number">1</span>;<br>                        queue.addLast(e);<br>                    &#125;<br>                &#125;<br>            &#125;<br>            ans = Math.min(dist[b] + <span class="hljs-number">1</span>, ans);<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans == <span class="hljs-number">0x3f3f3f3f</span> ? -<span class="hljs-number">1</span> : ans;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="字符串哈希">字符串哈希</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">N</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>) <span class="hljs-number">1e5</span> + <span class="hljs-number">10</span>, P = <span class="hljs-number">131313</span>;<br><span class="hljs-type">int</span>[] h = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[N], p = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[N];<br><span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;aaabbbaaa&quot;</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> s.length();<br><span class="hljs-type">char</span>[] chars = s.toCharArray();<br>p[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>    h[i] = h[i - <span class="hljs-number">1</span>] * P + chars[i - <span class="hljs-number">1</span>];<br>    p[i] = p[i - <span class="hljs-number">1</span>] * P;<br>&#125;<br><span class="hljs-comment">//前缀和思想 hash1 == hash2</span><br><span class="hljs-type">int</span> <span class="hljs-variable">hash1</span> <span class="hljs-operator">=</span> h[<span class="hljs-number">3</span>] - h[<span class="hljs-number">0</span>] * p[<span class="hljs-number">3</span>];<br><span class="hljs-type">int</span> <span class="hljs-variable">hash2</span> <span class="hljs-operator">=</span> h[<span class="hljs-number">9</span>] - h[<span class="hljs-number">6</span>] * p[<span class="hljs-number">3</span>];<br></code></pre></td></tr></table></figure><h3 id="随机算法-模拟退火">随机算法-模拟退火</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-comment">//模拟退火算法 -leetcode 1815. 得到新鲜甜甜圈的最多组数</span><br>    <span class="hljs-type">int</span> ans;<br>    <span class="hljs-type">int</span> m;<br>    Random random;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">cost</span><span class="hljs-params">(<span class="hljs-type">int</span>[] w)</span> &#123;<br>        <span class="hljs-comment">//计算当前排列的代价</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> w.length;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, s = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>            <span class="hljs-keyword">if</span> (s == <span class="hljs-number">0</span>) res++;<br>            s = (s + w[i]) % m;<br>        &#125;<br>        ans = Math.max(ans, res);<br>        <span class="hljs-keyword">return</span> -res;<span class="hljs-comment">//内能和收益是负相关</span><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">swap</span><span class="hljs-params">(<span class="hljs-type">int</span>[] w, <span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> w[i];<br>        w[i] = w[j];<br>        w[j] = t;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">simulate_anneal</span><span class="hljs-params">(<span class="hljs-type">int</span>[] w)</span> &#123;<br>        <span class="hljs-type">double</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> <span class="hljs-number">0.97</span>;<span class="hljs-comment">//降温系数</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> w.length;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">double</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-number">1e6</span>; t &gt; <span class="hljs-number">1e-6</span>; t = t * d) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> random.nextInt(n);<br>            <span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> random.nextInt(n);<span class="hljs-comment">//交换两个位置</span><br>            <span class="hljs-keyword">if</span> (a == b) b = (b + <span class="hljs-number">1</span>) % n;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> cost(w);<br>            swap(w, a, b);<br>            <span class="hljs-type">int</span> <span class="hljs-variable">y</span> <span class="hljs-operator">=</span> cost(w);<br>            <span class="hljs-type">int</span> delta=y-x;<br>            <span class="hljs-keyword">if</span>(delta&lt;<span class="hljs-number">0</span>) <span class="hljs-keyword">continue</span>; <span class="hljs-comment">//新的解的内能更小</span><br>            <span class="hljs-keyword">if</span>((Math.exp(-delta/t)&gt;Math.random())) <span class="hljs-keyword">continue</span>;<span class="hljs-comment">//接受</span><br>            <span class="hljs-comment">//否则,不接受当前新的解，换回去</span><br>            swap(w,a,b);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">maxHappyGroups</span><span class="hljs-params">(<span class="hljs-type">int</span> batchSize, <span class="hljs-type">int</span>[] groups)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">step</span> <span class="hljs-operator">=</span> <span class="hljs-number">30</span>;<br>        ans = <span class="hljs-number">0</span>;<br>        m = batchSize;<br>        random = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; step; i++) &#123;<br>            simulate_anneal(groups);<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>模板</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>RabbitMQ基础</title>
    <link href="/2023/03/07/RabbitMQ%E5%9F%BA%E7%A1%80/"/>
    <url>/2023/03/07/RabbitMQ%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1>RabbitMQ</h1><h3 id="工作原理">工作原理</h3><img src = "https://ykexc-1314584214.cos.ap-nanjing.myqcloud.com/20230228192132.png" style="zoom:80%;"  ><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mtext>、客户端连接到消息队列服务器，打开一个c</mtext><mi>h</mi><mi>a</mi><mi>n</mi><mi>n</mi><mi>e</mi><mi>l</mi><mtext>。</mtext></mrow><annotation encoding="application/x-tex">1、客户端连接到消息队列服务器，打开一个\text channel。</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord">1</span><span class="mord cjk_fallback">、客户端连接到消息队列服务器，打开一个</span><span class="mord text"><span class="mord">c</span></span><span class="mord mathnormal">hann</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord cjk_fallback">。</span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>2</mn><mtext>、客户端声明一个e</mtext><mi>x</mi><mi>c</mi><mi>h</mi><mi>a</mi><mi>n</mi><mi>g</mi><mi>e</mi><mtext>，并设置相关属性。</mtext></mrow><annotation encoding="application/x-tex">2、客户端声明一个\text exchange，并设置相关属性。</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord">2</span><span class="mord cjk_fallback">、客户端声明一个</span><span class="mord text"><span class="mord">e</span></span><span class="mord mathnormal">x</span><span class="mord mathnormal">c</span><span class="mord mathnormal">han</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">e</span><span class="mord cjk_fallback">，并设置相关属性。</span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>3</mn><mtext>、客户端声明一个q</mtext><mi>u</mi><mi>e</mi><mi>u</mi><mi>e</mi><mtext>，并设置相关属性。</mtext></mrow><annotation encoding="application/x-tex">3、客户端声明一个\text queue，并设置相关属性。</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord">3</span><span class="mord cjk_fallback">、客户端声明一个</span><span class="mord text"><span class="mord">q</span></span><span class="mord mathnormal">u</span><span class="mord mathnormal">e</span><span class="mord mathnormal">u</span><span class="mord mathnormal">e</span><span class="mord cjk_fallback">，并设置相关属性。</span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>4</mn><mtext>、客户端使用r</mtext><mi>o</mi><mi>u</mi><mi>t</mi><mi>i</mi><mi>n</mi><mi>g</mi><mi>k</mi><mi>e</mi><mi>y</mi><mtext>，在e</mtext><mi>x</mi><mi>c</mi><mi>h</mi><mi>a</mi><mi>n</mi><mi>g</mi><mi>e</mi><mtext>和q</mtext><mi>u</mi><mi>e</mi><mi>u</mi><mi>e</mi><mtext>之间建立好绑定关系。</mtext></mrow><annotation encoding="application/x-tex">4、客户端使用\text routing key，在\text exchange和\text queue之间建立好绑定关系。</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord">4</span><span class="mord cjk_fallback">、客户端使用</span><span class="mord text"><span class="mord">r</span></span><span class="mord mathnormal">o</span><span class="mord mathnormal">u</span><span class="mord mathnormal">t</span><span class="mord mathnormal">in</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mord mathnormal" style="margin-right:0.03588em;">ey</span><span class="mord cjk_fallback">，在</span><span class="mord text"><span class="mord">e</span></span><span class="mord mathnormal">x</span><span class="mord mathnormal">c</span><span class="mord mathnormal">han</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">e</span><span class="mord cjk_fallback">和</span><span class="mord text"><span class="mord">q</span></span><span class="mord mathnormal">u</span><span class="mord mathnormal">e</span><span class="mord mathnormal">u</span><span class="mord mathnormal">e</span><span class="mord cjk_fallback">之间建立好绑定关系。</span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>5</mn><mtext>、客户端投递消息到e</mtext><mi>x</mi><mi>c</mi><mi>h</mi><mi>a</mi><mi>n</mi><mi>g</mi><mi>e</mi><mtext>。</mtext></mrow><annotation encoding="application/x-tex">5、客户端投递消息到\text exchange。</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord">5</span><span class="mord cjk_fallback">、客户端投递消息到</span><span class="mord text"><span class="mord">e</span></span><span class="mord mathnormal">x</span><span class="mord mathnormal">c</span><span class="mord mathnormal">han</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">e</span><span class="mord cjk_fallback">。</span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>6</mn><mtext>、e</mtext><mi>x</mi><mi>c</mi><mi>h</mi><mi>a</mi><mi>n</mi><mi>g</mi><mi>e</mi><mtext>接收到消息后，就根据消息的k</mtext><mi>e</mi><mi>y</mi><mtext>和已经设由b</mtext><mi>i</mi><mi>n</mi><mi>d</mi><mi>i</mi><mi>n</mi><mi>g</mi><mtext>，进行消息路里，将消息投递到</mtext></mrow><annotation encoding="application/x-tex">6、\text exchange接收到消息后，就根据消息的\text key和已经设由\text binding，进行消息路里，将消息投递到</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord">6</span><span class="mord cjk_fallback">、</span><span class="mord text"><span class="mord">e</span></span><span class="mord mathnormal">x</span><span class="mord mathnormal">c</span><span class="mord mathnormal">han</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">e</span><span class="mord cjk_fallback">接收到消息后，就根据消息的</span><span class="mord text"><span class="mord">k</span></span><span class="mord mathnormal" style="margin-right:0.03588em;">ey</span><span class="mord cjk_fallback">和已经设由</span><span class="mord text"><span class="mord">b</span></span><span class="mord mathnormal">in</span><span class="mord mathnormal">d</span><span class="mord mathnormal">in</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord cjk_fallback">，进行消息路里，将消息投递到</span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>一个或多个队列里</mtext></mrow><annotation encoding="application/x-tex">一个或多个队列里</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord cjk_fallback">一个或多个队列里</span></span></span></span></p><h3 id="工作模式">工作模式</h3><h4 id="helloword">helloword</h4><img src="https://ykexc-1314584214.cos.ap-nanjing.myqcloud.com/20230228175921.png" alt="" style="zoom:80%;" /><center>helloworld<center/><blockquote><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi><mi>r</mi><mi>o</mi><mi>d</mi><mi>u</mi><mi>c</mi><mi>e</mi><mi>r</mi></mrow><annotation encoding="application/x-tex">Producer</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal">ro</span><span class="mord mathnormal">d</span><span class="mord mathnormal">u</span><span class="mord mathnormal" style="margin-right:0.02778em;">cer</span></span></span></span></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">QUEUE_NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;ykexc_queue&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, TimeoutException &#123;<br><br>        <span class="hljs-comment">//  创建连接工厂</span><br>        <span class="hljs-type">ConnectionFactory</span> <span class="hljs-variable">connectionFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConnectionFactory</span>();<br>        connectionFactory.setHost(<span class="hljs-string">&quot;localhost&quot;</span>);<br>        connectionFactory.setPort(<span class="hljs-number">5672</span>);  <span class="hljs-comment">//不是http协议</span><br>        connectionFactory.setVirtualHost(<span class="hljs-string">&quot;/&quot;</span>);  <span class="hljs-comment">//  设置虚拟主机</span><br>        connectionFactory.setUsername(<span class="hljs-string">&quot;huya&quot;</span>);<br>        connectionFactory.setPassword(<span class="hljs-string">&quot;huya&quot;</span>);<br>        <span class="hljs-comment">//  创建长连接</span><br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> connectionFactory.newConnection();<br>        <span class="hljs-comment">//  创建channel</span><br>        <span class="hljs-type">Channel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> connection.createChannel();<br>        <span class="hljs-comment">//  声明队列</span><br>        <span class="hljs-comment">// String queue,  队列名</span><br>        <span class="hljs-comment">// boolean durable, 持久化</span><br>        <span class="hljs-comment">// boolean exclusive, 排他的</span><br>        <span class="hljs-comment">// boolean autoDelete, 自动删除</span><br>        <span class="hljs-comment">// Map&lt;String, Object&gt; arguments 属性</span><br>        channel.queueDeclare(QUEUE_NAME, <span class="hljs-literal">true</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">null</span>);<br>        <span class="hljs-comment">//  发消息</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello world&quot;</span>;<br>        <span class="hljs-comment">// String exchange,  交换机 &quot;&quot;表示默认交换机</span><br>        <span class="hljs-comment">// String routingKey, 路由键 也就是queue的名称</span><br>        <span class="hljs-comment">// AMQP.BasicProperties props, 属性</span><br>        <span class="hljs-comment">// byte[] body 消息</span><br>        channel.basicPublish(<span class="hljs-string">&quot;&quot;</span>, QUEUE_NAME, <span class="hljs-literal">null</span>, msg.getBytes());<br>        <span class="hljs-comment">//  关闭连接</span><br>        channel.close();<br>        connection.close();<br>    &#125;<br></code></pre></td></tr></table></figure><blockquote><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi><mi>o</mi><mi>n</mi><mi>s</mi><mi>u</mi><mi>m</mi><mi>e</mi><mi>r</mi></mrow><annotation encoding="application/x-tex">Consumer</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal">o</span><span class="mord mathnormal">n</span><span class="mord mathnormal">s</span><span class="mord mathnormal">u</span><span class="mord mathnormal">m</span><span class="mord mathnormal" style="margin-right:0.02778em;">er</span></span></span></span></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">QUEUE_NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;ykexc_queue&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-comment">//  创建连接工厂</span><br>        <span class="hljs-type">ConnectionFactory</span> <span class="hljs-variable">connectionFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConnectionFactory</span>();<br>        connectionFactory.setHost(<span class="hljs-string">&quot;localhost&quot;</span>);<br>        connectionFactory.setPort(<span class="hljs-number">5672</span>);  <span class="hljs-comment">//不是http协议</span><br>        connectionFactory.setVirtualHost(<span class="hljs-string">&quot;/&quot;</span>);  <span class="hljs-comment">//  设置虚拟主机</span><br>        connectionFactory.setUsername(<span class="hljs-string">&quot;huya&quot;</span>);<br>        connectionFactory.setPassword(<span class="hljs-string">&quot;huya&quot;</span>);<br>        <span class="hljs-comment">//  创建长连接</span><br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> connectionFactory.newConnection();<br>        <span class="hljs-comment">//  创建channel</span><br>        <span class="hljs-type">Channel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> connection.createChannel();<br>        <span class="hljs-comment">// 防止生产者还未启动队列</span><br>        channel.queueDeclare(QUEUE_NAME, <span class="hljs-literal">true</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">null</span>);<br><br><br>        <span class="hljs-comment">//  监听队列</span><br>        <span class="hljs-type">Consumer</span> <span class="hljs-variable">consumer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultConsumer</span>(channel)&#123;<br><span class="hljs-comment">//            String consumerTag  消费者标签</span><br><span class="hljs-comment">//            Envelope envelop  信封， 保存许多信息</span><br><span class="hljs-comment">//            AMQP.BasicProperties properties  属性</span><br><span class="hljs-comment">//            byte[] body  消息字节数组</span><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleDelivery</span><span class="hljs-params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="hljs-type">byte</span>[] body)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>                System.out.println(<span class="hljs-string">&quot;consumerTag = &quot;</span> + consumerTag);<br>                System.out.println(<span class="hljs-string">&quot;envelope = &quot;</span> + envelope);<br>                System.out.println(<span class="hljs-string">&quot;message&quot;</span> + <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(body));<br>            &#125;<br>        &#125;;<br><span class="hljs-comment">//        String queue  监听队列名称</span><br><span class="hljs-comment">//        boolean autoAck  是否自动应答</span><br><span class="hljs-comment">//        Consumer callback  //怎样处理这些消息</span><br>        channel.basicConsume(QUEUE_NAME, <span class="hljs-literal">true</span>, consumer);<br><br><span class="hljs-comment">//        channel.close();  consumer需要一直保持接收状态， 所以不能断开连接</span><br><span class="hljs-comment">//        connection.close();</span><br>    &#125;<br></code></pre></td></tr></table></figure><h4 id="workqueues">workqueues</h4><img src="https://ykexc-1314584214.cos.ap-nanjing.myqcloud.com/20230301225623.png" alt="" style="zoom:80%;" /><center>workqueues<center/><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>代码与</mtext><mi>h</mi><mi>e</mi><mi>l</mi><mi>l</mi><mi>o</mi><mi>w</mi><mi>o</mi><mi>r</mi><mi>l</mi><mi>d</mi><mtext>类似</mtext><mo separator="true">,</mo><mtext>一个生产者生产</mtext><mo separator="true">,</mo><mtext>多个消费者消费</mtext></mrow><annotation encoding="application/x-tex">代码与helloworld类似,一个生产者生产,多个消费者消费</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord cjk_fallback">代码与</span><span class="mord mathnormal">h</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.01968em;">ll</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mord mathnormal" style="margin-right:0.02778em;">or</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">d</span><span class="mord cjk_fallback">类似</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord cjk_fallback">一个生产者生产</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord cjk_fallback">多个消费者消费</span></span></span></span></p><h4 id="Publish-Subscribe">Publish/Subscribe</h4><img src="https://ykexc-1314584214.cos.ap-nanjing.myqcloud.com/20230301232117.png" style="zoom:80%;" /><center>publish/subscribe<center/><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>订阅模型中，多了一个</mtext><mi>e</mi><mi>x</mi><mi>c</mi><mi>h</mi><mi>a</mi><mi>n</mi><mi>g</mi><mi>e</mi><mtext>角色，而且过程略有变化；</mtext></mrow><annotation encoding="application/x-tex">订阅模型中，多了一个exchange角色，而且过程略有变化；</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord cjk_fallback">订阅模型中，多了一个</span><span class="mord mathnormal">e</span><span class="mord mathnormal">x</span><span class="mord mathnormal">c</span><span class="mord mathnormal">han</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">e</span><span class="mord cjk_fallback">角色，而且过程略有变化；</span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi><mtext>：生产者，也就是要发送消息的程序，但是不再发送到队列中，而是发给</mtext><mi>X</mi><mtext>（交换机）</mtext></mrow><annotation encoding="application/x-tex">P：生产者，也就是要发送消息的程序，但是不再发送到队列中，而是发给X（交换机）</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord cjk_fallback">：生产者，也就是要发送消息的程序，但是不再发送到队列中，而是发给</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mord cjk_fallback">（交换机）</span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi><mtext>：消费者，消息的接受者，会一直等待消息到来。</mtext></mrow><annotation encoding="application/x-tex">C：消费者，消息的接受者，会一直等待消息到来。</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord cjk_fallback">：消费者，消息的接受者，会一直等待消息到来。</span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>Q</mi><mi>u</mi><mi>e</mi><mi>u</mi><mi>e</mi><mo>:</mo><mtext>消息队列，接收消息、缓存消息。</mtext></mrow><annotation encoding="application/x-tex">Queue:消息队列，接收消息、缓存消息。</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">Q</span><span class="mord mathnormal">u</span><span class="mord mathnormal">e</span><span class="mord mathnormal">u</span><span class="mord mathnormal">e</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord cjk_fallback">消息队列，接收消息、缓存消息。</span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>E</mi><mi>x</mi><mi>c</mi><mi>h</mi><mi>a</mi><mi>n</mi><mi>g</mi><mi>e</mi><mo>:</mo><mtext>交换机，图中的</mtext><mi>X</mi><mtext>。一方面，接收生产者发送的消息。另一方面，知道如何处理消息，</mtext></mrow><annotation encoding="application/x-tex">Exchange:交换机，图中的X。一方面，接收生产者发送的消息。另一方面，知道如何处理消息，</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mord mathnormal">x</span><span class="mord mathnormal">c</span><span class="mord mathnormal">han</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">e</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord cjk_fallback">交换机，图中的</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mord cjk_fallback">。一方面，接收生产者发送的消息。另一方面，知道如何处理消息，</span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>例如递交给某个特别队列、递交给所有队列、或是将消息丢弃。到底如何操作，取决于</mtext><mi>E</mi><mi>x</mi><mi>c</mi><mi>h</mi><mi>a</mi><mi>n</mi><mi>g</mi><mi>e</mi></mrow><annotation encoding="application/x-tex">例如递交给某个特别队列、递交给所有队列、或是将消息丢弃。到底如何操作，取决于Exchange</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord cjk_fallback">例如递交给某个特别队列、递交给所有队列、或是将消息丢弃。到底如何操作，取决于</span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mord mathnormal">x</span><span class="mord mathnormal">c</span><span class="mord mathnormal">han</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">e</span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>的类型。</mtext><mi>E</mi><mi>x</mi><mi>c</mi><mi>h</mi><mi>a</mi><mi>n</mi><mi>g</mi><mi>e</mi><mtext>有常见以下</mtext><mn>3</mn><mtext>种类型</mtext><mo>:</mo></mrow><annotation encoding="application/x-tex">的类型。Exchange有常见以下3种类型:</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord cjk_fallback">的类型。</span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mord mathnormal">x</span><span class="mord mathnormal">c</span><span class="mord mathnormal">han</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">e</span><span class="mord cjk_fallback">有常见以下</span><span class="mord">3</span><span class="mord cjk_fallback">种类型</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>F</mi><mi>a</mi><mi>n</mi><mi>o</mi><mi>u</mi><mi>t</mi><mo>:</mo><mtext>广播，将消息交给所有绑定到交换机的队列</mtext></mrow><annotation encoding="application/x-tex">Fanout:广播，将消息交给所有绑定到交换机的队列</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mord mathnormal">an</span><span class="mord mathnormal">o</span><span class="mord mathnormal">u</span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord cjk_fallback">广播，将消息交给所有绑定到交换机的队列</span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>D</mi><mi>i</mi><mi>r</mi><mi>e</mi><mi>c</mi><mi>t</mi><mo>:</mo><mtext>定向，把消息交给符合指定</mtext><mi>r</mi><mi>o</mi><mi>u</mi><mi>t</mi><mi>i</mi><mi>n</mi><mi>g</mi><mi>k</mi><mi>e</mi><mi>y</mi><mtext>的队列</mtext></mrow><annotation encoding="application/x-tex">Direct:定向，把消息交给符合指定routing key 的队列</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord mathnormal">i</span><span class="mord mathnormal">rec</span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord cjk_fallback">定向，把消息交给符合指定</span><span class="mord mathnormal">ro</span><span class="mord mathnormal">u</span><span class="mord mathnormal">t</span><span class="mord mathnormal">in</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mord mathnormal" style="margin-right:0.03588em;">ey</span><span class="mord cjk_fallback">的队列</span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>T</mi><mi>o</mi><mi>p</mi><mi>i</mi><mi>c</mi><mo>:</mo><mtext>通配符，把消息交给符合</mtext><mi>r</mi><mi>o</mi><mi>u</mi><mi>t</mi><mi>i</mi><mi>n</mi><mi>g</mi><mi>p</mi><mi>a</mi><mi>t</mi><mi>t</mi><mi>e</mi><mi>r</mi><mi>n</mi><mtext>（路由模式）的队列</mtext></mrow><annotation encoding="application/x-tex">Topic:通配符，把消息交给符合routing pattern（路由模式） 的队列</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mord mathnormal">o</span><span class="mord mathnormal">p</span><span class="mord mathnormal">i</span><span class="mord mathnormal">c</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord cjk_fallback">通配符，把消息交给符合</span><span class="mord mathnormal">ro</span><span class="mord mathnormal">u</span><span class="mord mathnormal">t</span><span class="mord mathnormal">in</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">p</span><span class="mord mathnormal">a</span><span class="mord mathnormal">tt</span><span class="mord mathnormal" style="margin-right:0.02778em;">er</span><span class="mord mathnormal">n</span><span class="mord cjk_fallback">（路由模式）的队列</span></span></span></span></p><blockquote><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi><mi>r</mi><mi>o</mi><mi>d</mi><mi>u</mi><mi>c</mi><mi>e</mi><mi>r</mi></mrow><annotation encoding="application/x-tex">producer</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">p</span><span class="mord mathnormal">ro</span><span class="mord mathnormal">d</span><span class="mord mathnormal">u</span><span class="mord mathnormal" style="margin-right:0.02778em;">cer</span></span></span></span></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.test.publishsubscribe;<br><br><span class="hljs-keyword">import</span> com.rabbitmq.client.BuiltinExchangeType;<br><span class="hljs-keyword">import</span> com.rabbitmq.client.Channel;<br><span class="hljs-keyword">import</span> com.rabbitmq.client.Connection;<br><span class="hljs-keyword">import</span> com.rabbitmq.client.ConnectionFactory;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> mqz</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">QUEUE_NAME_2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;publish_and_subscribe_queue1&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">QUEUE_NAME_3</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;publish_and_subscribe_queue2&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">EXCHANGE_NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;publish_and_subscribe_exchange&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">//  创建连接工厂</span><br>        <span class="hljs-type">ConnectionFactory</span> <span class="hljs-variable">connectionFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConnectionFactory</span>();<br>        connectionFactory.setHost(<span class="hljs-string">&quot;localhost&quot;</span>);<br>        connectionFactory.setPort(<span class="hljs-number">5672</span>);  <span class="hljs-comment">//不是http</span><br>        connectionFactory.setVirtualHost(<span class="hljs-string">&quot;/&quot;</span>);  <span class="hljs-comment">//  设置虚拟主机</span><br>        connectionFactory.setUsername(<span class="hljs-string">&quot;huya&quot;</span>);<br>        connectionFactory.setPassword(<span class="hljs-string">&quot;huya&quot;</span>);<br>        <span class="hljs-comment">//  创建长连接</span><br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> connectionFactory.newConnection();<br>        <span class="hljs-comment">//  创建channel</span><br>        <span class="hljs-type">Channel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> connection.createChannel();<br>        <span class="hljs-comment">// 防止生产者还未启动队列</span><br>        channel.queueDeclare(QUEUE_NAME_2, <span class="hljs-literal">true</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">null</span>);<br>        channel.queueDeclare(QUEUE_NAME_3, <span class="hljs-literal">true</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">null</span>);<br><br>        channel.exchangeDeclare(EXCHANGE_NAME, BuiltinExchangeType.FANOUT, <span class="hljs-literal">true</span>, <span class="hljs-literal">true</span>, <span class="hljs-literal">null</span>);<br><br>        <span class="hljs-comment">//  绑定交换机</span><br>        channel.queueBind(QUEUE_NAME_2, EXCHANGE_NAME, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-literal">null</span>);<br>        channel.queueBind(QUEUE_NAME_3, EXCHANGE_NAME, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-literal">null</span>);<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello&quot;</span>;<br><br>        channel.basicPublish(EXCHANGE_NAME, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-literal">null</span>, message.getBytes());<br>        channel.close();<br>        connection.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>c</mi><mi>o</mi><mi>n</mi><mi>s</mi><mi>u</mi><mi>m</mi><mi>e</mi><mi>r</mi></mrow><annotation encoding="application/x-tex">consumer</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">co</span><span class="mord mathnormal">n</span><span class="mord mathnormal">s</span><span class="mord mathnormal">u</span><span class="mord mathnormal">m</span><span class="mord mathnormal" style="margin-right:0.02778em;">er</span></span></span></span></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.test.publishsubscribe;<br><br><span class="hljs-keyword">import</span> com.rabbitmq.client.*;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> mqz</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">QUEUE_NAME_2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;publish_and_subscribe_queue1&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">QUEUE_NAME_3</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;publish_and_subscribe_queue2&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">EXCHANGE_NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;publish_and_subscribe_exchange&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">//  创建连接工厂</span><br>        <span class="hljs-type">ConnectionFactory</span> <span class="hljs-variable">connectionFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConnectionFactory</span>();<br>        connectionFactory.setHost(<span class="hljs-string">&quot;localhost&quot;</span>);<br>        connectionFactory.setPort(<span class="hljs-number">5672</span>);  <span class="hljs-comment">//不是http</span><br>        connectionFactory.setVirtualHost(<span class="hljs-string">&quot;/&quot;</span>);  <span class="hljs-comment">//  设置虚拟主机</span><br>        connectionFactory.setUsername(<span class="hljs-string">&quot;huya&quot;</span>);<br>        connectionFactory.setPassword(<span class="hljs-string">&quot;huya&quot;</span>);<br>        <span class="hljs-comment">//  创建长连接</span><br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> connectionFactory.newConnection();<br>        <span class="hljs-comment">//  创建channel</span><br>        <span class="hljs-type">Channel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> connection.createChannel();<br>        <span class="hljs-comment">// 防止生产者还未启动队列</span><br>        channel.queueDeclare(QUEUE_NAME_2, <span class="hljs-literal">true</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">null</span>);<br>        channel.queueDeclare(QUEUE_NAME_3, <span class="hljs-literal">true</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">null</span>);<br><br>        channel.exchangeDeclare(EXCHANGE_NAME, BuiltinExchangeType.FANOUT, <span class="hljs-literal">true</span>, <span class="hljs-literal">true</span>, <span class="hljs-literal">null</span>);<br>        <span class="hljs-comment">//  监听队列</span><br>        <span class="hljs-type">Consumer</span> <span class="hljs-variable">consumer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultConsumer</span>(channel) &#123;<br><span class="hljs-comment">//            String consumerTag  消费者标签</span><br><span class="hljs-comment">//            Envelope envelop  信封， 保存许多信息</span><br><span class="hljs-comment">//            AMQP.BasicProperties properties  属性</span><br><span class="hljs-comment">//            byte[] body  消息字节数组</span><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleDelivery</span><span class="hljs-params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="hljs-type">byte</span>[] body)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>                System.out.println(<span class="hljs-string">&quot;consumerTag = &quot;</span> + consumerTag);<br>                System.out.println(<span class="hljs-string">&quot;envelope = &quot;</span> + envelope);<br>                System.out.println(<span class="hljs-string">&quot;message&quot;</span> + <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(body));<br>            &#125;<br>        &#125;;<br><span class="hljs-comment">//        String queue  监听队列名称</span><br><span class="hljs-comment">//        boolean autoAck  是否自动应答</span><br><span class="hljs-comment">//        Consumer callback  //怎样处理这些消息</span><br>        channel.basicConsume(QUEUE_NAME_2, <span class="hljs-literal">true</span>, consumer);<br><br><span class="hljs-comment">//        channel.close();  consumer需要一直保持接收状态， 所以不能断开连接</span><br><span class="hljs-comment">//        connection.close();</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.test.publishsubscribe;<br><br><span class="hljs-keyword">import</span> com.rabbitmq.client.*;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> mqz</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">QUEUE_NAME_2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;publish_and_subscribe_queue1&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">QUEUE_NAME_3</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;publish_and_subscribe_queue2&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">EXCHANGE_NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;publish_and_subscribe_exchange&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">//  创建连接工厂</span><br>        <span class="hljs-type">ConnectionFactory</span> <span class="hljs-variable">connectionFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConnectionFactory</span>();<br>        connectionFactory.setHost(<span class="hljs-string">&quot;localhost&quot;</span>);<br>        connectionFactory.setPort(<span class="hljs-number">5672</span>);  <span class="hljs-comment">//不是http</span><br>        connectionFactory.setVirtualHost(<span class="hljs-string">&quot;/&quot;</span>);  <span class="hljs-comment">//  设置虚拟主机</span><br>        connectionFactory.setUsername(<span class="hljs-string">&quot;huya&quot;</span>);<br>        connectionFactory.setPassword(<span class="hljs-string">&quot;huya&quot;</span>);<br>        <span class="hljs-comment">//  创建长连接</span><br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> connectionFactory.newConnection();<br>        <span class="hljs-comment">//  创建channel</span><br>        <span class="hljs-type">Channel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> connection.createChannel();<br>        <span class="hljs-comment">// 防止生产者还未启动队列</span><br>        channel.queueDeclare(QUEUE_NAME_2, <span class="hljs-literal">true</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">null</span>);<br>        channel.queueDeclare(QUEUE_NAME_3, <span class="hljs-literal">true</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">null</span>);<br><br>        channel.exchangeDeclare(EXCHANGE_NAME, BuiltinExchangeType.FANOUT, <span class="hljs-literal">true</span>, <span class="hljs-literal">true</span>, <span class="hljs-literal">null</span>);<br>        <span class="hljs-comment">//  监听队列</span><br>        <span class="hljs-type">Consumer</span> <span class="hljs-variable">consumer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultConsumer</span>(channel) &#123;<br>            <span class="hljs-comment">//            String consumerTag  消费者标签</span><br><span class="hljs-comment">//            Envelope envelop  信封， 保存许多信息</span><br><span class="hljs-comment">//            AMQP.BasicProperties properties  属性</span><br><span class="hljs-comment">//            byte[] body  消息字节数组</span><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleDelivery</span><span class="hljs-params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="hljs-type">byte</span>[] body)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>                System.out.println(<span class="hljs-string">&quot;consumerTag = &quot;</span> + consumerTag);<br>                System.out.println(<span class="hljs-string">&quot;envelope = &quot;</span> + envelope);<br>                System.out.println(<span class="hljs-string">&quot;message&quot;</span> + <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(body));<br>            &#125;<br>        &#125;;<br><span class="hljs-comment">//        String queue  监听队列名称</span><br><span class="hljs-comment">//        boolean autoAck  是否自动应答</span><br><span class="hljs-comment">//        Consumer callback  //怎样处理这些消息</span><br>        channel.basicConsume(QUEUE_NAME_3, <span class="hljs-literal">true</span>, consumer);<br><br><span class="hljs-comment">//        channel.close();  consumer需要一直保持接收状态， 所以不能断开连接</span><br><span class="hljs-comment">//        connection.close();</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Routing">Routing</h4><img src="https://ykexc-1314584214.cos.ap-nanjing.myqcloud.com/20230304164241.png" alt="" style="zoom:80%;" /><center>routing<center/><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>与</mtext><mi>p</mi><mi>u</mi><mi>b</mi><mi>l</mi><mi>i</mi><mi>s</mi><mi>h</mi><mo>−</mo><mi>s</mi><mi>u</mi><mi>b</mi><mi>s</mi><mi>c</mi><mi>r</mi><mi>i</mi><mi>b</mi><mi>e</mi><mtext>不同的是</mtext><mo separator="true">,</mo><mi>e</mi><mi>x</mi><mi>c</mi><mi>h</mi><mi>a</mi><mi>n</mi><mi>g</mi><mi>e</mi><mtext>不一样</mtext><mo separator="true">,</mo><mtext>并且给每个队列绑定了</mtext><mi>r</mi><mi>o</mi><mi>u</mi><mi>t</mi><mi>i</mi><mi>n</mi><mi>g</mi><mi mathvariant="normal">_</mi><mi>k</mi><mi>e</mi><mi>y</mi></mrow><annotation encoding="application/x-tex">与publish-subscribe不同的是,exchange不一样,并且给每个队列绑定了routing\_key</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord cjk_fallback">与</span><span class="mord mathnormal">p</span><span class="mord mathnormal">u</span><span class="mord mathnormal">b</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">i</span><span class="mord mathnormal">s</span><span class="mord mathnormal">h</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.0044em;vertical-align:-0.31em;"></span><span class="mord mathnormal">s</span><span class="mord mathnormal">u</span><span class="mord mathnormal">b</span><span class="mord mathnormal" style="margin-right:0.02778em;">scr</span><span class="mord mathnormal">ib</span><span class="mord mathnormal">e</span><span class="mord cjk_fallback">不同的是</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">e</span><span class="mord mathnormal">x</span><span class="mord mathnormal">c</span><span class="mord mathnormal">han</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">e</span><span class="mord cjk_fallback">不一样</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord cjk_fallback">并且给每个队列绑定了</span><span class="mord mathnormal">ro</span><span class="mord mathnormal">u</span><span class="mord mathnormal">t</span><span class="mord mathnormal">in</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord" style="margin-right:0.02778em;">_</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mord mathnormal" style="margin-right:0.03588em;">ey</span></span></span></span></p><blockquote><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi><mi>r</mi><mi>o</mi><mi>d</mi><mi>u</mi><mi>c</mi><mi>e</mi><mi>r</mi></mrow><annotation encoding="application/x-tex">producer</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">p</span><span class="mord mathnormal">ro</span><span class="mord mathnormal">d</span><span class="mord mathnormal">u</span><span class="mord mathnormal" style="margin-right:0.02778em;">cer</span></span></span></span></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.test.routing;<br><br><span class="hljs-keyword">import</span> com.rabbitmq.client.BuiltinExchangeType;<br><span class="hljs-keyword">import</span> com.rabbitmq.client.Channel;<br><span class="hljs-keyword">import</span> com.rabbitmq.client.Connection;<br><span class="hljs-keyword">import</span> com.rabbitmq.client.ConnectionFactory;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> mqz</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">QUEUE_NAME_2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;routing_queue1&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">QUEUE_NAME_3</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;routing_queue2&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">EXCHANGE_NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;routing_exchange&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">//  创建连接工厂</span><br>        <span class="hljs-type">ConnectionFactory</span> <span class="hljs-variable">connectionFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConnectionFactory</span>();<br>        connectionFactory.setHost(<span class="hljs-string">&quot;localhost&quot;</span>);<br>        connectionFactory.setPort(<span class="hljs-number">5672</span>);  <span class="hljs-comment">//不是http</span><br>        connectionFactory.setVirtualHost(<span class="hljs-string">&quot;/&quot;</span>);  <span class="hljs-comment">//  设置虚拟主机</span><br>        connectionFactory.setUsername(<span class="hljs-string">&quot;huya&quot;</span>);<br>        connectionFactory.setPassword(<span class="hljs-string">&quot;huya&quot;</span>);<br>        <span class="hljs-comment">//  创建长连接</span><br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> connectionFactory.newConnection();<br>        <span class="hljs-comment">//  创建channel</span><br>        <span class="hljs-type">Channel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> connection.createChannel();<br>        <span class="hljs-comment">// 防止生产者还未启动队列</span><br>        channel.queueDeclare(QUEUE_NAME_2, <span class="hljs-literal">true</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">null</span>);<br>        channel.queueDeclare(QUEUE_NAME_3, <span class="hljs-literal">true</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">null</span>);<br><br>        channel.exchangeDeclare(EXCHANGE_NAME, BuiltinExchangeType.DIRECT, <span class="hljs-literal">true</span>, <span class="hljs-literal">true</span>, <span class="hljs-literal">null</span>);<br><br>        <span class="hljs-comment">//  绑定交换机</span><br>        channel.queueBind(QUEUE_NAME_2, EXCHANGE_NAME, <span class="hljs-string">&quot;error&quot;</span>);<br>        channel.queueBind(QUEUE_NAME_3, EXCHANGE_NAME, <span class="hljs-string">&quot;error&quot;</span>);<br>        channel.queueBind(QUEUE_NAME_2, EXCHANGE_NAME, <span class="hljs-string">&quot;info&quot;</span>);<br>        channel.queueBind(QUEUE_NAME_2, EXCHANGE_NAME, <span class="hljs-string">&quot;warning&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello&quot;</span>;<br><br>        channel.basicPublish(EXCHANGE_NAME, <span class="hljs-string">&quot;error&quot;</span>, <span class="hljs-literal">null</span>, message.getBytes());<br>        channel.basicPublish(EXCHANGE_NAME, <span class="hljs-string">&quot;info&quot;</span>, <span class="hljs-literal">null</span>, message.getBytes());<br>        channel.basicPublish(EXCHANGE_NAME, <span class="hljs-string">&quot;warning&quot;</span>, <span class="hljs-literal">null</span>, message.getBytes());<br>        channel.close();<br>        connection.close();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><blockquote><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>c</mi><mi>o</mi><mi>n</mi><mi>s</mi><mi>u</mi><mi>m</mi><mi>e</mi><mi>r</mi></mrow><annotation encoding="application/x-tex">consumer</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">co</span><span class="mord mathnormal">n</span><span class="mord mathnormal">s</span><span class="mord mathnormal">u</span><span class="mord mathnormal">m</span><span class="mord mathnormal" style="margin-right:0.02778em;">er</span></span></span></span></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.test.routing;<br><br><span class="hljs-keyword">import</span> com.rabbitmq.client.*;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> mqz</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">QUEUE_NAME_2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;routing_queue1&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">QUEUE_NAME_3</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;routing_queue2&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">EXCHANGE_NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;routing_exchange&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">//  创建连接工厂</span><br>        <span class="hljs-type">ConnectionFactory</span> <span class="hljs-variable">connectionFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConnectionFactory</span>();<br>        connectionFactory.setHost(<span class="hljs-string">&quot;localhost&quot;</span>);<br>        connectionFactory.setPort(<span class="hljs-number">5672</span>);  <span class="hljs-comment">//不是http</span><br>        connectionFactory.setVirtualHost(<span class="hljs-string">&quot;/&quot;</span>);  <span class="hljs-comment">//  设置虚拟主机</span><br>        connectionFactory.setUsername(<span class="hljs-string">&quot;huya&quot;</span>);<br>        connectionFactory.setPassword(<span class="hljs-string">&quot;huya&quot;</span>);<br>        <span class="hljs-comment">//  创建长连接</span><br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> connectionFactory.newConnection();<br>        <span class="hljs-comment">//  创建channel</span><br>        <span class="hljs-type">Channel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> connection.createChannel();<br>        <span class="hljs-comment">// 防止生产者还未启动队列</span><br>        channel.queueDeclare(QUEUE_NAME_2, <span class="hljs-literal">true</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">null</span>);<br>        channel.queueDeclare(QUEUE_NAME_3, <span class="hljs-literal">true</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">null</span>);<br><br>        channel.exchangeDeclare(EXCHANGE_NAME, BuiltinExchangeType.DIRECT, <span class="hljs-literal">true</span>, <span class="hljs-literal">true</span>, <span class="hljs-literal">null</span>);<br>        <span class="hljs-comment">//  监听队列</span><br>        <span class="hljs-type">Consumer</span> <span class="hljs-variable">consumer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultConsumer</span>(channel) &#123;<br>            <span class="hljs-comment">/**</span><br><span class="hljs-comment">             * <span class="hljs-doctag">@param</span> consumerTag the &lt;i&gt;consumer tag&lt;/i&gt; associated with the consumer </span><br><span class="hljs-comment">             * <span class="hljs-doctag">@param</span> envelope    packaging data for the message</span><br><span class="hljs-comment">             * <span class="hljs-doctag">@param</span> properties  content header data for the message</span><br><span class="hljs-comment">             * <span class="hljs-doctag">@param</span> body        the message body (opaque, client-specific byte array)</span><br><span class="hljs-comment">             * <span class="hljs-doctag">@throws</span> IOException</span><br><span class="hljs-comment">             */</span><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleDelivery</span><span class="hljs-params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="hljs-type">byte</span>[] body)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>                System.out.println(<span class="hljs-string">&quot;message&quot;</span> + <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(body));<br>            &#125;<br>        &#125;;<br><span class="hljs-comment">//        String queue  监听队列名称</span><br><span class="hljs-comment">//        boolean autoAck  是否自动应答</span><br><span class="hljs-comment">//        Consumer callback  //怎样处理这些消息</span><br>        channel.basicConsume(QUEUE_NAME_2, <span class="hljs-literal">true</span>, consumer);<br><br><span class="hljs-comment">//        channel.close();  consumer需要一直保持接收状态， 所以不能断开连接</span><br><span class="hljs-comment">//        connection.close();</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.test.routing;<br><br><span class="hljs-keyword">import</span> com.rabbitmq.client.*;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> mqz</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">QUEUE_NAME_2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;routing_queue1&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">QUEUE_NAME_3</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;routing_queue2&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">EXCHANGE_NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;routing_exchange&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">//  创建连接工厂</span><br>        <span class="hljs-type">ConnectionFactory</span> <span class="hljs-variable">connectionFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConnectionFactory</span>();<br>        connectionFactory.setHost(<span class="hljs-string">&quot;localhost&quot;</span>);<br>        connectionFactory.setPort(<span class="hljs-number">5672</span>);  <span class="hljs-comment">//不是http</span><br>        connectionFactory.setVirtualHost(<span class="hljs-string">&quot;/&quot;</span>);  <span class="hljs-comment">//  设置虚拟主机</span><br>        connectionFactory.setUsername(<span class="hljs-string">&quot;huya&quot;</span>);<br>        connectionFactory.setPassword(<span class="hljs-string">&quot;huya&quot;</span>);<br>        <span class="hljs-comment">//  创建长连接</span><br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> connectionFactory.newConnection();<br>        <span class="hljs-comment">//  创建channel</span><br>        <span class="hljs-type">Channel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> connection.createChannel();<br>        <span class="hljs-comment">// 防止生产者还未启动队列</span><br>        channel.queueDeclare(QUEUE_NAME_2, <span class="hljs-literal">true</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">null</span>);<br>        channel.queueDeclare(QUEUE_NAME_3, <span class="hljs-literal">true</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">null</span>);<br><br>        channel.exchangeDeclare(EXCHANGE_NAME, BuiltinExchangeType.DIRECT, <span class="hljs-literal">true</span>, <span class="hljs-literal">true</span>, <span class="hljs-literal">null</span>);<br>        <span class="hljs-comment">//  监听队列</span><br>        <span class="hljs-type">Consumer</span> <span class="hljs-variable">consumer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultConsumer</span>(channel) &#123;<br>            <span class="hljs-comment">/**</span><br><span class="hljs-comment">             * <span class="hljs-doctag">@param</span> consumerTag the &lt;i&gt;consumer tag&lt;/i&gt; associated with the consumer </span><br><span class="hljs-comment">             * <span class="hljs-doctag">@param</span> envelope    packaging data for the message</span><br><span class="hljs-comment">             * <span class="hljs-doctag">@param</span> properties  content header data for the message</span><br><span class="hljs-comment">             * <span class="hljs-doctag">@param</span> body        the message body (opaque, client-specific byte array)</span><br><span class="hljs-comment">             */</span><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleDelivery</span><span class="hljs-params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="hljs-type">byte</span>[] body)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>                System.out.println(<span class="hljs-string">&quot;message&quot;</span> + <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(body));<br>            &#125;<br>        &#125;;<br><span class="hljs-comment">//        String queue  监听队列名称</span><br><span class="hljs-comment">//        boolean autoAck  是否自动应答</span><br><span class="hljs-comment">//        Consumer callback  //怎样处理这些消息</span><br>        channel.basicConsume(QUEUE_NAME_3, <span class="hljs-literal">true</span>, consumer);<br><br><span class="hljs-comment">//        channel.close();  consumer需要一直保持接收状态， 所以不能断开连接</span><br><span class="hljs-comment">//        connection.close();</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Topics">Topics</h4><img src="https://ykexc-1314584214.cos.ap-nanjing.myqcloud.com/20230304221545.png" style="zoom:80%;" /><center>topics<center/><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>当存在多个绑定关系时</mtext><mo separator="true">,</mo><mtext>主题模式就会很方便</mtext><mo separator="true">,</mo><mtext>主题模式和</mtext><mi>r</mi><mi>o</mi><mi>u</mi><mi>t</mi><mi>i</mi><mi>n</mi><mi>g</mi><mtext>模式的区别就是</mtext><mi>e</mi><mi>x</mi><mi>c</mi><mi>h</mi><mi>a</mi><mi>n</mi><mi>g</mi><mi>e</mi><mtext>类型不一样。</mtext></mrow><annotation encoding="application/x-tex">当存在多个绑定关系时,主题模式就会很方便,主题模式和routing模式的区别就是exchange类型不一样。</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord cjk_fallback">当存在多个绑定关系时</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord cjk_fallback">主题模式就会很方便</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord cjk_fallback">主题模式和</span><span class="mord mathnormal">ro</span><span class="mord mathnormal">u</span><span class="mord mathnormal">t</span><span class="mord mathnormal">in</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord cjk_fallback">模式的区别就是</span><span class="mord mathnormal">e</span><span class="mord mathnormal">x</span><span class="mord mathnormal">c</span><span class="mord mathnormal">han</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">e</span><span class="mord cjk_fallback">类型不一样。</span></span></span></span></p><blockquote><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi><mi>r</mi><mi>o</mi><mi>d</mi><mi>u</mi><mi>c</mi><mi>e</mi><mi>r</mi></mrow><annotation encoding="application/x-tex">producer</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">p</span><span class="mord mathnormal">ro</span><span class="mord mathnormal">d</span><span class="mord mathnormal">u</span><span class="mord mathnormal" style="margin-right:0.02778em;">cer</span></span></span></span></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.test.topics;<br><br><span class="hljs-keyword">import</span> com.rabbitmq.client.BuiltinExchangeType;<br><span class="hljs-keyword">import</span> com.rabbitmq.client.Channel;<br><span class="hljs-keyword">import</span> com.rabbitmq.client.Connection;<br><span class="hljs-keyword">import</span> com.rabbitmq.client.ConnectionFactory;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> mqz</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">QUEUE_NAME_2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;topic_queue1&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">QUEUE_NAME_3</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;topic_queue2&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">EXCHANGE_NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;topic_exchange&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">//  创建连接工厂</span><br>        <span class="hljs-type">ConnectionFactory</span> <span class="hljs-variable">connectionFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConnectionFactory</span>();<br>        connectionFactory.setHost(<span class="hljs-string">&quot;localhost&quot;</span>);<br>        connectionFactory.setPort(<span class="hljs-number">5672</span>);  <span class="hljs-comment">//不是http</span><br>        connectionFactory.setVirtualHost(<span class="hljs-string">&quot;/&quot;</span>);  <span class="hljs-comment">//  设置虚拟主机</span><br>        connectionFactory.setUsername(<span class="hljs-string">&quot;huya&quot;</span>);<br>        connectionFactory.setPassword(<span class="hljs-string">&quot;huya&quot;</span>);<br>        <span class="hljs-comment">//  创建长连接</span><br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> connectionFactory.newConnection();<br>        <span class="hljs-comment">//  创建channel</span><br>        <span class="hljs-type">Channel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> connection.createChannel();<br>        <span class="hljs-comment">// 防止生产者还未启动队列</span><br>        channel.queueDeclare(QUEUE_NAME_2, <span class="hljs-literal">true</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">null</span>);<br>        channel.queueDeclare(QUEUE_NAME_3, <span class="hljs-literal">true</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">null</span>);<br><br>        channel.exchangeDeclare(EXCHANGE_NAME, BuiltinExchangeType.TOPIC, <span class="hljs-literal">true</span>, <span class="hljs-literal">true</span>, <span class="hljs-literal">null</span>);<br><br>        <span class="hljs-comment">//  绑定交换机</span><br>        channel.queueBind(QUEUE_NAME_2, EXCHANGE_NAME, <span class="hljs-string">&quot;*.work&quot;</span>);<br>        channel.queueBind(QUEUE_NAME_3, EXCHANGE_NAME, <span class="hljs-string">&quot;ykexc.*&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello ykexc-work&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">message2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello xyx-work&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">message3</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello ykexc-xyx&quot;</span>;<br>        channel.basicPublish(EXCHANGE_NAME, <span class="hljs-string">&quot;ykexc.work&quot;</span>, <span class="hljs-literal">null</span>, message.getBytes());<br>        channel.basicPublish(EXCHANGE_NAME, <span class="hljs-string">&quot;xyx.work&quot;</span>, <span class="hljs-literal">null</span>, message2.getBytes());<br>        channel.basicPublish(EXCHANGE_NAME, <span class="hljs-string">&quot;ykexc.xyx&quot;</span>, <span class="hljs-literal">null</span>, message3.getBytes());<br>        channel.close();<br>        connection.close();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><blockquote><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>c</mi><mi>o</mi><mi>n</mi><mi>s</mi><mi>u</mi><mi>m</mi><mi>e</mi><mi>r</mi></mrow><annotation encoding="application/x-tex">consumer</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">co</span><span class="mord mathnormal">n</span><span class="mord mathnormal">s</span><span class="mord mathnormal">u</span><span class="mord mathnormal">m</span><span class="mord mathnormal" style="margin-right:0.02778em;">er</span></span></span></span></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//consumer1</span><br><span class="hljs-keyword">package</span> com.test.topics;<br><br><span class="hljs-keyword">import</span> com.rabbitmq.client.*;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> mqz</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">QUEUE_NAME_2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;topic_queue1&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">QUEUE_NAME_3</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;topic_queue2&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">EXCHANGE_NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;topic_exchange&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">//  创建连接工厂</span><br>        <span class="hljs-type">ConnectionFactory</span> <span class="hljs-variable">connectionFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConnectionFactory</span>();<br>        connectionFactory.setHost(<span class="hljs-string">&quot;localhost&quot;</span>);<br>        connectionFactory.setPort(<span class="hljs-number">5672</span>);  <span class="hljs-comment">//不是http</span><br>        connectionFactory.setVirtualHost(<span class="hljs-string">&quot;/&quot;</span>);  <span class="hljs-comment">//  设置虚拟主机</span><br>        connectionFactory.setUsername(<span class="hljs-string">&quot;huya&quot;</span>);<br>        connectionFactory.setPassword(<span class="hljs-string">&quot;huya&quot;</span>);<br>        <span class="hljs-comment">//  创建长连接</span><br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> connectionFactory.newConnection();<br>        <span class="hljs-comment">//  创建channel</span><br>        <span class="hljs-type">Channel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> connection.createChannel();<br>        <span class="hljs-comment">// 防止生产者还未启动队列</span><br>        channel.queueDeclare(QUEUE_NAME_2, <span class="hljs-literal">true</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">null</span>);<br>        channel.queueDeclare(QUEUE_NAME_3, <span class="hljs-literal">true</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">null</span>);<br><br>        channel.exchangeDeclare(EXCHANGE_NAME, BuiltinExchangeType.TOPIC, <span class="hljs-literal">true</span>, <span class="hljs-literal">true</span>, <span class="hljs-literal">null</span>);<br>        <span class="hljs-comment">//  监听队列</span><br>        <span class="hljs-type">Consumer</span> <span class="hljs-variable">consumer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultConsumer</span>(channel) &#123;<br>            <span class="hljs-comment">/**</span><br><span class="hljs-comment">             * <span class="hljs-doctag">@param</span> consumerTag the &lt;i&gt;consumer tag&lt;/i&gt; associated with the consumer</span><br><span class="hljs-comment">             * <span class="hljs-doctag">@param</span> envelope    packaging data for the message</span><br><span class="hljs-comment">             * <span class="hljs-doctag">@param</span> properties  content header data for the message</span><br><span class="hljs-comment">             * <span class="hljs-doctag">@param</span> body        the message body (opaque, client-specific byte array)</span><br><span class="hljs-comment">             * <span class="hljs-doctag">@throws</span> IOException</span><br><span class="hljs-comment">             */</span><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleDelivery</span><span class="hljs-params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="hljs-type">byte</span>[] body)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>                System.out.println(<span class="hljs-string">&quot;message&quot;</span> + <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(body));<br>            &#125;<br>        &#125;;<br><span class="hljs-comment">//        String queue  监听队列名称</span><br><span class="hljs-comment">//        boolean autoAck  是否自动应答</span><br><span class="hljs-comment">//        Consumer callback  //怎样处理这些消息</span><br>        channel.basicConsume(QUEUE_NAME_2, <span class="hljs-literal">true</span>, consumer);<br><br><span class="hljs-comment">//        channel.close();  consumer需要一直保持接收状态， 所以不能断开连接</span><br><span class="hljs-comment">//        connection.close();</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//consumer2</span><br><span class="hljs-keyword">package</span> com.test.topics;<br><br><span class="hljs-keyword">import</span> com.rabbitmq.client.*;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> mqz</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">QUEUE_NAME_2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;topic_queue1&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">QUEUE_NAME_3</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;topic_queue2&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">EXCHANGE_NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;topic_exchange&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">//  创建连接工厂</span><br>        <span class="hljs-type">ConnectionFactory</span> <span class="hljs-variable">connectionFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConnectionFactory</span>();<br>        connectionFactory.setHost(<span class="hljs-string">&quot;localhost&quot;</span>);<br>        connectionFactory.setPort(<span class="hljs-number">5672</span>);  <span class="hljs-comment">//不是http</span><br>        connectionFactory.setVirtualHost(<span class="hljs-string">&quot;/&quot;</span>);  <span class="hljs-comment">//  设置虚拟主机</span><br>        connectionFactory.setUsername(<span class="hljs-string">&quot;huya&quot;</span>);<br>        connectionFactory.setPassword(<span class="hljs-string">&quot;huya&quot;</span>);<br>        <span class="hljs-comment">//  创建长连接</span><br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> connectionFactory.newConnection();<br>        <span class="hljs-comment">//  创建channel</span><br>        <span class="hljs-type">Channel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> connection.createChannel();<br>        <span class="hljs-comment">// 防止生产者还未启动队列</span><br>        channel.queueDeclare(QUEUE_NAME_2, <span class="hljs-literal">true</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">null</span>);<br>        channel.queueDeclare(QUEUE_NAME_3, <span class="hljs-literal">true</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">null</span>);<br><br>        channel.exchangeDeclare(EXCHANGE_NAME, BuiltinExchangeType.TOPIC, <span class="hljs-literal">true</span>, <span class="hljs-literal">true</span>, <span class="hljs-literal">null</span>);<br>        <span class="hljs-comment">//  监听队列</span><br>        <span class="hljs-type">Consumer</span> <span class="hljs-variable">consumer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultConsumer</span>(channel) &#123;<br>            <span class="hljs-comment">/**</span><br><span class="hljs-comment">             * <span class="hljs-doctag">@param</span> consumerTag the &lt;i&gt;consumer tag&lt;/i&gt; associated with the consumer</span><br><span class="hljs-comment">             * <span class="hljs-doctag">@param</span> envelope    packaging data for the message</span><br><span class="hljs-comment">             * <span class="hljs-doctag">@param</span> properties  content header data for the message</span><br><span class="hljs-comment">             * <span class="hljs-doctag">@param</span> body        the message body (opaque, client-specific byte array)</span><br><span class="hljs-comment">             */</span><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleDelivery</span><span class="hljs-params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="hljs-type">byte</span>[] body)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>                System.out.println(<span class="hljs-string">&quot;message&quot;</span> + <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(body));<br>            &#125;<br>        &#125;;<br><span class="hljs-comment">//        String queue  监听队列名称</span><br><span class="hljs-comment">//        boolean autoAck  是否自动应答</span><br><span class="hljs-comment">//        Consumer callback  //怎样处理这些消息</span><br>        channel.basicConsume(QUEUE_NAME_3, <span class="hljs-literal">true</span>, consumer);<br><br><span class="hljs-comment">//        channel.close();  consumer需要一直保持接收状态， 所以不能断开连接</span><br><span class="hljs-comment">//        connection.close();</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MQ</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker使用</title>
    <link href="/2023/02/27/Docker%E4%BD%BF%E7%94%A8/"/>
    <url>/2023/02/27/Docker%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h3 id="Docker基本用法">Docker基本用法</h3><h4>将当前用户添加到<code>docker</code>用户组</h4><p>为了避免每次使用<code>docker</code>命令都需要加上<code>sudo</code>权限，可以将当前用户加入安装中自动创建的<code>docker</code>用户组(可以参考<a href="https://docs.docker.com/engine/install/linux-postinstall/">官方文档</a>)：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo usermod -aG docker $USER<br><span class="hljs-meta prompt_"># </span><span class="language-bash">如果不行可以试试这个</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">创建docker组</span><br>weiyj@ubuntu18:~$ sudo groupadd docker<br>groupadd: group &#x27;docker&#x27; already exists<br><span class="hljs-meta prompt_">#</span><span class="language-bash">将当前用户加入docker组</span><br>weiyj@ubuntu18:~$ sudo gpasswd -a $&#123;USER&#125; docker<br>Adding user weiyj to group docker<br><span class="hljs-meta prompt_">#</span><span class="language-bash">重启docker服务</span><br>weiyj@ubuntu18:~$ sudo service docker restart<br><span class="hljs-meta prompt_">#</span><span class="language-bash">刷新docker组成员</span><br>weiyj@ubuntu18:~$ newgrp - docker<br><span class="hljs-meta prompt_">#</span><span class="language-bash">再试试命令^_^</span><br>weiyj@ubuntu18:~$ docker images<br>REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE<br></code></pre></td></tr></table></figure><p>执行完此操作后，需要退出服务器，再重新登录回来，才可以省去<code>sudo</code>权限。</p><h4>镜像（images）</h4><ol><li><code>docker pull ubuntu:20.04</code>：拉取一个镜像</li><li><code>docker images</code>：列出本地所有镜像</li><li><code>docker image rm ubuntu:20.04</code> 或 <code>docker rmi ubuntu:20.04</code>：删除镜像<code>ubuntu:20.04</code></li><li><code>docker [container] commit CONTAINER IMAGE_NAME:TAG</code>：创建某个<code>container</code>的镜像</li><li><code>docker save -o ubuntu_20_04.tar ubuntu:20.04</code>：将镜像<code>ubuntu:20.04</code>导出到本地文件<code>ubuntu_20_04.tar</code>中</li><li><code>docker load -i ubuntu_20_04.tar</code>：将镜像<code>ubuntu:20.04</code>从本地文件<code>ubuntu_20_04.tar</code>中加载出来</li> <li><code>docker tag<local_image_name<remote_repository_name>:<version></code>：更改镜像名称或版本</li> <li><code>docker push<remote_repository_name>:<version></code>：将镜像push到远程仓库</li></ol><h4>容器(container)</h4><ol><li><code>docker [container] create -it ubuntu:20.04</code>：利用镜像<code>ubuntu:20.04</code>创建一个容器。</li><li><code>docker ps -a</code>：查看本地的所有容器</li><li><code>docker [container] start CONTAINER</code>：启动容器</li><li><code>docker [container] stop CONTAINER</code>：停止容器</li><li><code>docker [container] restart CONTAINER</code>：重启容器</li><li><code>docker [contaienr] run -itd ubuntu:20.04</code>：创建并启动一个容器</li><li><code>docker [container] attach CONTAINER</code>：进入容器<ul><li>先按<code>Ctrl-p</code>，再按<code>Ctrl-q</code>可以挂起容器</li></ul><ol>    <li><code>docker [container] exec CONTAINER COMMAND</code>：在容器中执行命令</li><li><code>docker [container] rm CONTAINER</code>：删除容器</li><li><code>docker container prune</code>：删除所有已停止的容器</li><li><code>docker export -o xxx.tar CONTAINER</code>：将容器<code>CONTAINER</code>导出到本地文件<code>xxx.tar</code>中</li><li><code>docker import xxx.tar image_name:tag</code>：将本地文件<code>xxx.tar</code>导入成镜像，并将镜像命名为<code>image_name:tag</code></li><li><code>docker export/import</code>与<code>docker save/load</code>的区别：<ul><li><code>export/import</code>会丢弃历史记录和元数据信息，仅保存容器当时的快照状态</li><li><code>save/load</code>会保存完整记录，体积更大</li></ul>    <li><code>docker top CONTAINER</code>：查看某个容器内的所有进程</li><li><code>docker stats</code>：查看所有容器的统计信息，包括CPU、内存、存储、网络等信息</li><li><code>docker cp xxx CONTAINER:xxx</code> 或 <code>docker cp CONTAINER:xxx xxx</code>：在本地和容器间复制文件</li><li><code>docker rename CONTAINER1 CONTAINER2</code>：重命名容器</li><li><code>docker update CONTAINER --memory 500MB</code>：修改容器限制</li></ul><li><code>docker logs <container_name></code>查看启动日志</li><li><code>docker commit<container_name_or_id><new_image_name></code>将容器创建为镜像</li></ol><h4>网络(network)</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs markdown">docker network create<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">network_name</span>&gt;</span></span> #创建一个网络<br>docker network connect<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">network_name</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">container_name_or_id</span>&gt;</span></span> #将容器连接到指定网络<br>docker inspect<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">container_name_or_id</span>&gt;</span></span> #验证容器网络<br>docker run -d --name<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">container_name</span>&gt;</span></span> --network<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">network_name</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">image_name</span>&gt;</span></span> #启动时添加网络<br></code></pre></td></tr></table></figure><h4>Docker卸载</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs markdown">yum remove docker \<br><br> docker-client \<br><br> docker-client-latest \<br><br> docker-common \<br><br> docker-latest \<br><br> docker-latest-logrotate \<br><br> docker-logrotate \<br><br> docker-engine<br></code></pre></td></tr></table></figure><h3 id="Dockerfile">Dockerfile</h3><h4>Dockerfile中的RUN、CMD、ENTYRYPOINT(仅在[]下)</h4><ul><li><p>CMD</p><p>cmd为docker容器构建好之后执行的命令，多个CMD会覆盖,CMD作为docker容器启动后默认执行的命令优先级最低,cmd如果采用<code>[]</code>形式，需先指定<code>/bin/bash</code>,这里不需要是因为本身就在centos下的shell。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">FROM</span> centos<br><span class="hljs-keyword">CMD</span><span class="language-bash"> [<span class="hljs-string">&quot;ls&quot;</span>,<span class="hljs-string">&quot;-a&quot;</span>]</span><br><span class="hljs-keyword">CMD</span><span class="language-bash"> [<span class="hljs-string">&quot;ls&quot;</span>, <span class="hljs-string">&quot;-l&quot;</span>]</span><br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs shell">ykexc@VM-4-7-ubuntu:~/docker/test$ vim Dockerfile<br>ykexc@VM-4-7-ubuntu:~/docker/test$ docker build -t test:1 .<br>[+] Building 3.7s (5/5) FINISHED<br>ykexc@VM-4-7-ubuntu:~/docker/test$ docker run --name test001 -it test:1<br>total 48<br>lrwxrwxrwx   1 root root    7 Nov  3  2020 bin -&gt; usr/bin<br>drwxr-xr-x   5 root root  360 Nov 10 08:58 dev<br>drwxr-xr-x   1 root root 4096 Nov 10 08:58 etc<br>drwxr-xr-x   2 root root 4096 Nov  3  2020 home<br>lrwxrwxrwx   1 root root    7 Nov  3  2020 lib -&gt; usr/lib<br>lrwxrwxrwx   1 root root    9 Nov  3  2020 lib64 -&gt; usr/lib64<br>drwx------   2 root root 4096 Sep 15  2021 lost+found<br>drwxr-xr-x   2 root root 4096 Nov  3  2020 media<br>drwxr-xr-x   2 root root 4096 Nov  3  2020 mnt<br>drwxr-xr-x   2 root root 4096 Nov  3  2020 opt<br>dr-xr-xr-x 255 root root    0 Nov 10 08:58 proc<br>dr-xr-x---   2 root root 4096 Sep 15  2021 root<br>drwxr-xr-x  11 root root 4096 Sep 15  2021 run<br>lrwxrwxrwx   1 root root    8 Nov  3  2020 sbin -&gt; usr/sbin<br>drwxr-xr-x   2 root root 4096 Nov  3  2020 srv<br>dr-xr-xr-x  13 root root    0 Nov 10 08:58 sys<br>drwxrwxrwt   7 root root 4096 Sep 15  2021 tmp<br>drwxr-xr-x  12 root root 4096 Sep 15  2021 usr<br>drwxr-xr-x  20 root root 4096 Sep 15  2021 var<br></code></pre></td></tr></table></figure><p>若在docker run命令后面加上的命令也会将CMD命令覆盖</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">ykexc@VM-4-7-ubuntu:~/docker/test$ ls<br>Dockerfile<br>ykexc@VM-4-7-ubuntu:~/docker/test$ docker run --name test002 -it test:1 ls -a<br>.  ..  .dockerenv  bin  dev  etc  home  lib  lib64  lost+found  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var<br><br></code></pre></td></tr></table></figure></li><li><p>ENTYRYPOINT</p><p>ENTYRYPOINT作为Docker容器运行后真正执行的命令,如果有CMD的话,那么CMD会作为参数</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">FROM</span> centos<br><span class="hljs-keyword">CMD</span><span class="language-bash"> [<span class="hljs-string">&quot;ls&quot;</span>,<span class="hljs-string">&quot;-a&quot;</span>]</span><br><span class="hljs-keyword">CMD</span><span class="language-bash"> [<span class="hljs-string">&quot;huya&quot;</span>]</span><br><br><span class="hljs-keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="hljs-string">&quot;echo&quot;</span>]</span><br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">ykexc@VM-4-7-ubuntu:~/docker/test$ docker run --name test002 -it test:2<br>huya  #输出的就是最后一个CMD<br>ykexc@VM-4-7-ubuntu:~/docker/test$ docker run --name test003 -it test:2 ykexc<br>ykexc #如果run后根参数那么就继续覆盖<br><br></code></pre></td></tr></table></figure></li><li><p>RUN</p><p>RUN命令为Dockerfile在构建镜像时执行的命令</p></li></ul><h4>Dockerfile中的ARG、ENV区别</h4><ul><li><p>ARG仅在dockerfile构建时起作用</p><p>可以在构建时覆盖ARG,可在<code>docker build</code> 后加<code>--build-arg &lt;ARG&gt;=xxx</code></p></li><li><p>ENV在构建时和在容器启动后都有用，并且使用 ENV 指定定义的环境变量始终会覆盖同名的 ARG 指令。</p><p>可以在运行时覆盖ENV,可在<code>docker run</code>后加<code>-e &lt;ENV&gt;=xxx</code></p></li></ul><h4>Dockerfile中的ADD、COPY区别</h4><ul><li>COPY类似于<code>docker cp</code>命令 <code>COPY &lt;当前目录下的文件&gt; &lt;镜像的路径&gt;</code></li><li>ADD和COPY类似,但是ADD会自动解压.tar.gz压缩包。</li></ul><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">FROM</span> ubuntu<br><span class="hljs-keyword">RUN</span><span class="language-bash"> apt update &amp;&amp; apt install -y openjdk-17-jdk</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> build/libs/gradle-test-0.0.1-SNAPSHOT.jar app.jar</span><br><span class="hljs-keyword">CMD</span><span class="language-bash"> java -jar app.jar</span><br><br>-------------------------------------------------------------<br><br><span class="hljs-keyword">FROM</span> openjdk:<span class="hljs-number">17</span>-slim<br><span class="hljs-keyword">ARG</span> JAR=build/libs/doc-<span class="hljs-number">0.0</span>.<span class="hljs-number">1</span>-SNAPSHOT.jar<br><span class="hljs-keyword">COPY</span><span class="language-bash"> <span class="hljs-variable">$&#123;JAR&#125;</span> app.jar</span><br><span class="hljs-keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="hljs-string">&quot;java&quot;</span>, <span class="hljs-string">&quot;-jar&quot;</span>, <span class="hljs-string">&quot;/app.jar&quot;</span>]</span><br><span class="hljs-keyword">EXPOSE</span> <span class="hljs-number">8088</span><br></code></pre></td></tr></table></figure><h3 id="Dockercompose">Dockercompose</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&quot;3.9&quot;</span><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">spring:</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">app_springboot</span><br>    <span class="hljs-attr">build:</span> <span class="hljs-string">.</span><br>    <span class="hljs-attr">ports:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;8087:8087&quot;</span><br>    <span class="hljs-attr">depends_on:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">mysql</span><br>    <span class="hljs-attr">restart:</span> <span class="hljs-string">always</span><br>  <span class="hljs-attr">mysql:</span><br>      <span class="hljs-attr">container_name:</span> <span class="hljs-string">app_mysql</span><br>      <span class="hljs-attr">image:</span> <span class="hljs-string">mysql:latest</span><br>      <span class="hljs-attr">environment:</span><br>        <span class="hljs-attr">MYSQL_ROOT_HOST:</span> <span class="hljs-string">&#x27;%&#x27;</span><br>        <span class="hljs-attr">MYSQL_ROOT_PASSWORD:</span> <span class="hljs-string">&#x27;123456.root&#x27;</span><br>        <span class="hljs-attr">MYSQL_DATABASE:</span> <span class="hljs-string">&#x27;study&#x27;</span><br>        <span class="hljs-attr">TZ:</span> <span class="hljs-string">&#x27;Asia/Shanghai&#x27;</span><br>      <span class="hljs-attr">ports:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;3306:3306&quot;</span><br>  <span class="hljs-attr">redis:</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">app_redis</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">redis:latest</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;6379:6379&quot;</span><br>      <br>      <span class="hljs-string">-------------------------------------------</span><br>      <span class="hljs-attr">version:</span> <span class="hljs-string">&quot;3.9&quot;</span><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">spring:</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">se_sb</span><br>    <span class="hljs-attr">build:</span> <span class="hljs-string">.</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;8085:8085&quot;</span><br>    <span class="hljs-attr">restart:</span> <span class="hljs-string">always</span><br>  <span class="hljs-attr">mysql:</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">se_mysql</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">mysql:latest</span><br>    <span class="hljs-attr">environment:</span><br>      <span class="hljs-attr">MYSQL_ROOT_HOST:</span> <span class="hljs-string">&#x27;%&#x27;</span><br>      <span class="hljs-attr">MYSQL_ROOT_PASSWORD:</span> <span class="hljs-string">&#x27;123456.root&#x27;</span><br>      <span class="hljs-attr">MYSQL_DATABASE:</span> <span class="hljs-string">&#x27;sty&#x27;</span><br>      <span class="hljs-attr">TZ:</span> <span class="hljs-string">&#x27;Asia/Shanghai&#x27;</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;3306:3306&quot;</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./data:/var/lib/mysql</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./init:/docker-entrypoint-initdb.d</span><br>  <span class="hljs-attr">redis:</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">se_redis</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">redis:latest</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;6379:6379&quot;</span><br><br><br></code></pre></td></tr></table></figure><h3 id="Tips">Tips</h3><h5>临时端口映射</h5><p>1.查询容器ip: <code>docker inspect &lt;container_id&gt; | grep IPAddress</code></p><p>2.宿主机配置iptables:</p><ul><li>​<code>iptables -t nat -A DOCKER -p tcp --dport &lt;host_port&gt; -j DNAT --to-destination &lt;container_ip&gt;:&lt;docker_port&gt;</code></li><li><code>iptables -t nat -A POSTROUTING -j MASQUERADE -p tcp --source &lt;container_ip&gt; --destination &lt;container_ip&gt; --dport &lt;docker_port&gt;</code></li><li><code>iptables -A DOCKER -j ACCEPT -p tcp --destination &lt;container_ip&gt; --dport &lt;docker_port&gt;</code></li></ul><p>3.查看是否成功: <code>iptables -t nat -nvL</code></p><p>例如：将容器内<code>22</code>端口映射到宿主机<code>20000</code>端口。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">172.17.0.2   ---&gt;    container_ip<br>20000        ---&gt;    host_port<br>22           ---&gt;    docker_port<br><br>iptables -t nat -A DOCKER -p tcp --dport 20000 -j DNAT --to-destination 172.17.0.2:22<br>iptables -t nat -A POSTROUTING -j MASQUERADE -p tcp --source 172.17.0.2 --destination 172.17.0.2 --dport 22<br>iptables -A DOCKER -j ACCEPT -p tcp --destination 172.17.0.2 --dport 22<br><br>iptables -t nat -nvL #（查看是否映射成功）<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>AIGamePlatform</title>
    <link href="/2022/05/06/AIGamePlatform/"/>
    <url>/2022/05/06/AIGamePlatform/</url>
    
    <content type="html"><![CDATA[<h1>绕蛇</h1><p>本游戏与传统的贪吃蛇游戏有所不同,游戏采用固定蛇的长度，两名玩家可以真人操作也可以使用bot操作，让对手撞到墙上或蛇身体上，自己即可获胜。<br><img src="https://image.itbaima.cn/images/76/image-20230916222451692.png" alt="image.png" style="zoom:50%;" /></p><p>每局开始时都会有提示，告知自己位于哪一方.如果是真人匹配可以通过上下左右四个方向键来控制蛇前进的方向(需要在3s内做出响应).如果是bot不需要任何操作,观战即可。<br><img src="https://image.itbaima.cn/images/76/image-20230916228009989.png" alt="image.png" style="zoom:80%;" /><br>下面是Java和c++的演示程序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> dx[] = &#123;-<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> dy[] = &#123;<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, -<span class="hljs-number">1</span>&#125;;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span>[][] g = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">13</span>][<span class="hljs-number">14</span>];<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> ax, ay, bx, by;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> List&lt;Cell&gt;[] snake = <span class="hljs-keyword">new</span> <span class="hljs-title class_">List</span>[<span class="hljs-number">2</span>];<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">rows</span> <span class="hljs-operator">=</span> <span class="hljs-number">13</span>, cols = <span class="hljs-number">14</span>;<br><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Cell</span> &#123;<br>        <span class="hljs-type">int</span> x, y;<br><br>        Cell(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y) &#123;<br>            <span class="hljs-built_in">this</span>.x = x;<br>            <span class="hljs-built_in">this</span>.y = y;<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Integer <span class="hljs-title function_">nextMove</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> snake[<span class="hljs-number">0</span>].get(snake[<span class="hljs-number">0</span>].size() - <span class="hljs-number">1</span>).x + dx[i];<br>            <span class="hljs-type">int</span> <span class="hljs-variable">y</span> <span class="hljs-operator">=</span> snake[<span class="hljs-number">0</span>].get(snake[<span class="hljs-number">0</span>].size() - <span class="hljs-number">1</span>).y + dy[i];<br>            <span class="hljs-keyword">if</span>(x &gt;= <span class="hljs-number">0</span> &amp;&amp; y &gt;= <span class="hljs-number">0</span> &amp;&amp; x &lt; rows &amp;&amp; y &lt; cols &amp;&amp; g[x][y] == <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">return</span> i;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        before();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> nextMove();<br>        System.out.print(d);<br>    &#125;<br><br>    <span class="hljs-comment">// 处理输入</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">before</span><span class="hljs-params">()</span> &#123;<br>        Scanner cin=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">input</span> <span class="hljs-operator">=</span> cin.nextLine();<br>        String[] strs = input.split(<span class="hljs-string">&quot;#&quot;</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, k = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">13</span>; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">14</span>; j++, k++) &#123;<br>                <span class="hljs-keyword">if</span> (strs[<span class="hljs-number">0</span>].charAt(k) == <span class="hljs-string">&#x27;1&#x27;</span>) &#123;<br>                    g[i][j] = <span class="hljs-number">1</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        ax = Integer.parseInt(strs[<span class="hljs-number">1</span>]);<br>        ay = Integer.parseInt(strs[<span class="hljs-number">2</span>]);<br>        bx = Integer.parseInt(strs[<span class="hljs-number">4</span>]);<br>        by = Integer.parseInt(strs[<span class="hljs-number">5</span>]);<br><br>        snake[<span class="hljs-number">0</span>] = getCells(ax, ay, strs[<span class="hljs-number">3</span>]);<br>        snake[<span class="hljs-number">1</span>] = getCells(bx, by, strs[<span class="hljs-number">6</span>]);<br><br>        <span class="hljs-keyword">for</span> (Cell c : snake[<span class="hljs-number">0</span>]) &#123;<br>            g[c.x][c.y] = <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (Cell c : snake[<span class="hljs-number">1</span>]) &#123;<br>            g[c.x][c.y] = <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">checkTailIncreasing</span><span class="hljs-params">(<span class="hljs-type">int</span> steps)</span> &#123;<br>        <span class="hljs-keyword">if</span> (steps &lt;= <span class="hljs-number">10</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> steps % <span class="hljs-number">3</span> == <span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> List&lt;Cell&gt; <span class="hljs-title function_">getCells</span><span class="hljs-params">(<span class="hljs-type">int</span> sx, <span class="hljs-type">int</span> sy, String steps)</span> &#123;<br>        steps = steps.substring(<span class="hljs-number">1</span>, steps.length() - <span class="hljs-number">1</span>);<br>        List&lt;Cell&gt; res = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-type">int</span>[] dx = &#123;-<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>&#125;, dy = &#123;<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, -<span class="hljs-number">1</span>&#125;;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> sx, y = sy;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">step</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        res.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Cell</span>(x, y));<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; steps.length(); i++) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> steps.charAt(i) - <span class="hljs-string">&#x27;0&#x27;</span>;<br>            x += dx[d];<br>            y += dy[d];<br>            res.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Cell</span>(x, y));<br>            <span class="hljs-keyword">if</span> (!checkTailIncreasing(++step)) &#123;<br>                res.remove(<span class="hljs-number">0</span>);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> x first</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> y second</span><br><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">typedef</span> pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; pii;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">20</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> dx[]&#123; <span class="hljs-number">-1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span> &#125;;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> dy[]&#123; <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">-1</span> &#125;;<br><br><span class="hljs-type">int</span> ax, ay, bx, by, rows = <span class="hljs-number">13</span>, cols = <span class="hljs-number">14</span>, direction = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> g[N][N];<br>vector&lt;pii&gt; snake[<span class="hljs-number">2</span>];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">nextMove</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i ++) &#123;<br>        <span class="hljs-type">int</span> x = snake[<span class="hljs-number">0</span>][snake[<span class="hljs-number">0</span>].<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>].x + dx[i];<br>        <span class="hljs-type">int</span> y = snake[<span class="hljs-number">0</span>][snake[<span class="hljs-number">0</span>].<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>].y + dy[i];<br>        <span class="hljs-keyword">if</span>(x &gt;= <span class="hljs-number">0</span> &amp;&amp; y &gt;= <span class="hljs-number">0</span> &amp;&amp; x &lt; rows &amp;&amp; y &lt; cols &amp;&amp; g[x][y] == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> i;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">check_tail_increasing</span><span class="hljs-params">(<span class="hljs-type">int</span> steps)</span> </span>&#123; <span class="hljs-comment">// 检测当前回合蛇是否变长</span><br>    <span class="hljs-keyword">if</span> (steps &lt;= <span class="hljs-number">10</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> steps % <span class="hljs-number">3</span> == <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-function">vector&lt;pii&gt; <span class="hljs-title">getCells</span><span class="hljs-params">(<span class="hljs-type">int</span> sx, <span class="hljs-type">int</span> sy, string steps)</span> </span>&#123;<br>    steps = steps.<span class="hljs-built_in">substr</span>(<span class="hljs-number">1</span>, steps.<span class="hljs-built_in">length</span>() - <span class="hljs-number">2</span>);<br>    vector&lt;pii&gt; res;<br>    <span class="hljs-type">int</span> x = sx, y = sy;<br>    <span class="hljs-type">int</span> step = <span class="hljs-number">0</span>;<br>    res.<span class="hljs-built_in">push_back</span>(&#123;x, y&#125;);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; steps.<span class="hljs-built_in">size</span>(); i++) &#123;<br>        <span class="hljs-type">int</span> d = steps[i] - <span class="hljs-string">&#x27;0&#x27;</span>;<br>        x += dx[d];<br>        y += dy[d];<br>        res.<span class="hljs-built_in">push_back</span>(&#123;x, y&#125;);<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">check_tail_increasing</span>(++step)) &#123;<br>            res.<span class="hljs-built_in">erase</span>(res.<span class="hljs-built_in">begin</span>());<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">before</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    string str, split = <span class="hljs-string">&quot;#&quot;</span>;<br>    vector&lt;string&gt; s;<br>    cin &gt;&gt; str;<br><span class="hljs-keyword">if</span> (str == <span class="hljs-string">&quot;&quot;</span>) <span class="hljs-keyword">return</span>;<br>string strs = str + split;<br><span class="hljs-type">size_t</span> pos = strs.<span class="hljs-built_in">find</span>(split);<br> <br><span class="hljs-keyword">while</span> (pos != strs.npos)<br>&#123;<br>string temp = strs.<span class="hljs-built_in">substr</span>(<span class="hljs-number">0</span>, pos);<br>s.<span class="hljs-built_in">push_back</span>(temp);<br>strs = strs.<span class="hljs-built_in">substr</span>(pos + <span class="hljs-number">1</span>, strs.<span class="hljs-built_in">size</span>());<br>pos = strs.<span class="hljs-built_in">find</span>(split);<br>&#125;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>, k = <span class="hljs-number">0</span>; i &lt; rows; i++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; cols; j++, k++) &#123;<br>            <span class="hljs-keyword">if</span> (s[<span class="hljs-number">0</span>][k] == <span class="hljs-string">&#x27;1&#x27;</span>) &#123;<br>                g[i][j] = <span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    ax = <span class="hljs-built_in">stoi</span>(s[<span class="hljs-number">1</span>],<span class="hljs-number">0</span>,<span class="hljs-number">10</span>);<br>    ay = <span class="hljs-built_in">stoi</span>(s[<span class="hljs-number">2</span>],<span class="hljs-number">0</span>,<span class="hljs-number">10</span>);<br>    bx = <span class="hljs-built_in">stoi</span>(s[<span class="hljs-number">4</span>],<span class="hljs-number">0</span>,<span class="hljs-number">10</span>);<br>    by = <span class="hljs-built_in">stoi</span>(s[<span class="hljs-number">5</span>],<span class="hljs-number">0</span>,<span class="hljs-number">10</span>);<br>    <br>    snake[<span class="hljs-number">0</span>] = <span class="hljs-built_in">getCells</span>(ax, ay, s[<span class="hljs-number">3</span>]);<br>    snake[<span class="hljs-number">1</span>] = <span class="hljs-built_in">getCells</span>(bx, by, s[<span class="hljs-number">6</span>]);<br><br>    <span class="hljs-keyword">for</span> (pii c : snake[<span class="hljs-number">0</span>]) &#123;<br>        g[c.x][c.y] = <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (pii c : snake[<span class="hljs-number">1</span>]) &#123;<br>        g[c.x][c.y] = <span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">before</span>();<br>    direction = <span class="hljs-built_in">nextMove</span>();<br>    cout &lt;&lt; direction;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1>五子棋</h1><p>五子棋玩法与传统玩法相同,分为黑方和白方,采用回合制玩法,玩家每回合的思考时间不能超过1min,bot代码的运行时间复杂度需控制在1s内。<br><img src="https://image.itbaima.cn/images/76/image-20230916224003257.png" alt="image.png" style="zoom:80%;" /><br>以下是Java和C++的示例代码(因五子棋的bot算法较为复杂,以下提供的只能按行列枚举走)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.HashSet;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-keyword">import</span> java.util.Set;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">mySteps</span> <span class="hljs-operator">=</span> in.nextLine(), opponentSteps = in.nextLine();<br>        String[] split = mySteps.split(<span class="hljs-string">&quot;\\*&quot;</span>);  <span class="hljs-comment">//进行转义</span><br>        String[] split1 = opponentSteps.split(<span class="hljs-string">&quot;\\*&quot;</span>);<br>        Set&lt;String&gt; set1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;(Arrays.asList(split));<br>        Set&lt;String&gt; set2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;(Arrays.asList(split1));<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; x &lt;= <span class="hljs-number">15</span>; x++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">y</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; y &lt;= <span class="hljs-number">15</span>; y++) &#123;<br>                <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> x + <span class="hljs-string">&quot;#&quot;</span> + y;<br>                <span class="hljs-keyword">if</span> (!set1.contains(s) &amp;&amp; !set2.contains(s)) &#123;<br>                    System.out.println(x + <span class="hljs-string">&quot;#&quot;</span> + y);<br>                    <span class="hljs-keyword">return</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>        in.close();<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sstream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unordered_set&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    std::string mySteps, opponentSteps;<br>    std::<span class="hljs-built_in">getline</span>(std::cin, mySteps);<br>    std::<span class="hljs-built_in">getline</span>(std::cin, opponentSteps);<br><br>    std::unordered_set&lt;std::string&gt; mySet, opponentSet;<br>    <span class="hljs-function">std::istringstream <span class="hljs-title">iss1</span><span class="hljs-params">(mySteps)</span>, <span class="hljs-title">iss2</span><span class="hljs-params">(opponentSteps)</span></span>;<br>    std::string step;<br><br>    <span class="hljs-keyword">while</span> (std::<span class="hljs-built_in">getline</span>(iss1, step, <span class="hljs-string">&#x27;*&#x27;</span>)) &#123;<br>        mySet.<span class="hljs-built_in">insert</span>(step);<br>    &#125;<br><br>    <span class="hljs-keyword">while</span> (std::<span class="hljs-built_in">getline</span>(iss2, step, <span class="hljs-string">&#x27;*&#x27;</span>)) &#123;<br>        opponentSet.<span class="hljs-built_in">insert</span>(step);<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> x = <span class="hljs-number">1</span>; x &lt;= <span class="hljs-number">15</span>; ++x) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> y = <span class="hljs-number">1</span>; y &lt;= <span class="hljs-number">15</span>; ++y) &#123;<br>            std::string position = std::<span class="hljs-built_in">to_string</span>(x) + <span class="hljs-string">&quot;#&quot;</span> + std::<span class="hljs-built_in">to_string</span>(y);<br>            <span class="hljs-keyword">if</span> (mySet.<span class="hljs-built_in">find</span>(position) == mySet.<span class="hljs-built_in">end</span>() &amp;&amp; opponentSet.<span class="hljs-built_in">find</span>(position) == opponentSet.<span class="hljs-built_in">end</span>()) &#123;<br>                std::cout &lt;&lt; position &lt;&lt; std::endl;<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode#362</title>
    <link href="/2022/03/07/LeetCode-362/"/>
    <url>/2022/03/07/LeetCode-362/</url>
    
    <content type="html"><![CDATA[<h1>LeetCode#362</h1><p>1.<a href="https://leetcode.cn/problems/points-that-intersect-with-cars/">与车相交的点</a></p><p>给你一个下标从 <strong>0</strong> 开始的二维整数数组 <code>nums</code> 表示汽车停放在数轴上的坐标。对于任意下标 <code>i</code>，<code>nums[i] = [starti, endi]</code> ，其中 <code>starti</code> 是第 <code>i</code> 辆车的起点，<code>endi</code> 是第 <code>i</code> 辆车的终点。</p><p>返回数轴上被车 <strong>任意部分</strong> 覆盖的整数点的数目。</p><p><strong>示例 1：</strong></p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs lua">输入：nums = <span class="hljs-string">[[3,6],[1,5],[4,7]]</span><br>输出：<span class="hljs-number">7</span><br>解释：从 <span class="hljs-number">1</span> 到 <span class="hljs-number">7</span> 的所有点都至少与一辆车相交，因此答案为 <span class="hljs-number">7</span> 。<br></code></pre></td></tr></table></figure><p>可以使用差分加前缀和达到线性时间复杂度</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">numberOfPoints</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]]</span>) -&gt; <span class="hljs-built_in">int</span>:<br><br>        diff = [<span class="hljs-number">0</span>] * <span class="hljs-number">300</span><br>        <span class="hljs-keyword">for</span> x, y <span class="hljs-keyword">in</span> nums:<br>            diff[x] += <span class="hljs-number">1</span><br>            diff[y + <span class="hljs-number">1</span>] -= <span class="hljs-number">1</span><br>        ans = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">120</span>):<br>            diff[i] += diff[i - <span class="hljs-number">1</span>]<br>            <span class="hljs-keyword">if</span> diff[i] &gt;= <span class="hljs-number">1</span>:<br>                ans += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> ans<br></code></pre></td></tr></table></figure><p>2.<a href="https://leetcode.cn/problems/determine-if-a-cell-is-reachable-at-a-given-time/">判断能否在给定时间到达单元格</a></p><p>给你四个整数 <code>sx</code>、<code>sy</code>、<code>fx</code>、<code>fy</code> 以及一个 <strong>非负整数</strong> <code>t</code> 。</p><p>在一个无限的二维网格中，你从单元格 <code>(sx, sy)</code> 开始出发。每一秒，你 <strong>必须</strong> 移动到任一与之前所处单元格相邻的单元格中。</p><p>如果你能在 <strong>恰好</strong> <code>t</code> <strong>秒</strong> 后到达单元格 <code>(fx, fy)</code> ，返回 <code>true</code> ；否则，返回 <code>false</code> 。</p><p>单元格的 <strong>相邻单元格</strong> 是指该单元格周围与其至少共享一个角的 8 个单元格。你可以多次访问同一个单元格。</p><p><strong>示例 1：</strong></p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gcode">输入：sx = <span class="hljs-number">2</span>, sy = <span class="hljs-number">4</span>, fx = <span class="hljs-number">7</span>, fy = <span class="hljs-number">7</span>, t = <span class="hljs-number">6</span><br>输出：true<br>解释：从单元格 <span class="hljs-comment">(2, 4)</span> 开始出发，穿过上图标注的单元格，可以在恰好 <span class="hljs-number">6</span> 秒后到达单元格 <span class="hljs-comment">(7, 7)</span> 。 <br></code></pre></td></tr></table></figure><p>当初始点和目标点相同时需特判(t!=1),其他情况只要满足<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>max</mi><mo>⁡</mo><mo stretchy="false">(</mo><mi mathvariant="normal">∣</mi><mi>s</mi><mi>x</mi><mo>−</mo><mi>f</mi><mi>x</mi><mi mathvariant="normal">∣</mi><mo separator="true">,</mo><mi mathvariant="normal">∣</mi><mi>s</mi><mi>y</mi><mo>−</mo><mi>f</mi><mi>y</mi><mi mathvariant="normal">∣</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\max(|sx-fx|,|sy-fy|)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop">max</span><span class="mopen">(</span><span class="mord">∣</span><span class="mord mathnormal">s</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal">x</span><span class="mord">∣</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">∣</span><span class="mord mathnormal" style="margin-right:0.03588em;">sy</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mord">∣</span><span class="mclose">)</span></span></span></span>即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">isReachableAtTime</span>(<span class="hljs-params">self, sx: <span class="hljs-built_in">int</span>, sy: <span class="hljs-built_in">int</span>, fx: <span class="hljs-built_in">int</span>, fy: <span class="hljs-built_in">int</span>, t: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">bool</span>:<br>        <span class="hljs-keyword">if</span> sx == fx <span class="hljs-keyword">and</span> sy == fy <span class="hljs-keyword">and</span> t == <span class="hljs-number">1</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>        mx = <span class="hljs-built_in">max</span>(<span class="hljs-built_in">abs</span>(sx - fx), <span class="hljs-built_in">abs</span>(sy - fy))<br>        <span class="hljs-keyword">return</span> mx &lt;= t<br></code></pre></td></tr></table></figure><p>3.<a href="https://leetcode.cn/problems/minimum-moves-to-spread-stones-over-grid/">将石头分散到网格图的最少移动次数</a></p><p>给你一个大小为 <code>3 * 3</code> ，下标从 <strong>0</strong> 开始的二维整数矩阵 <code>grid</code> ，分别表示每一个格子里石头的数目。网格图中总共恰好有 <code>9</code> 个石头，一个格子里可能会有 <strong>多个</strong> 石头。</p><p>每一次操作中，你可以将一个石头从它当前所在格子移动到一个至少有一条公共边的相邻格子。</p><p>请你返回每个格子恰好有一个石头的 <strong>最少移动次数</strong> 。</p><p>暴搜即可，枚举两两匹配最小代价</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">minimumMoves</span>(<span class="hljs-params">self, grid: <span class="hljs-type">List</span>[<span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]]</span>) -&gt; <span class="hljs-built_in">int</span>:<br>        n = <span class="hljs-number">3</span><br>        s = []<br>        e = []<br>        mp = [[<span class="hljs-number">0</span>]*n <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n)]<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>                <span class="hljs-keyword">if</span> grid[i][j]&gt;<span class="hljs-number">1</span>:<br>                    s.append((i,j))<br>                    mp[i][j] = grid[i][j]-<span class="hljs-number">1</span><br>                <span class="hljs-keyword">elif</span> grid[i][j]&lt;<span class="hljs-number">1</span>:<br>                    e.append((i,j))<br>        ans = inf<br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">dfs</span>(<span class="hljs-params">i,cnt</span>):<br>            <span class="hljs-keyword">if</span> i==<span class="hljs-built_in">len</span>(e):<br>                <span class="hljs-keyword">nonlocal</span> ans<br>                ans = <span class="hljs-built_in">min</span>(ans,cnt)<br>                <span class="hljs-keyword">return</span><br>            <span class="hljs-keyword">for</span> x,y <span class="hljs-keyword">in</span> s:<br>                <span class="hljs-keyword">if</span> mp[x][y]&gt;<span class="hljs-number">0</span>:<br>                    mp[x][y]-=<span class="hljs-number">1</span><br>                    le = <span class="hljs-built_in">abs</span>(x-e[i][<span class="hljs-number">0</span>])+<span class="hljs-built_in">abs</span>(y-e[i][<span class="hljs-number">1</span>])<br>                    dfs(i+<span class="hljs-number">1</span>,cnt+le)<br>                    mp[x][y]+=<span class="hljs-number">1</span><br>        dfs(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>)        <br>        <br>        <span class="hljs-keyword">return</span> ans<br></code></pre></td></tr></table></figure><p>比赛时写了一个非常丑陋且慢的<code>类</code>状压</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">minimumMoves</span>(<span class="hljs-params">self, grid: <span class="hljs-type">List</span>[<span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]]</span>) -&gt; <span class="hljs-built_in">int</span>:<br><br>        s1, s2 = <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>):<br>            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>):<br>                <span class="hljs-keyword">if</span> grid[i][j] == <span class="hljs-number">0</span>:<br>                    s1 += <span class="hljs-built_in">str</span>(<span class="hljs-number">3</span> * i + j)<br>                <span class="hljs-keyword">elif</span> grid[i][j] &gt; <span class="hljs-number">1</span>:<br>                    s2 += <span class="hljs-built_in">str</span>(<span class="hljs-number">3</span> * i + j) + <span class="hljs-built_in">str</span>(grid[i][j])<br>        k = <span class="hljs-built_in">len</span>(s1)<br>        res = <span class="hljs-string">&#x27;&#x27;</span><br>        <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(k):<br>            res += <span class="hljs-string">&#x27;-&#x27;</span><br><br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">get</span>(<span class="hljs-params">c: <span class="hljs-built_in">int</span>, c1: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>            x1, y1 = c // <span class="hljs-number">3</span>, c % <span class="hljs-number">3</span><br>            x2, y2 = c1 // <span class="hljs-number">3</span>, c1 % <span class="hljs-number">3</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">abs</span>(x1 - x2) + <span class="hljs-built_in">abs</span>(y1 - y2)<br><br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">do</span>(<span class="hljs-params">s: <span class="hljs-built_in">str</span>, idx: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">str</span>:<br>            lis = <span class="hljs-built_in">list</span>(s)<br>            lis[idx] = <span class="hljs-string">&#x27;-&#x27;</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;</span>.join(c <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> lis)<br><br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">do1</span>(<span class="hljs-params">ss: <span class="hljs-built_in">str</span>, idx: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">str</span>:<br>            lis = <span class="hljs-built_in">list</span>(ss)<br>            lis[idx] = <span class="hljs-built_in">str</span>(<span class="hljs-built_in">int</span>(lis[idx]) - <span class="hljs-number">1</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;</span>.join(c <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> lis)<br><br><span class="hljs-meta">        @cache</span><br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">dfs</span>(<span class="hljs-params">s: <span class="hljs-built_in">str</span>, ss: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>            <span class="hljs-keyword">if</span> s == res:<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>            ans = <span class="hljs-number">10</span> ** <span class="hljs-number">9</span><br>            <span class="hljs-keyword">for</span> idx, c <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(s):<br>                <span class="hljs-keyword">if</span> c == <span class="hljs-string">&#x27;-&#x27;</span>:<br>                    <span class="hljs-keyword">continue</span><br>                l = <span class="hljs-built_in">len</span>(ss)<br>                <span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, l, <span class="hljs-number">2</span>):<br>                    c1, v = <span class="hljs-built_in">int</span>(ss[t]), <span class="hljs-built_in">int</span>(ss[t + <span class="hljs-number">1</span>])<br>                    <span class="hljs-keyword">if</span> v == <span class="hljs-number">1</span>:<br>                        <span class="hljs-keyword">continue</span><br>                    ans = <span class="hljs-built_in">min</span>(ans, dfs(do(s, idx), do1(ss, t + <span class="hljs-number">1</span>)) + get(<span class="hljs-built_in">int</span>(c), c1))<br>            <span class="hljs-keyword">return</span> ans<br><br>        <span class="hljs-keyword">return</span> dfs(s1, s2)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>leetcode</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
