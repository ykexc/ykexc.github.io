<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>RabbitMQ基础</title>
    <link href="/2023/03/07/RabbitMQ%E5%9F%BA%E7%A1%80/"/>
    <url>/2023/03/07/RabbitMQ%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1>RabbitMQ</h1><h3 id="工作原理">工作原理</h3><img src = "https://ykexc-1314584214.cos.ap-nanjing.myqcloud.com/20230228192132.png" style="zoom:80%;"  ><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mtext>、客户端连接到消息队列服务器，打开一个c</mtext><mi>h</mi><mi>a</mi><mi>n</mi><mi>n</mi><mi>e</mi><mi>l</mi><mtext>。</mtext></mrow><annotation encoding="application/x-tex">1、客户端连接到消息队列服务器，打开一个\text channel。</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord">1</span><span class="mord cjk_fallback">、客户端连接到消息队列服务器，打开一个</span><span class="mord text"><span class="mord">c</span></span><span class="mord mathnormal">hann</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord cjk_fallback">。</span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>2</mn><mtext>、客户端声明一个e</mtext><mi>x</mi><mi>c</mi><mi>h</mi><mi>a</mi><mi>n</mi><mi>g</mi><mi>e</mi><mtext>，并设置相关属性。</mtext></mrow><annotation encoding="application/x-tex">2、客户端声明一个\text exchange，并设置相关属性。</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord">2</span><span class="mord cjk_fallback">、客户端声明一个</span><span class="mord text"><span class="mord">e</span></span><span class="mord mathnormal">x</span><span class="mord mathnormal">c</span><span class="mord mathnormal">han</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">e</span><span class="mord cjk_fallback">，并设置相关属性。</span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>3</mn><mtext>、客户端声明一个q</mtext><mi>u</mi><mi>e</mi><mi>u</mi><mi>e</mi><mtext>，并设置相关属性。</mtext></mrow><annotation encoding="application/x-tex">3、客户端声明一个\text queue，并设置相关属性。</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord">3</span><span class="mord cjk_fallback">、客户端声明一个</span><span class="mord text"><span class="mord">q</span></span><span class="mord mathnormal">u</span><span class="mord mathnormal">e</span><span class="mord mathnormal">u</span><span class="mord mathnormal">e</span><span class="mord cjk_fallback">，并设置相关属性。</span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>4</mn><mtext>、客户端使用r</mtext><mi>o</mi><mi>u</mi><mi>t</mi><mi>i</mi><mi>n</mi><mi>g</mi><mi>k</mi><mi>e</mi><mi>y</mi><mtext>，在e</mtext><mi>x</mi><mi>c</mi><mi>h</mi><mi>a</mi><mi>n</mi><mi>g</mi><mi>e</mi><mtext>和q</mtext><mi>u</mi><mi>e</mi><mi>u</mi><mi>e</mi><mtext>之间建立好绑定关系。</mtext></mrow><annotation encoding="application/x-tex">4、客户端使用\text routing key，在\text exchange和\text queue之间建立好绑定关系。</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord">4</span><span class="mord cjk_fallback">、客户端使用</span><span class="mord text"><span class="mord">r</span></span><span class="mord mathnormal">o</span><span class="mord mathnormal">u</span><span class="mord mathnormal">t</span><span class="mord mathnormal">in</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mord mathnormal" style="margin-right:0.03588em;">ey</span><span class="mord cjk_fallback">，在</span><span class="mord text"><span class="mord">e</span></span><span class="mord mathnormal">x</span><span class="mord mathnormal">c</span><span class="mord mathnormal">han</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">e</span><span class="mord cjk_fallback">和</span><span class="mord text"><span class="mord">q</span></span><span class="mord mathnormal">u</span><span class="mord mathnormal">e</span><span class="mord mathnormal">u</span><span class="mord mathnormal">e</span><span class="mord cjk_fallback">之间建立好绑定关系。</span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>5</mn><mtext>、客户端投递消息到e</mtext><mi>x</mi><mi>c</mi><mi>h</mi><mi>a</mi><mi>n</mi><mi>g</mi><mi>e</mi><mtext>。</mtext></mrow><annotation encoding="application/x-tex">5、客户端投递消息到\text exchange。</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord">5</span><span class="mord cjk_fallback">、客户端投递消息到</span><span class="mord text"><span class="mord">e</span></span><span class="mord mathnormal">x</span><span class="mord mathnormal">c</span><span class="mord mathnormal">han</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">e</span><span class="mord cjk_fallback">。</span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>6</mn><mtext>、e</mtext><mi>x</mi><mi>c</mi><mi>h</mi><mi>a</mi><mi>n</mi><mi>g</mi><mi>e</mi><mtext>接收到消息后，就根据消息的k</mtext><mi>e</mi><mi>y</mi><mtext>和已经设由b</mtext><mi>i</mi><mi>n</mi><mi>d</mi><mi>i</mi><mi>n</mi><mi>g</mi><mtext>，进行消息路里，将消息投递到</mtext></mrow><annotation encoding="application/x-tex">6、\text exchange接收到消息后，就根据消息的\text key和已经设由\text binding，进行消息路里，将消息投递到</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord">6</span><span class="mord cjk_fallback">、</span><span class="mord text"><span class="mord">e</span></span><span class="mord mathnormal">x</span><span class="mord mathnormal">c</span><span class="mord mathnormal">han</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">e</span><span class="mord cjk_fallback">接收到消息后，就根据消息的</span><span class="mord text"><span class="mord">k</span></span><span class="mord mathnormal" style="margin-right:0.03588em;">ey</span><span class="mord cjk_fallback">和已经设由</span><span class="mord text"><span class="mord">b</span></span><span class="mord mathnormal">in</span><span class="mord mathnormal">d</span><span class="mord mathnormal">in</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord cjk_fallback">，进行消息路里，将消息投递到</span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>一个或多个队列里</mtext></mrow><annotation encoding="application/x-tex">一个或多个队列里</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord cjk_fallback">一个或多个队列里</span></span></span></span></p><h3 id="工作模式">工作模式</h3><h4 id="helloword">helloword</h4><img src="https://ykexc-1314584214.cos.ap-nanjing.myqcloud.com/20230228175921.png" alt="" style="zoom:80%;" /><center>helloworld<center/><blockquote><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi><mi>r</mi><mi>o</mi><mi>d</mi><mi>u</mi><mi>c</mi><mi>e</mi><mi>r</mi></mrow><annotation encoding="application/x-tex">Producer</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal">ro</span><span class="mord mathnormal">d</span><span class="mord mathnormal">u</span><span class="mord mathnormal" style="margin-right:0.02778em;">cer</span></span></span></span></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">QUEUE_NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;ykexc_queue&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, TimeoutException &#123;<br><br>        <span class="hljs-comment">//  创建连接工厂</span><br>        <span class="hljs-type">ConnectionFactory</span> <span class="hljs-variable">connectionFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConnectionFactory</span>();<br>        connectionFactory.setHost(<span class="hljs-string">&quot;localhost&quot;</span>);<br>        connectionFactory.setPort(<span class="hljs-number">5672</span>);  <span class="hljs-comment">//不是http协议</span><br>        connectionFactory.setVirtualHost(<span class="hljs-string">&quot;/&quot;</span>);  <span class="hljs-comment">//  设置虚拟主机</span><br>        connectionFactory.setUsername(<span class="hljs-string">&quot;huya&quot;</span>);<br>        connectionFactory.setPassword(<span class="hljs-string">&quot;huya&quot;</span>);<br>        <span class="hljs-comment">//  创建长连接</span><br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> connectionFactory.newConnection();<br>        <span class="hljs-comment">//  创建channel</span><br>        <span class="hljs-type">Channel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> connection.createChannel();<br>        <span class="hljs-comment">//  声明队列</span><br>        <span class="hljs-comment">// String queue,  队列名</span><br>        <span class="hljs-comment">// boolean durable, 持久化</span><br>        <span class="hljs-comment">// boolean exclusive, 排他的</span><br>        <span class="hljs-comment">// boolean autoDelete, 自动删除</span><br>        <span class="hljs-comment">// Map&lt;String, Object&gt; arguments 属性</span><br>        channel.queueDeclare(QUEUE_NAME, <span class="hljs-literal">true</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">null</span>);<br>        <span class="hljs-comment">//  发消息</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello world&quot;</span>;<br>        <span class="hljs-comment">// String exchange,  交换机 &quot;&quot;表示默认交换机</span><br>        <span class="hljs-comment">// String routingKey, 路由键 也就是queue的名称</span><br>        <span class="hljs-comment">// AMQP.BasicProperties props, 属性</span><br>        <span class="hljs-comment">// byte[] body 消息</span><br>        channel.basicPublish(<span class="hljs-string">&quot;&quot;</span>, QUEUE_NAME, <span class="hljs-literal">null</span>, msg.getBytes());<br>        <span class="hljs-comment">//  关闭连接</span><br>        channel.close();<br>        connection.close();<br>    &#125;<br></code></pre></td></tr></table></figure><blockquote><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi><mi>o</mi><mi>n</mi><mi>s</mi><mi>u</mi><mi>m</mi><mi>e</mi><mi>r</mi></mrow><annotation encoding="application/x-tex">Consumer</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord mathnormal">o</span><span class="mord mathnormal">n</span><span class="mord mathnormal">s</span><span class="mord mathnormal">u</span><span class="mord mathnormal">m</span><span class="mord mathnormal" style="margin-right:0.02778em;">er</span></span></span></span></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">QUEUE_NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;ykexc_queue&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-comment">//  创建连接工厂</span><br>        <span class="hljs-type">ConnectionFactory</span> <span class="hljs-variable">connectionFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConnectionFactory</span>();<br>        connectionFactory.setHost(<span class="hljs-string">&quot;localhost&quot;</span>);<br>        connectionFactory.setPort(<span class="hljs-number">5672</span>);  <span class="hljs-comment">//不是http协议</span><br>        connectionFactory.setVirtualHost(<span class="hljs-string">&quot;/&quot;</span>);  <span class="hljs-comment">//  设置虚拟主机</span><br>        connectionFactory.setUsername(<span class="hljs-string">&quot;huya&quot;</span>);<br>        connectionFactory.setPassword(<span class="hljs-string">&quot;huya&quot;</span>);<br>        <span class="hljs-comment">//  创建长连接</span><br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> connectionFactory.newConnection();<br>        <span class="hljs-comment">//  创建channel</span><br>        <span class="hljs-type">Channel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> connection.createChannel();<br>        <span class="hljs-comment">// 防止生产者还未启动队列</span><br>        channel.queueDeclare(QUEUE_NAME, <span class="hljs-literal">true</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">null</span>);<br><br><br>        <span class="hljs-comment">//  监听队列</span><br>        <span class="hljs-type">Consumer</span> <span class="hljs-variable">consumer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultConsumer</span>(channel)&#123;<br><span class="hljs-comment">//            String consumerTag  消费者标签</span><br><span class="hljs-comment">//            Envelope envelop  信封， 保存许多信息</span><br><span class="hljs-comment">//            AMQP.BasicProperties properties  属性</span><br><span class="hljs-comment">//            byte[] body  消息字节数组</span><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleDelivery</span><span class="hljs-params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="hljs-type">byte</span>[] body)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>                System.out.println(<span class="hljs-string">&quot;consumerTag = &quot;</span> + consumerTag);<br>                System.out.println(<span class="hljs-string">&quot;envelope = &quot;</span> + envelope);<br>                System.out.println(<span class="hljs-string">&quot;message&quot;</span> + <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(body));<br>            &#125;<br>        &#125;;<br><span class="hljs-comment">//        String queue  监听队列名称</span><br><span class="hljs-comment">//        boolean autoAck  是否自动应答</span><br><span class="hljs-comment">//        Consumer callback  //怎样处理这些消息</span><br>        channel.basicConsume(QUEUE_NAME, <span class="hljs-literal">true</span>, consumer);<br><br><span class="hljs-comment">//        channel.close();  consumer需要一直保持接收状态， 所以不能断开连接</span><br><span class="hljs-comment">//        connection.close();</span><br>    &#125;<br></code></pre></td></tr></table></figure><h4 id="workqueues">workqueues</h4><img src="https://ykexc-1314584214.cos.ap-nanjing.myqcloud.com/20230301225623.png" alt="" style="zoom:80%;" /><center>workqueues<center/><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>代码与</mtext><mi>h</mi><mi>e</mi><mi>l</mi><mi>l</mi><mi>o</mi><mi>w</mi><mi>o</mi><mi>r</mi><mi>l</mi><mi>d</mi><mtext>类似</mtext><mo separator="true">,</mo><mtext>一个生产者生产</mtext><mo separator="true">,</mo><mtext>多个消费者消费</mtext></mrow><annotation encoding="application/x-tex">代码与helloworld类似,一个生产者生产,多个消费者消费</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord cjk_fallback">代码与</span><span class="mord mathnormal">h</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.01968em;">ll</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mord mathnormal" style="margin-right:0.02778em;">or</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">d</span><span class="mord cjk_fallback">类似</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord cjk_fallback">一个生产者生产</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord cjk_fallback">多个消费者消费</span></span></span></span></p><h4 id="Publish-Subscribe">Publish/Subscribe</h4><img src="https://ykexc-1314584214.cos.ap-nanjing.myqcloud.com/20230301232117.png" style="zoom:80%;" /><center>publish/subscribe<center/><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>订阅模型中，多了一个</mtext><mi>e</mi><mi>x</mi><mi>c</mi><mi>h</mi><mi>a</mi><mi>n</mi><mi>g</mi><mi>e</mi><mtext>角色，而且过程略有变化；</mtext></mrow><annotation encoding="application/x-tex">订阅模型中，多了一个exchange角色，而且过程略有变化；</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord cjk_fallback">订阅模型中，多了一个</span><span class="mord mathnormal">e</span><span class="mord mathnormal">x</span><span class="mord mathnormal">c</span><span class="mord mathnormal">han</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">e</span><span class="mord cjk_fallback">角色，而且过程略有变化；</span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi><mtext>：生产者，也就是要发送消息的程序，但是不再发送到队列中，而是发给</mtext><mi>X</mi><mtext>（交换机）</mtext></mrow><annotation encoding="application/x-tex">P：生产者，也就是要发送消息的程序，但是不再发送到队列中，而是发给X（交换机）</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord cjk_fallback">：生产者，也就是要发送消息的程序，但是不再发送到队列中，而是发给</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mord cjk_fallback">（交换机）</span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi><mtext>：消费者，消息的接受者，会一直等待消息到来。</mtext></mrow><annotation encoding="application/x-tex">C：消费者，消息的接受者，会一直等待消息到来。</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord cjk_fallback">：消费者，消息的接受者，会一直等待消息到来。</span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>Q</mi><mi>u</mi><mi>e</mi><mi>u</mi><mi>e</mi><mo>:</mo><mtext>消息队列，接收消息、缓存消息。</mtext></mrow><annotation encoding="application/x-tex">Queue:消息队列，接收消息、缓存消息。</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">Q</span><span class="mord mathnormal">u</span><span class="mord mathnormal">e</span><span class="mord mathnormal">u</span><span class="mord mathnormal">e</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord cjk_fallback">消息队列，接收消息、缓存消息。</span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>E</mi><mi>x</mi><mi>c</mi><mi>h</mi><mi>a</mi><mi>n</mi><mi>g</mi><mi>e</mi><mo>:</mo><mtext>交换机，图中的</mtext><mi>X</mi><mtext>。一方面，接收生产者发送的消息。另一方面，知道如何处理消息，</mtext></mrow><annotation encoding="application/x-tex">Exchange:交换机，图中的X。一方面，接收生产者发送的消息。另一方面，知道如何处理消息，</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mord mathnormal">x</span><span class="mord mathnormal">c</span><span class="mord mathnormal">han</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">e</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord cjk_fallback">交换机，图中的</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mord cjk_fallback">。一方面，接收生产者发送的消息。另一方面，知道如何处理消息，</span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>例如递交给某个特别队列、递交给所有队列、或是将消息丢弃。到底如何操作，取决于</mtext><mi>E</mi><mi>x</mi><mi>c</mi><mi>h</mi><mi>a</mi><mi>n</mi><mi>g</mi><mi>e</mi></mrow><annotation encoding="application/x-tex">例如递交给某个特别队列、递交给所有队列、或是将消息丢弃。到底如何操作，取决于Exchange</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord cjk_fallback">例如递交给某个特别队列、递交给所有队列、或是将消息丢弃。到底如何操作，取决于</span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mord mathnormal">x</span><span class="mord mathnormal">c</span><span class="mord mathnormal">han</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">e</span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>的类型。</mtext><mi>E</mi><mi>x</mi><mi>c</mi><mi>h</mi><mi>a</mi><mi>n</mi><mi>g</mi><mi>e</mi><mtext>有常见以下</mtext><mn>3</mn><mtext>种类型</mtext><mo>:</mo></mrow><annotation encoding="application/x-tex">的类型。Exchange有常见以下3种类型:</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord cjk_fallback">的类型。</span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mord mathnormal">x</span><span class="mord mathnormal">c</span><span class="mord mathnormal">han</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">e</span><span class="mord cjk_fallback">有常见以下</span><span class="mord">3</span><span class="mord cjk_fallback">种类型</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>F</mi><mi>a</mi><mi>n</mi><mi>o</mi><mi>u</mi><mi>t</mi><mo>:</mo><mtext>广播，将消息交给所有绑定到交换机的队列</mtext></mrow><annotation encoding="application/x-tex">Fanout:广播，将消息交给所有绑定到交换机的队列</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mord mathnormal">an</span><span class="mord mathnormal">o</span><span class="mord mathnormal">u</span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord cjk_fallback">广播，将消息交给所有绑定到交换机的队列</span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>D</mi><mi>i</mi><mi>r</mi><mi>e</mi><mi>c</mi><mi>t</mi><mo>:</mo><mtext>定向，把消息交给符合指定</mtext><mi>r</mi><mi>o</mi><mi>u</mi><mi>t</mi><mi>i</mi><mi>n</mi><mi>g</mi><mi>k</mi><mi>e</mi><mi>y</mi><mtext>的队列</mtext></mrow><annotation encoding="application/x-tex">Direct:定向，把消息交给符合指定routing key 的队列</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord mathnormal">i</span><span class="mord mathnormal">rec</span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord cjk_fallback">定向，把消息交给符合指定</span><span class="mord mathnormal">ro</span><span class="mord mathnormal">u</span><span class="mord mathnormal">t</span><span class="mord mathnormal">in</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mord mathnormal" style="margin-right:0.03588em;">ey</span><span class="mord cjk_fallback">的队列</span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>T</mi><mi>o</mi><mi>p</mi><mi>i</mi><mi>c</mi><mo>:</mo><mtext>通配符，把消息交给符合</mtext><mi>r</mi><mi>o</mi><mi>u</mi><mi>t</mi><mi>i</mi><mi>n</mi><mi>g</mi><mi>p</mi><mi>a</mi><mi>t</mi><mi>t</mi><mi>e</mi><mi>r</mi><mi>n</mi><mtext>（路由模式）的队列</mtext></mrow><annotation encoding="application/x-tex">Topic:通配符，把消息交给符合routing pattern（路由模式） 的队列</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mord mathnormal">o</span><span class="mord mathnormal">p</span><span class="mord mathnormal">i</span><span class="mord mathnormal">c</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord cjk_fallback">通配符，把消息交给符合</span><span class="mord mathnormal">ro</span><span class="mord mathnormal">u</span><span class="mord mathnormal">t</span><span class="mord mathnormal">in</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">p</span><span class="mord mathnormal">a</span><span class="mord mathnormal">tt</span><span class="mord mathnormal" style="margin-right:0.02778em;">er</span><span class="mord mathnormal">n</span><span class="mord cjk_fallback">（路由模式）的队列</span></span></span></span></p><blockquote><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi><mi>r</mi><mi>o</mi><mi>d</mi><mi>u</mi><mi>c</mi><mi>e</mi><mi>r</mi></mrow><annotation encoding="application/x-tex">producer</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">p</span><span class="mord mathnormal">ro</span><span class="mord mathnormal">d</span><span class="mord mathnormal">u</span><span class="mord mathnormal" style="margin-right:0.02778em;">cer</span></span></span></span></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.test.publishsubscribe;<br><br><span class="hljs-keyword">import</span> com.rabbitmq.client.BuiltinExchangeType;<br><span class="hljs-keyword">import</span> com.rabbitmq.client.Channel;<br><span class="hljs-keyword">import</span> com.rabbitmq.client.Connection;<br><span class="hljs-keyword">import</span> com.rabbitmq.client.ConnectionFactory;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> mqz</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">QUEUE_NAME_2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;publish_and_subscribe_queue1&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">QUEUE_NAME_3</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;publish_and_subscribe_queue2&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">EXCHANGE_NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;publish_and_subscribe_exchange&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">//  创建连接工厂</span><br>        <span class="hljs-type">ConnectionFactory</span> <span class="hljs-variable">connectionFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConnectionFactory</span>();<br>        connectionFactory.setHost(<span class="hljs-string">&quot;localhost&quot;</span>);<br>        connectionFactory.setPort(<span class="hljs-number">5672</span>);  <span class="hljs-comment">//不是http</span><br>        connectionFactory.setVirtualHost(<span class="hljs-string">&quot;/&quot;</span>);  <span class="hljs-comment">//  设置虚拟主机</span><br>        connectionFactory.setUsername(<span class="hljs-string">&quot;huya&quot;</span>);<br>        connectionFactory.setPassword(<span class="hljs-string">&quot;huya&quot;</span>);<br>        <span class="hljs-comment">//  创建长连接</span><br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> connectionFactory.newConnection();<br>        <span class="hljs-comment">//  创建channel</span><br>        <span class="hljs-type">Channel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> connection.createChannel();<br>        <span class="hljs-comment">// 防止生产者还未启动队列</span><br>        channel.queueDeclare(QUEUE_NAME_2, <span class="hljs-literal">true</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">null</span>);<br>        channel.queueDeclare(QUEUE_NAME_3, <span class="hljs-literal">true</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">null</span>);<br><br>        channel.exchangeDeclare(EXCHANGE_NAME, BuiltinExchangeType.FANOUT, <span class="hljs-literal">true</span>, <span class="hljs-literal">true</span>, <span class="hljs-literal">null</span>);<br><br>        <span class="hljs-comment">//  绑定交换机</span><br>        channel.queueBind(QUEUE_NAME_2, EXCHANGE_NAME, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-literal">null</span>);<br>        channel.queueBind(QUEUE_NAME_3, EXCHANGE_NAME, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-literal">null</span>);<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello&quot;</span>;<br><br>        channel.basicPublish(EXCHANGE_NAME, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-literal">null</span>, message.getBytes());<br>        channel.close();<br>        connection.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>c</mi><mi>o</mi><mi>n</mi><mi>s</mi><mi>u</mi><mi>m</mi><mi>e</mi><mi>r</mi></mrow><annotation encoding="application/x-tex">consumer</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">co</span><span class="mord mathnormal">n</span><span class="mord mathnormal">s</span><span class="mord mathnormal">u</span><span class="mord mathnormal">m</span><span class="mord mathnormal" style="margin-right:0.02778em;">er</span></span></span></span></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.test.publishsubscribe;<br><br><span class="hljs-keyword">import</span> com.rabbitmq.client.*;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> mqz</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">QUEUE_NAME_2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;publish_and_subscribe_queue1&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">QUEUE_NAME_3</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;publish_and_subscribe_queue2&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">EXCHANGE_NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;publish_and_subscribe_exchange&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">//  创建连接工厂</span><br>        <span class="hljs-type">ConnectionFactory</span> <span class="hljs-variable">connectionFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConnectionFactory</span>();<br>        connectionFactory.setHost(<span class="hljs-string">&quot;localhost&quot;</span>);<br>        connectionFactory.setPort(<span class="hljs-number">5672</span>);  <span class="hljs-comment">//不是http</span><br>        connectionFactory.setVirtualHost(<span class="hljs-string">&quot;/&quot;</span>);  <span class="hljs-comment">//  设置虚拟主机</span><br>        connectionFactory.setUsername(<span class="hljs-string">&quot;huya&quot;</span>);<br>        connectionFactory.setPassword(<span class="hljs-string">&quot;huya&quot;</span>);<br>        <span class="hljs-comment">//  创建长连接</span><br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> connectionFactory.newConnection();<br>        <span class="hljs-comment">//  创建channel</span><br>        <span class="hljs-type">Channel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> connection.createChannel();<br>        <span class="hljs-comment">// 防止生产者还未启动队列</span><br>        channel.queueDeclare(QUEUE_NAME_2, <span class="hljs-literal">true</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">null</span>);<br>        channel.queueDeclare(QUEUE_NAME_3, <span class="hljs-literal">true</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">null</span>);<br><br>        channel.exchangeDeclare(EXCHANGE_NAME, BuiltinExchangeType.FANOUT, <span class="hljs-literal">true</span>, <span class="hljs-literal">true</span>, <span class="hljs-literal">null</span>);<br>        <span class="hljs-comment">//  监听队列</span><br>        <span class="hljs-type">Consumer</span> <span class="hljs-variable">consumer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultConsumer</span>(channel) &#123;<br><span class="hljs-comment">//            String consumerTag  消费者标签</span><br><span class="hljs-comment">//            Envelope envelop  信封， 保存许多信息</span><br><span class="hljs-comment">//            AMQP.BasicProperties properties  属性</span><br><span class="hljs-comment">//            byte[] body  消息字节数组</span><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleDelivery</span><span class="hljs-params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="hljs-type">byte</span>[] body)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>                System.out.println(<span class="hljs-string">&quot;consumerTag = &quot;</span> + consumerTag);<br>                System.out.println(<span class="hljs-string">&quot;envelope = &quot;</span> + envelope);<br>                System.out.println(<span class="hljs-string">&quot;message&quot;</span> + <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(body));<br>            &#125;<br>        &#125;;<br><span class="hljs-comment">//        String queue  监听队列名称</span><br><span class="hljs-comment">//        boolean autoAck  是否自动应答</span><br><span class="hljs-comment">//        Consumer callback  //怎样处理这些消息</span><br>        channel.basicConsume(QUEUE_NAME_2, <span class="hljs-literal">true</span>, consumer);<br><br><span class="hljs-comment">//        channel.close();  consumer需要一直保持接收状态， 所以不能断开连接</span><br><span class="hljs-comment">//        connection.close();</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.test.publishsubscribe;<br><br><span class="hljs-keyword">import</span> com.rabbitmq.client.*;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> mqz</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">QUEUE_NAME_2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;publish_and_subscribe_queue1&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">QUEUE_NAME_3</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;publish_and_subscribe_queue2&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">EXCHANGE_NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;publish_and_subscribe_exchange&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">//  创建连接工厂</span><br>        <span class="hljs-type">ConnectionFactory</span> <span class="hljs-variable">connectionFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConnectionFactory</span>();<br>        connectionFactory.setHost(<span class="hljs-string">&quot;localhost&quot;</span>);<br>        connectionFactory.setPort(<span class="hljs-number">5672</span>);  <span class="hljs-comment">//不是http</span><br>        connectionFactory.setVirtualHost(<span class="hljs-string">&quot;/&quot;</span>);  <span class="hljs-comment">//  设置虚拟主机</span><br>        connectionFactory.setUsername(<span class="hljs-string">&quot;huya&quot;</span>);<br>        connectionFactory.setPassword(<span class="hljs-string">&quot;huya&quot;</span>);<br>        <span class="hljs-comment">//  创建长连接</span><br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> connectionFactory.newConnection();<br>        <span class="hljs-comment">//  创建channel</span><br>        <span class="hljs-type">Channel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> connection.createChannel();<br>        <span class="hljs-comment">// 防止生产者还未启动队列</span><br>        channel.queueDeclare(QUEUE_NAME_2, <span class="hljs-literal">true</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">null</span>);<br>        channel.queueDeclare(QUEUE_NAME_3, <span class="hljs-literal">true</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">null</span>);<br><br>        channel.exchangeDeclare(EXCHANGE_NAME, BuiltinExchangeType.FANOUT, <span class="hljs-literal">true</span>, <span class="hljs-literal">true</span>, <span class="hljs-literal">null</span>);<br>        <span class="hljs-comment">//  监听队列</span><br>        <span class="hljs-type">Consumer</span> <span class="hljs-variable">consumer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultConsumer</span>(channel) &#123;<br>            <span class="hljs-comment">//            String consumerTag  消费者标签</span><br><span class="hljs-comment">//            Envelope envelop  信封， 保存许多信息</span><br><span class="hljs-comment">//            AMQP.BasicProperties properties  属性</span><br><span class="hljs-comment">//            byte[] body  消息字节数组</span><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleDelivery</span><span class="hljs-params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="hljs-type">byte</span>[] body)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>                System.out.println(<span class="hljs-string">&quot;consumerTag = &quot;</span> + consumerTag);<br>                System.out.println(<span class="hljs-string">&quot;envelope = &quot;</span> + envelope);<br>                System.out.println(<span class="hljs-string">&quot;message&quot;</span> + <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(body));<br>            &#125;<br>        &#125;;<br><span class="hljs-comment">//        String queue  监听队列名称</span><br><span class="hljs-comment">//        boolean autoAck  是否自动应答</span><br><span class="hljs-comment">//        Consumer callback  //怎样处理这些消息</span><br>        channel.basicConsume(QUEUE_NAME_3, <span class="hljs-literal">true</span>, consumer);<br><br><span class="hljs-comment">//        channel.close();  consumer需要一直保持接收状态， 所以不能断开连接</span><br><span class="hljs-comment">//        connection.close();</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Routing">Routing</h4><img src="https://ykexc-1314584214.cos.ap-nanjing.myqcloud.com/20230304164241.png" alt="" style="zoom:80%;" /><center>routing<center/><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>与</mtext><mi>p</mi><mi>u</mi><mi>b</mi><mi>l</mi><mi>i</mi><mi>s</mi><mi>h</mi><mo>−</mo><mi>s</mi><mi>u</mi><mi>b</mi><mi>s</mi><mi>c</mi><mi>r</mi><mi>i</mi><mi>b</mi><mi>e</mi><mtext>不同的是</mtext><mo separator="true">,</mo><mi>e</mi><mi>x</mi><mi>c</mi><mi>h</mi><mi>a</mi><mi>n</mi><mi>g</mi><mi>e</mi><mtext>不一样</mtext><mo separator="true">,</mo><mtext>并且给每个队列绑定了</mtext><mi>r</mi><mi>o</mi><mi>u</mi><mi>t</mi><mi>i</mi><mi>n</mi><mi>g</mi><mi mathvariant="normal">_</mi><mi>k</mi><mi>e</mi><mi>y</mi></mrow><annotation encoding="application/x-tex">与publish-subscribe不同的是,exchange不一样,并且给每个队列绑定了routing\_key</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord cjk_fallback">与</span><span class="mord mathnormal">p</span><span class="mord mathnormal">u</span><span class="mord mathnormal">b</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">i</span><span class="mord mathnormal">s</span><span class="mord mathnormal">h</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.0044em;vertical-align:-0.31em;"></span><span class="mord mathnormal">s</span><span class="mord mathnormal">u</span><span class="mord mathnormal">b</span><span class="mord mathnormal" style="margin-right:0.02778em;">scr</span><span class="mord mathnormal">ib</span><span class="mord mathnormal">e</span><span class="mord cjk_fallback">不同的是</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">e</span><span class="mord mathnormal">x</span><span class="mord mathnormal">c</span><span class="mord mathnormal">han</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">e</span><span class="mord cjk_fallback">不一样</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord cjk_fallback">并且给每个队列绑定了</span><span class="mord mathnormal">ro</span><span class="mord mathnormal">u</span><span class="mord mathnormal">t</span><span class="mord mathnormal">in</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord" style="margin-right:0.02778em;">_</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mord mathnormal" style="margin-right:0.03588em;">ey</span></span></span></span></p><blockquote><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi><mi>r</mi><mi>o</mi><mi>d</mi><mi>u</mi><mi>c</mi><mi>e</mi><mi>r</mi></mrow><annotation encoding="application/x-tex">producer</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">p</span><span class="mord mathnormal">ro</span><span class="mord mathnormal">d</span><span class="mord mathnormal">u</span><span class="mord mathnormal" style="margin-right:0.02778em;">cer</span></span></span></span></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.test.routing;<br><br><span class="hljs-keyword">import</span> com.rabbitmq.client.BuiltinExchangeType;<br><span class="hljs-keyword">import</span> com.rabbitmq.client.Channel;<br><span class="hljs-keyword">import</span> com.rabbitmq.client.Connection;<br><span class="hljs-keyword">import</span> com.rabbitmq.client.ConnectionFactory;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> mqz</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">QUEUE_NAME_2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;routing_queue1&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">QUEUE_NAME_3</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;routing_queue2&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">EXCHANGE_NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;routing_exchange&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">//  创建连接工厂</span><br>        <span class="hljs-type">ConnectionFactory</span> <span class="hljs-variable">connectionFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConnectionFactory</span>();<br>        connectionFactory.setHost(<span class="hljs-string">&quot;localhost&quot;</span>);<br>        connectionFactory.setPort(<span class="hljs-number">5672</span>);  <span class="hljs-comment">//不是http</span><br>        connectionFactory.setVirtualHost(<span class="hljs-string">&quot;/&quot;</span>);  <span class="hljs-comment">//  设置虚拟主机</span><br>        connectionFactory.setUsername(<span class="hljs-string">&quot;huya&quot;</span>);<br>        connectionFactory.setPassword(<span class="hljs-string">&quot;huya&quot;</span>);<br>        <span class="hljs-comment">//  创建长连接</span><br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> connectionFactory.newConnection();<br>        <span class="hljs-comment">//  创建channel</span><br>        <span class="hljs-type">Channel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> connection.createChannel();<br>        <span class="hljs-comment">// 防止生产者还未启动队列</span><br>        channel.queueDeclare(QUEUE_NAME_2, <span class="hljs-literal">true</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">null</span>);<br>        channel.queueDeclare(QUEUE_NAME_3, <span class="hljs-literal">true</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">null</span>);<br><br>        channel.exchangeDeclare(EXCHANGE_NAME, BuiltinExchangeType.DIRECT, <span class="hljs-literal">true</span>, <span class="hljs-literal">true</span>, <span class="hljs-literal">null</span>);<br><br>        <span class="hljs-comment">//  绑定交换机</span><br>        channel.queueBind(QUEUE_NAME_2, EXCHANGE_NAME, <span class="hljs-string">&quot;error&quot;</span>);<br>        channel.queueBind(QUEUE_NAME_3, EXCHANGE_NAME, <span class="hljs-string">&quot;error&quot;</span>);<br>        channel.queueBind(QUEUE_NAME_2, EXCHANGE_NAME, <span class="hljs-string">&quot;info&quot;</span>);<br>        channel.queueBind(QUEUE_NAME_2, EXCHANGE_NAME, <span class="hljs-string">&quot;warning&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello&quot;</span>;<br><br>        channel.basicPublish(EXCHANGE_NAME, <span class="hljs-string">&quot;error&quot;</span>, <span class="hljs-literal">null</span>, message.getBytes());<br>        channel.basicPublish(EXCHANGE_NAME, <span class="hljs-string">&quot;info&quot;</span>, <span class="hljs-literal">null</span>, message.getBytes());<br>        channel.basicPublish(EXCHANGE_NAME, <span class="hljs-string">&quot;warning&quot;</span>, <span class="hljs-literal">null</span>, message.getBytes());<br>        channel.close();<br>        connection.close();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><blockquote><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>c</mi><mi>o</mi><mi>n</mi><mi>s</mi><mi>u</mi><mi>m</mi><mi>e</mi><mi>r</mi></mrow><annotation encoding="application/x-tex">consumer</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">co</span><span class="mord mathnormal">n</span><span class="mord mathnormal">s</span><span class="mord mathnormal">u</span><span class="mord mathnormal">m</span><span class="mord mathnormal" style="margin-right:0.02778em;">er</span></span></span></span></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.test.routing;<br><br><span class="hljs-keyword">import</span> com.rabbitmq.client.*;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> mqz</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">QUEUE_NAME_2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;routing_queue1&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">QUEUE_NAME_3</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;routing_queue2&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">EXCHANGE_NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;routing_exchange&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">//  创建连接工厂</span><br>        <span class="hljs-type">ConnectionFactory</span> <span class="hljs-variable">connectionFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConnectionFactory</span>();<br>        connectionFactory.setHost(<span class="hljs-string">&quot;localhost&quot;</span>);<br>        connectionFactory.setPort(<span class="hljs-number">5672</span>);  <span class="hljs-comment">//不是http</span><br>        connectionFactory.setVirtualHost(<span class="hljs-string">&quot;/&quot;</span>);  <span class="hljs-comment">//  设置虚拟主机</span><br>        connectionFactory.setUsername(<span class="hljs-string">&quot;huya&quot;</span>);<br>        connectionFactory.setPassword(<span class="hljs-string">&quot;huya&quot;</span>);<br>        <span class="hljs-comment">//  创建长连接</span><br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> connectionFactory.newConnection();<br>        <span class="hljs-comment">//  创建channel</span><br>        <span class="hljs-type">Channel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> connection.createChannel();<br>        <span class="hljs-comment">// 防止生产者还未启动队列</span><br>        channel.queueDeclare(QUEUE_NAME_2, <span class="hljs-literal">true</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">null</span>);<br>        channel.queueDeclare(QUEUE_NAME_3, <span class="hljs-literal">true</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">null</span>);<br><br>        channel.exchangeDeclare(EXCHANGE_NAME, BuiltinExchangeType.DIRECT, <span class="hljs-literal">true</span>, <span class="hljs-literal">true</span>, <span class="hljs-literal">null</span>);<br>        <span class="hljs-comment">//  监听队列</span><br>        <span class="hljs-type">Consumer</span> <span class="hljs-variable">consumer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultConsumer</span>(channel) &#123;<br>            <span class="hljs-comment">/**</span><br><span class="hljs-comment">             * <span class="hljs-doctag">@param</span> consumerTag the &lt;i&gt;consumer tag&lt;/i&gt; associated with the consumer </span><br><span class="hljs-comment">             * <span class="hljs-doctag">@param</span> envelope    packaging data for the message</span><br><span class="hljs-comment">             * <span class="hljs-doctag">@param</span> properties  content header data for the message</span><br><span class="hljs-comment">             * <span class="hljs-doctag">@param</span> body        the message body (opaque, client-specific byte array)</span><br><span class="hljs-comment">             * <span class="hljs-doctag">@throws</span> IOException</span><br><span class="hljs-comment">             */</span><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleDelivery</span><span class="hljs-params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="hljs-type">byte</span>[] body)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>                System.out.println(<span class="hljs-string">&quot;message&quot;</span> + <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(body));<br>            &#125;<br>        &#125;;<br><span class="hljs-comment">//        String queue  监听队列名称</span><br><span class="hljs-comment">//        boolean autoAck  是否自动应答</span><br><span class="hljs-comment">//        Consumer callback  //怎样处理这些消息</span><br>        channel.basicConsume(QUEUE_NAME_2, <span class="hljs-literal">true</span>, consumer);<br><br><span class="hljs-comment">//        channel.close();  consumer需要一直保持接收状态， 所以不能断开连接</span><br><span class="hljs-comment">//        connection.close();</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.test.routing;<br><br><span class="hljs-keyword">import</span> com.rabbitmq.client.*;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> mqz</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">QUEUE_NAME_2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;routing_queue1&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">QUEUE_NAME_3</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;routing_queue2&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">EXCHANGE_NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;routing_exchange&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">//  创建连接工厂</span><br>        <span class="hljs-type">ConnectionFactory</span> <span class="hljs-variable">connectionFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConnectionFactory</span>();<br>        connectionFactory.setHost(<span class="hljs-string">&quot;localhost&quot;</span>);<br>        connectionFactory.setPort(<span class="hljs-number">5672</span>);  <span class="hljs-comment">//不是http</span><br>        connectionFactory.setVirtualHost(<span class="hljs-string">&quot;/&quot;</span>);  <span class="hljs-comment">//  设置虚拟主机</span><br>        connectionFactory.setUsername(<span class="hljs-string">&quot;huya&quot;</span>);<br>        connectionFactory.setPassword(<span class="hljs-string">&quot;huya&quot;</span>);<br>        <span class="hljs-comment">//  创建长连接</span><br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> connectionFactory.newConnection();<br>        <span class="hljs-comment">//  创建channel</span><br>        <span class="hljs-type">Channel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> connection.createChannel();<br>        <span class="hljs-comment">// 防止生产者还未启动队列</span><br>        channel.queueDeclare(QUEUE_NAME_2, <span class="hljs-literal">true</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">null</span>);<br>        channel.queueDeclare(QUEUE_NAME_3, <span class="hljs-literal">true</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">null</span>);<br><br>        channel.exchangeDeclare(EXCHANGE_NAME, BuiltinExchangeType.DIRECT, <span class="hljs-literal">true</span>, <span class="hljs-literal">true</span>, <span class="hljs-literal">null</span>);<br>        <span class="hljs-comment">//  监听队列</span><br>        <span class="hljs-type">Consumer</span> <span class="hljs-variable">consumer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultConsumer</span>(channel) &#123;<br>            <span class="hljs-comment">/**</span><br><span class="hljs-comment">             * <span class="hljs-doctag">@param</span> consumerTag the &lt;i&gt;consumer tag&lt;/i&gt; associated with the consumer </span><br><span class="hljs-comment">             * <span class="hljs-doctag">@param</span> envelope    packaging data for the message</span><br><span class="hljs-comment">             * <span class="hljs-doctag">@param</span> properties  content header data for the message</span><br><span class="hljs-comment">             * <span class="hljs-doctag">@param</span> body        the message body (opaque, client-specific byte array)</span><br><span class="hljs-comment">             */</span><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleDelivery</span><span class="hljs-params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="hljs-type">byte</span>[] body)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>                System.out.println(<span class="hljs-string">&quot;message&quot;</span> + <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(body));<br>            &#125;<br>        &#125;;<br><span class="hljs-comment">//        String queue  监听队列名称</span><br><span class="hljs-comment">//        boolean autoAck  是否自动应答</span><br><span class="hljs-comment">//        Consumer callback  //怎样处理这些消息</span><br>        channel.basicConsume(QUEUE_NAME_3, <span class="hljs-literal">true</span>, consumer);<br><br><span class="hljs-comment">//        channel.close();  consumer需要一直保持接收状态， 所以不能断开连接</span><br><span class="hljs-comment">//        connection.close();</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Topics">Topics</h4><img src="https://ykexc-1314584214.cos.ap-nanjing.myqcloud.com/20230304221545.png" style="zoom:80%;" /><center>topics<center/><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>当存在多个绑定关系时</mtext><mo separator="true">,</mo><mtext>主题模式就会很方便</mtext><mo separator="true">,</mo><mtext>主题模式和</mtext><mi>r</mi><mi>o</mi><mi>u</mi><mi>t</mi><mi>i</mi><mi>n</mi><mi>g</mi><mtext>模式的区别就是</mtext><mi>e</mi><mi>x</mi><mi>c</mi><mi>h</mi><mi>a</mi><mi>n</mi><mi>g</mi><mi>e</mi><mtext>类型不一样。</mtext></mrow><annotation encoding="application/x-tex">当存在多个绑定关系时,主题模式就会很方便,主题模式和routing模式的区别就是exchange类型不一样。</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord cjk_fallback">当存在多个绑定关系时</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord cjk_fallback">主题模式就会很方便</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord cjk_fallback">主题模式和</span><span class="mord mathnormal">ro</span><span class="mord mathnormal">u</span><span class="mord mathnormal">t</span><span class="mord mathnormal">in</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord cjk_fallback">模式的区别就是</span><span class="mord mathnormal">e</span><span class="mord mathnormal">x</span><span class="mord mathnormal">c</span><span class="mord mathnormal">han</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">e</span><span class="mord cjk_fallback">类型不一样。</span></span></span></span></p><blockquote><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi><mi>r</mi><mi>o</mi><mi>d</mi><mi>u</mi><mi>c</mi><mi>e</mi><mi>r</mi></mrow><annotation encoding="application/x-tex">producer</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">p</span><span class="mord mathnormal">ro</span><span class="mord mathnormal">d</span><span class="mord mathnormal">u</span><span class="mord mathnormal" style="margin-right:0.02778em;">cer</span></span></span></span></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.test.topics;<br><br><span class="hljs-keyword">import</span> com.rabbitmq.client.BuiltinExchangeType;<br><span class="hljs-keyword">import</span> com.rabbitmq.client.Channel;<br><span class="hljs-keyword">import</span> com.rabbitmq.client.Connection;<br><span class="hljs-keyword">import</span> com.rabbitmq.client.ConnectionFactory;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> mqz</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">QUEUE_NAME_2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;topic_queue1&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">QUEUE_NAME_3</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;topic_queue2&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">EXCHANGE_NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;topic_exchange&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">//  创建连接工厂</span><br>        <span class="hljs-type">ConnectionFactory</span> <span class="hljs-variable">connectionFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConnectionFactory</span>();<br>        connectionFactory.setHost(<span class="hljs-string">&quot;localhost&quot;</span>);<br>        connectionFactory.setPort(<span class="hljs-number">5672</span>);  <span class="hljs-comment">//不是http</span><br>        connectionFactory.setVirtualHost(<span class="hljs-string">&quot;/&quot;</span>);  <span class="hljs-comment">//  设置虚拟主机</span><br>        connectionFactory.setUsername(<span class="hljs-string">&quot;huya&quot;</span>);<br>        connectionFactory.setPassword(<span class="hljs-string">&quot;huya&quot;</span>);<br>        <span class="hljs-comment">//  创建长连接</span><br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> connectionFactory.newConnection();<br>        <span class="hljs-comment">//  创建channel</span><br>        <span class="hljs-type">Channel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> connection.createChannel();<br>        <span class="hljs-comment">// 防止生产者还未启动队列</span><br>        channel.queueDeclare(QUEUE_NAME_2, <span class="hljs-literal">true</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">null</span>);<br>        channel.queueDeclare(QUEUE_NAME_3, <span class="hljs-literal">true</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">null</span>);<br><br>        channel.exchangeDeclare(EXCHANGE_NAME, BuiltinExchangeType.TOPIC, <span class="hljs-literal">true</span>, <span class="hljs-literal">true</span>, <span class="hljs-literal">null</span>);<br><br>        <span class="hljs-comment">//  绑定交换机</span><br>        channel.queueBind(QUEUE_NAME_2, EXCHANGE_NAME, <span class="hljs-string">&quot;*.work&quot;</span>);<br>        channel.queueBind(QUEUE_NAME_3, EXCHANGE_NAME, <span class="hljs-string">&quot;ykexc.*&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello ykexc-work&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">message2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello xyx-work&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">message3</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello ykexc-xyx&quot;</span>;<br>        channel.basicPublish(EXCHANGE_NAME, <span class="hljs-string">&quot;ykexc.work&quot;</span>, <span class="hljs-literal">null</span>, message.getBytes());<br>        channel.basicPublish(EXCHANGE_NAME, <span class="hljs-string">&quot;xyx.work&quot;</span>, <span class="hljs-literal">null</span>, message2.getBytes());<br>        channel.basicPublish(EXCHANGE_NAME, <span class="hljs-string">&quot;ykexc.xyx&quot;</span>, <span class="hljs-literal">null</span>, message3.getBytes());<br>        channel.close();<br>        connection.close();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><blockquote><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>c</mi><mi>o</mi><mi>n</mi><mi>s</mi><mi>u</mi><mi>m</mi><mi>e</mi><mi>r</mi></mrow><annotation encoding="application/x-tex">consumer</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">co</span><span class="mord mathnormal">n</span><span class="mord mathnormal">s</span><span class="mord mathnormal">u</span><span class="mord mathnormal">m</span><span class="mord mathnormal" style="margin-right:0.02778em;">er</span></span></span></span></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//consumer1</span><br><span class="hljs-keyword">package</span> com.test.topics;<br><br><span class="hljs-keyword">import</span> com.rabbitmq.client.*;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> mqz</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">QUEUE_NAME_2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;topic_queue1&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">QUEUE_NAME_3</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;topic_queue2&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">EXCHANGE_NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;topic_exchange&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">//  创建连接工厂</span><br>        <span class="hljs-type">ConnectionFactory</span> <span class="hljs-variable">connectionFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConnectionFactory</span>();<br>        connectionFactory.setHost(<span class="hljs-string">&quot;localhost&quot;</span>);<br>        connectionFactory.setPort(<span class="hljs-number">5672</span>);  <span class="hljs-comment">//不是http</span><br>        connectionFactory.setVirtualHost(<span class="hljs-string">&quot;/&quot;</span>);  <span class="hljs-comment">//  设置虚拟主机</span><br>        connectionFactory.setUsername(<span class="hljs-string">&quot;huya&quot;</span>);<br>        connectionFactory.setPassword(<span class="hljs-string">&quot;huya&quot;</span>);<br>        <span class="hljs-comment">//  创建长连接</span><br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> connectionFactory.newConnection();<br>        <span class="hljs-comment">//  创建channel</span><br>        <span class="hljs-type">Channel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> connection.createChannel();<br>        <span class="hljs-comment">// 防止生产者还未启动队列</span><br>        channel.queueDeclare(QUEUE_NAME_2, <span class="hljs-literal">true</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">null</span>);<br>        channel.queueDeclare(QUEUE_NAME_3, <span class="hljs-literal">true</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">null</span>);<br><br>        channel.exchangeDeclare(EXCHANGE_NAME, BuiltinExchangeType.TOPIC, <span class="hljs-literal">true</span>, <span class="hljs-literal">true</span>, <span class="hljs-literal">null</span>);<br>        <span class="hljs-comment">//  监听队列</span><br>        <span class="hljs-type">Consumer</span> <span class="hljs-variable">consumer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultConsumer</span>(channel) &#123;<br>            <span class="hljs-comment">/**</span><br><span class="hljs-comment">             * <span class="hljs-doctag">@param</span> consumerTag the &lt;i&gt;consumer tag&lt;/i&gt; associated with the consumer</span><br><span class="hljs-comment">             * <span class="hljs-doctag">@param</span> envelope    packaging data for the message</span><br><span class="hljs-comment">             * <span class="hljs-doctag">@param</span> properties  content header data for the message</span><br><span class="hljs-comment">             * <span class="hljs-doctag">@param</span> body        the message body (opaque, client-specific byte array)</span><br><span class="hljs-comment">             * <span class="hljs-doctag">@throws</span> IOException</span><br><span class="hljs-comment">             */</span><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleDelivery</span><span class="hljs-params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="hljs-type">byte</span>[] body)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>                System.out.println(<span class="hljs-string">&quot;message&quot;</span> + <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(body));<br>            &#125;<br>        &#125;;<br><span class="hljs-comment">//        String queue  监听队列名称</span><br><span class="hljs-comment">//        boolean autoAck  是否自动应答</span><br><span class="hljs-comment">//        Consumer callback  //怎样处理这些消息</span><br>        channel.basicConsume(QUEUE_NAME_2, <span class="hljs-literal">true</span>, consumer);<br><br><span class="hljs-comment">//        channel.close();  consumer需要一直保持接收状态， 所以不能断开连接</span><br><span class="hljs-comment">//        connection.close();</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//consumer2</span><br><span class="hljs-keyword">package</span> com.test.topics;<br><br><span class="hljs-keyword">import</span> com.rabbitmq.client.*;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> mqz</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">QUEUE_NAME_2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;topic_queue1&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">QUEUE_NAME_3</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;topic_queue2&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">EXCHANGE_NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;topic_exchange&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">//  创建连接工厂</span><br>        <span class="hljs-type">ConnectionFactory</span> <span class="hljs-variable">connectionFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConnectionFactory</span>();<br>        connectionFactory.setHost(<span class="hljs-string">&quot;localhost&quot;</span>);<br>        connectionFactory.setPort(<span class="hljs-number">5672</span>);  <span class="hljs-comment">//不是http</span><br>        connectionFactory.setVirtualHost(<span class="hljs-string">&quot;/&quot;</span>);  <span class="hljs-comment">//  设置虚拟主机</span><br>        connectionFactory.setUsername(<span class="hljs-string">&quot;huya&quot;</span>);<br>        connectionFactory.setPassword(<span class="hljs-string">&quot;huya&quot;</span>);<br>        <span class="hljs-comment">//  创建长连接</span><br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> connectionFactory.newConnection();<br>        <span class="hljs-comment">//  创建channel</span><br>        <span class="hljs-type">Channel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> connection.createChannel();<br>        <span class="hljs-comment">// 防止生产者还未启动队列</span><br>        channel.queueDeclare(QUEUE_NAME_2, <span class="hljs-literal">true</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">null</span>);<br>        channel.queueDeclare(QUEUE_NAME_3, <span class="hljs-literal">true</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">null</span>);<br><br>        channel.exchangeDeclare(EXCHANGE_NAME, BuiltinExchangeType.TOPIC, <span class="hljs-literal">true</span>, <span class="hljs-literal">true</span>, <span class="hljs-literal">null</span>);<br>        <span class="hljs-comment">//  监听队列</span><br>        <span class="hljs-type">Consumer</span> <span class="hljs-variable">consumer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultConsumer</span>(channel) &#123;<br>            <span class="hljs-comment">/**</span><br><span class="hljs-comment">             * <span class="hljs-doctag">@param</span> consumerTag the &lt;i&gt;consumer tag&lt;/i&gt; associated with the consumer</span><br><span class="hljs-comment">             * <span class="hljs-doctag">@param</span> envelope    packaging data for the message</span><br><span class="hljs-comment">             * <span class="hljs-doctag">@param</span> properties  content header data for the message</span><br><span class="hljs-comment">             * <span class="hljs-doctag">@param</span> body        the message body (opaque, client-specific byte array)</span><br><span class="hljs-comment">             */</span><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleDelivery</span><span class="hljs-params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="hljs-type">byte</span>[] body)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>                System.out.println(<span class="hljs-string">&quot;message&quot;</span> + <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(body));<br>            &#125;<br>        &#125;;<br><span class="hljs-comment">//        String queue  监听队列名称</span><br><span class="hljs-comment">//        boolean autoAck  是否自动应答</span><br><span class="hljs-comment">//        Consumer callback  //怎样处理这些消息</span><br>        channel.basicConsume(QUEUE_NAME_3, <span class="hljs-literal">true</span>, consumer);<br><br><span class="hljs-comment">//        channel.close();  consumer需要一直保持接收状态， 所以不能断开连接</span><br><span class="hljs-comment">//        connection.close();</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>MQ</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker使用</title>
    <link href="/2023/02/27/Docker%E4%BD%BF%E7%94%A8/"/>
    <url>/2023/02/27/Docker%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h3 id="Docker基本用法">Docker基本用法</h3><h4>将当前用户添加到<code>docker</code>用户组</h4><p>为了避免每次使用<code>docker</code>命令都需要加上<code>sudo</code>权限，可以将当前用户加入安装中自动创建的<code>docker</code>用户组(可以参考<a href="https://docs.docker.com/engine/install/linux-postinstall/">官方文档</a>)：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo usermod -aG docker $USER<br></code></pre></td></tr></table></figure><p>执行完此操作后，需要退出服务器，再重新登录回来，才可以省去<code>sudo</code>权限。</p><h4>镜像（images）</h4><ol><li><code>docker pull ubuntu:20.04</code>：拉取一个镜像</li><li><code>docker images</code>：列出本地所有镜像</li><li><code>docker image rm ubuntu:20.04</code> 或 <code>docker rmi ubuntu:20.04</code>：删除镜像<code>ubuntu:20.04</code></li><li><code>docker [container] commit CONTAINER IMAGE_NAME:TAG</code>：创建某个<code>container</code>的镜像</li><li><code>docker save -o ubuntu_20_04.tar ubuntu:20.04</code>：将镜像<code>ubuntu:20.04</code>导出到本地文件<code>ubuntu_20_04.tar</code>中</li><li><code>docker load -i ubuntu_20_04.tar</code>：将镜像<code>ubuntu:20.04</code>从本地文件<code>ubuntu_20_04.tar</code>中加载出来</li></ol><h4>容器(container)</h4><ol><li><code>docker [container] create -it ubuntu:20.04</code>：利用镜像<code>ubuntu:20.04</code>创建一个容器。</li><li><code>docker ps -a</code>：查看本地的所有容器</li><li><code>docker [container] start CONTAINER</code>：启动容器</li><li><code>docker [container] stop CONTAINER</code>：停止容器</li><li><code>docker [container] restart CONTAINER</code>：重启容器</li><li><code>docker [contaienr] run -itd ubuntu:20.04</code>：创建并启动一个容器</li><li><code>docker [container] attach CONTAINER</code>：进入容器<ul><li>先按<code>Ctrl-p</code>，再按<code>Ctrl-q</code>可以挂起容器</li></ul><ol>    <li><code>docker [container] exec CONTAINER COMMAND</code>：在容器中执行命令</li><li><code>docker [container] rm CONTAINER</code>：删除容器</li><li><code>docker container prune</code>：删除所有已停止的容器</li><li><code>docker export -o xxx.tar CONTAINER</code>：将容器<code>CONTAINER</code>导出到本地文件<code>xxx.tar</code>中</li><li><code>docker import xxx.tar image_name:tag</code>：将本地文件<code>xxx.tar</code>导入成镜像，并将镜像命名为<code>image_name:tag</code></li><li><code>docker export/import</code>与<code>docker save/load</code>的区别：<ul><li><code>export/import</code>会丢弃历史记录和元数据信息，仅保存容器当时的快照状态</li><li><code>save/load</code>会保存完整记录，体积更大</li></ul><ol>    <li><code>docker top CONTAINER</code>：查看某个容器内的所有进程</li><li><code>docker stats</code>：查看所有容器的统计信息，包括CPU、内存、存储、网络等信息</li><li><code>docker cp xxx CONTAINER:xxx</code> 或 <code>docker cp CONTAINER:xxx xxx</code>：在本地和容器间复制文件</li><li><code>docker rename CONTAINER1 CONTAINER2</code>：重命名容器</li><li><code>docker update CONTAINER --memory 500MB</code>：修改容器限制</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
