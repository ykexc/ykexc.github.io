<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Docker使用</title>
    <link href="/2023/02/27/Docker%E4%BD%BF%E7%94%A8/"/>
    <url>/2023/02/27/Docker%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h3 id="Docker基本用法"><a href="#Docker基本用法" class="headerlink" title="Docker基本用法"></a>Docker基本用法</h3><h4>将当前用户添加到<code>docker</code>用户组</h4><p>为了避免每次使用<code>docker</code>命令都需要加上<code>sudo</code>权限，可以将当前用户加入安装中自动创建的<code>docker</code>用户组(可以参考<a href="https://docs.docker.com/engine/install/linux-postinstall/">官方文档</a>)：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo usermod -aG docker $USER<br></code></pre></td></tr></table></figure><p>执行完此操作后，需要退出服务器，再重新登录回来，才可以省去<code>sudo</code>权限。</p><h4>镜像（images）</h4><ol><li><code>docker pull ubuntu:20.04</code>：拉取一个镜像</li><li><code>docker images</code>：列出本地所有镜像</li><li><code>docker image rm ubuntu:20.04</code> 或 <code>docker rmi ubuntu:20.04</code>：删除镜像<code>ubuntu:20.04</code></li><li><code>docker [container] commit CONTAINER IMAGE_NAME:TAG</code>：创建某个<code>container</code>的镜像</li><li><code>docker save -o ubuntu_20_04.tar ubuntu:20.04</code>：将镜像<code>ubuntu:20.04</code>导出到本地文件<code>ubuntu_20_04.tar</code>中</li><li><code>docker load -i ubuntu_20_04.tar</code>：将镜像<code>ubuntu:20.04</code>从本地文件<code>ubuntu_20_04.tar</code>中加载出来</li></ol><h4>容器(container)</h4><ol><li><code>docker [container] create -it ubuntu:20.04</code>：利用镜像<code>ubuntu:20.04</code>创建一个容器。</li><li><code>docker ps -a</code>：查看本地的所有容器</li><li><code>docker [container] start CONTAINER</code>：启动容器</li><li><code>docker [container] stop CONTAINER</code>：停止容器</li><li><code>docker [container] restart CONTAINER</code>：重启容器</li><li><code>docker [contaienr] run -itd ubuntu:20.04</code>：创建并启动一个容器</li><li><code>docker [container] attach CONTAINER</code>：进入容器<ul><li>先按<code>Ctrl-p</code>，再按<code>Ctrl-q</code>可以挂起容器</li></ul><ol>    <li><code>docker [container] exec CONTAINER COMMAND</code>：在容器中执行命令</li><li><code>docker [container] rm CONTAINER</code>：删除容器</li><li><code>docker container prune</code>：删除所有已停止的容器</li><li><code>docker export -o xxx.tar CONTAINER</code>：将容器<code>CONTAINER</code>导出到本地文件<code>xxx.tar</code>中</li><li><code>docker import xxx.tar image_name:tag</code>：将本地文件<code>xxx.tar</code>导入成镜像，并将镜像命名为<code>image_name:tag</code></li><li><code>docker export/import</code>与<code>docker save/load</code>的区别：<ul><li><code>export/import</code>会丢弃历史记录和元数据信息，仅保存容器当时的快照状态</li><li><code>save/load</code>会保存完整记录，体积更大</li></ul><ol>    <li><code>docker top CONTAINER</code>：查看某个容器内的所有进程</li><li><code>docker stats</code>：查看所有容器的统计信息，包括CPU、内存、存储、网络等信息</li><li><code>docker cp xxx CONTAINER:xxx</code> 或 <code>docker cp CONTAINER:xxx xxx</code>：在本地和容器间复制文件</li><li><code>docker rename CONTAINER1 CONTAINER2</code>：重命名容器</li><li><code>docker update CONTAINER --memory 500MB</code>：修改容器限制</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
